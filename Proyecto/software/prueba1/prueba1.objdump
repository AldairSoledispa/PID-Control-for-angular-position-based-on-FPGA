
prueba1.elf:     file format elf32-littlenios2
prueba1.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x04020230

Program Header:
    LOAD off    0x00001000 vaddr 0x04020000 paddr 0x04020000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x04020020 paddr 0x04020020 align 2**12
         filesz 0x00003df0 memsz 0x00003df0 flags r-x
    LOAD off    0x00004e10 vaddr 0x04023e10 paddr 0x0402411c align 2**12
         filesz 0x0000030c memsz 0x0000030c flags rw-
    LOAD off    0x00005428 vaddr 0x04024428 paddr 0x04024428 align 2**12
         filesz 0x00000000 memsz 0x00000120 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  04020000  04020000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  04020020  04020020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00003aa8  04020230  04020230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000138  04023cd8  04023cd8  00004cd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       0000030c  04023e10  0402411c  00004e10  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000120  04024428  04024428  00005428  2**2
                  ALLOC, SMALL_DATA
  6 .SDRAM        00000000  00000000  00000000  0000511c  2**0
                  CONTENTS
  7 .SRAM1        00000000  04024548  04024548  0000511c  2**0
                  CONTENTS
  8 .comment      00000046  00000000  00000000  0000511c  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000650  00000000  00000000  00005168  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00006baa  00000000  00000000  000057b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000028f0  00000000  00000000  0000c362  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00002e1e  00000000  00000000  0000ec52  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00000b20  00000000  00000000  00011a70  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00001ef6  00000000  00000000  00012590  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00004e9f  00000000  00000000  00014486  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000040  00000000  00000000  00019328  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000007e8  00000000  00000000  00019368  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0001b582  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000b  00000000  00000000  0001b585  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0001b590  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0001b591  2**0
                  CONTENTS, READONLY
 22 .stderr_dev   00000009  00000000  00000000  0001b592  2**0
                  CONTENTS, READONLY
 23 .stdin_dev    00000009  00000000  00000000  0001b59b  2**0
                  CONTENTS, READONLY
 24 .stdout_dev   00000009  00000000  00000000  0001b5a4  2**0
                  CONTENTS, READONLY
 25 .sopc_system_name 00000007  00000000  00000000  0001b5ad  2**0
                  CONTENTS, READONLY
 26 .quartus_project_dir 00000037  00000000  00000000  0001b5b4  2**0
                  CONTENTS, READONLY
 27 .jdi          0000745b  00000000  00000000  0001b5eb  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     00080ae6  00000000  00000000  00022a46  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
04020000 l    d  .entry	00000000 .entry
04020020 l    d  .exceptions	00000000 .exceptions
04020230 l    d  .text	00000000 .text
04023cd8 l    d  .rodata	00000000 .rodata
04023e10 l    d  .rwdata	00000000 .rwdata
04024428 l    d  .bss	00000000 .bss
00000000 l    d  .SDRAM	00000000 .SDRAM
04024548 l    d  .SRAM1	00000000 .SRAM1
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../prueba1_bsp//obj/HAL/src/crt0.o
04020268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_load.c
040225a8 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
04022730 l     F .text	00000034 alt_dev_reg
04023e10 l     O .rwdata	0000002c JTAG_UART
04023e3c l     O .rwdata	0000002c LDR
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
04022a34 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_close.c
04022c80 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
04022db4 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
04022de0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
04023180 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
040232e0 l     F .text	0000003c alt_get_errno
0402331c l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 impure.c
04024010 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 alt_exit.c
04024440 g     O .bss	00000004 alt_instruction_exception_handler
04022694 g     F .text	0000006c alt_main
04024448 g     O .bss	00000100 alt_irq
0402411c g       *ABS*	00000000 __flash_rwdata_start
04020ffc g     F .text	000000dc .hidden __gtdf2
0402378c g     F .text	00000024 altera_nios2_gen2_irq_init
04020000 g     F .entry	0000000c __reset
04020020 g       *ABS*	00000000 __flash_exceptions_start
04024444 g     O .bss	00000004 errno
0402442c g     O .bss	00000004 alt_argv
0402c0f0 g       *ABS*	00000000 _gp
04022700 g     F .text	00000030 usleep
04023e90 g     O .rwdata	00000180 alt_fd_list
040237b0 g     F .text	00000090 alt_find_dev
04023264 g     F .text	0000007c alt_io_redirect
04023a0c g     F .text	0000009c alt_exception_cause_generated_bad_addr
040228b4 g     F .text	000000ec altera_avalon_jtag_uart_read
040224c4 g     F .text	00000064 .hidden __udivsi3
040205b8 g     F .text	00000074 .hidden __fixunsdfsi
04024100 g     O .rwdata	00000004 alt_max_fd
04024114 g     O .rwdata	00000004 _global_impure_ptr
04024548 g       *ABS*	00000000 __bss_end
04023090 g     F .text	000000f0 alt_iic_isr_register
04023684 g     F .text	00000108 alt_tick
040222c0 g     F .text	000000a8 .hidden __floatunsidf
04023044 g     F .text	0000004c alt_ic_irq_enabled
040235e8 g     F .text	0000009c alt_alarm_stop
04024434 g     O .bss	00000004 alt_irq_active
040200fc g     F .exceptions	000000d4 alt_irq_handler
04023e68 g     O .rwdata	00000028 alt_dev_null
04022d94 g     F .text	00000020 alt_dcache_flush_all
04022240 g     F .text	00000080 .hidden __fixdfsi
0402411c g       *ABS*	00000000 __ram_rwdata_end
040240f8 g     O .rwdata	00000008 alt_dev_list
04023e10 g       *ABS*	00000000 __ram_rodata_end
00000000 g       *ABS*	00000000 __alt_mem_SDRAM
04022528 g     F .text	00000058 .hidden __umodsi3
04024548 g       *ABS*	00000000 end
040201d0 g     F .exceptions	00000060 alt_instruction_exception_entry
0403f400 g       *ABS*	00000000 __alt_stack_pointer
04022aac g     F .text	0000007c alt_avalon_timer_sc_init
04022368 g     F .text	00000064 .hidden __clzsi2
040229a0 g     F .text	00000094 altera_avalon_jtag_uart_write
04023b14 g     F .text	00000190 __call_exitprocs
04020230 g     F .text	0000003c _start
04024438 g     O .bss	00000004 _alt_tick_rate
0402443c g     O .bss	00000004 _alt_nticks
0402279c g     F .text	00000058 alt_sys_init
04020000 g       *ABS*	00000000 __alt_mem_SRAM1
04022580 g     F .text	00000028 .hidden __mulsi3
04023e10 g       *ABS*	00000000 __ram_rwdata_start
04023cd8 g       *ABS*	00000000 __ram_rodata_start
040227f4 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
04023948 g     F .text	000000c4 alt_get_fd
04022b28 g     F .text	00000158 alt_busy_sleep
04023ac8 g     F .text	00000030 memcmp
04024548 g       *ABS*	00000000 __alt_stack_base
0402062c g     F .text	000009d0 .hidden __divdf3
040210d8 g     F .text	0000086c .hidden __muldf3
04023840 g     F .text	00000108 alt_find_file
04022e1c g     F .text	000000a4 alt_dev_llist_insert
04024428 g       *ABS*	00000000 __bss_start
0402026c g     F .text	0000034c main
04024430 g     O .bss	00000004 alt_envp
04022854 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
04024104 g     O .rwdata	00000004 alt_errno
040223cc g     F .text	00000084 .hidden __divsi3
04023cd8 g       *ABS*	00000000 __flash_rodata_start
04022764 g     F .text	00000038 alt_irq_init
04023564 g     F .text	00000084 alt_release_fd
04023cd8 g     O .rodata	00000100 .hidden __clz_tab
04024118 g     O .rwdata	00000004 _impure_ptr
04024428 g     O .bss	00000004 alt_argc
04020020 g       .exceptions	00000000 alt_irq_entry
040240f0 g     O .rwdata	00000008 alt_fs_list
04020020 g       *ABS*	00000000 __ram_exceptions_start
04022ee0 g     F .text	00000050 alt_ic_isr_register
0402411c g       *ABS*	00000000 _edata
04024548 g       *ABS*	00000000 _end
04020230 g       *ABS*	00000000 __ram_exceptions_end
04022fb8 g     F .text	0000008c alt_ic_irq_disable
04023aa8 g     F .text	00000020 exit
04022450 g     F .text	00000074 .hidden __modsi3
0403f400 g       *ABS*	00000000 __alt_data_end
04020020 g     F .exceptions	00000000 alt_exception
04023ca4 g     F .text	00000034 _exit
04023af8 g     F .text	0000001c strlen
04023408 g     F .text	0000015c open
04020ffc g     F .text	000000dc .hidden __gedf2
04022ec0 g     F .text	00000020 alt_icache_flush_all
04024108 g     O .rwdata	00000004 alt_priority_mask
04022f30 g     F .text	00000088 alt_ic_irq_enable
04021944 g     F .text	000008fc .hidden __subdf3
0402410c g     O .rwdata	00000008 alt_alarm_list
04022cbc g     F .text	000000d8 close
04022610 g     F .text	00000084 alt_load



Disassembly of section .entry:

04020000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 4020000:	004100b4 	movhi	at,1026
    ori r1, r1, %lo(_start)
 4020004:	08408c14 	ori	at,at,560
    jmp r1
 4020008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

04020020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 4020020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 4020024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 4020028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 402002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 4020030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 4020034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 4020038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 402003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 4020040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 4020044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 4020048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 402004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 4020050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 4020054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 4020058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 402005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 4020060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 4020064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 4020068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 402006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 4020070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 4020074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 4020078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 402007c:	10000326 	beq	r2,zero,402008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 4020080:	20000226 	beq	r4,zero,402008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 4020084:	40200fc0 	call	40200fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 4020088:	00000706 	br	40200a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 402008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 4020090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 4020094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 4020098:	40201d00 	call	40201d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 402009c:	1000021e 	bne	r2,zero,40200a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 40200a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 40200a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 40200a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 40200ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 40200b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 40200b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 40200b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 40200bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 40200c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 40200c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 40200c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 40200cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 40200d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 40200d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 40200d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 40200dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 40200e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 40200e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 40200e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 40200ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 40200f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 40200f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 40200f8:	ef80083a 	eret

040200fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 40200fc:	defff904 	addi	sp,sp,-28
 4020100:	dfc00615 	stw	ra,24(sp)
 4020104:	df000515 	stw	fp,20(sp)
 4020108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 402010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 4020110:	0005313a 	rdctl	r2,ipending
 4020114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 4020118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 402011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 4020120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 4020124:	00800044 	movi	r2,1
 4020128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 402012c:	e0fffb17 	ldw	r3,-20(fp)
 4020130:	e0bffc17 	ldw	r2,-16(fp)
 4020134:	1884703a 	and	r2,r3,r2
 4020138:	10001426 	beq	r2,zero,402018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 402013c:	008100b4 	movhi	r2,1026
 4020140:	10911204 	addi	r2,r2,17480
 4020144:	e0fffd17 	ldw	r3,-12(fp)
 4020148:	180690fa 	slli	r3,r3,3
 402014c:	10c5883a 	add	r2,r2,r3
 4020150:	10c00017 	ldw	r3,0(r2)
 4020154:	008100b4 	movhi	r2,1026
 4020158:	10911204 	addi	r2,r2,17480
 402015c:	e13ffd17 	ldw	r4,-12(fp)
 4020160:	200890fa 	slli	r4,r4,3
 4020164:	1105883a 	add	r2,r2,r4
 4020168:	10800104 	addi	r2,r2,4
 402016c:	10800017 	ldw	r2,0(r2)
 4020170:	1009883a 	mov	r4,r2
 4020174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 4020178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 402017c:	0005313a 	rdctl	r2,ipending
 4020180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 4020184:	e0bfff17 	ldw	r2,-4(fp)
 4020188:	00000706 	br	40201a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 402018c:	e0bffc17 	ldw	r2,-16(fp)
 4020190:	1085883a 	add	r2,r2,r2
 4020194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 4020198:	e0bffd17 	ldw	r2,-12(fp)
 402019c:	10800044 	addi	r2,r2,1
 40201a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 40201a4:	003fe106 	br	402012c <__alt_data_end+0xfffe0d2c>

    active = alt_irq_pending ();
 40201a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 40201ac:	e0bffb17 	ldw	r2,-20(fp)
 40201b0:	103fdb1e 	bne	r2,zero,4020120 <__alt_data_end+0xfffe0d20>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 40201b4:	0001883a 	nop
}
 40201b8:	0001883a 	nop
 40201bc:	e037883a 	mov	sp,fp
 40201c0:	dfc00117 	ldw	ra,4(sp)
 40201c4:	df000017 	ldw	fp,0(sp)
 40201c8:	dec00204 	addi	sp,sp,8
 40201cc:	f800283a 	ret

040201d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 40201d0:	defffb04 	addi	sp,sp,-20
 40201d4:	dfc00415 	stw	ra,16(sp)
 40201d8:	df000315 	stw	fp,12(sp)
 40201dc:	df000304 	addi	fp,sp,12
 40201e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 40201e4:	00bfffc4 	movi	r2,-1
 40201e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
 40201ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 40201f0:	d0a0d417 	ldw	r2,-31920(gp)
 40201f4:	10000726 	beq	r2,zero,4020214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 40201f8:	d0a0d417 	ldw	r2,-31920(gp)
 40201fc:	e0fffd17 	ldw	r3,-12(fp)
 4020200:	e1bffe17 	ldw	r6,-8(fp)
 4020204:	e17fff17 	ldw	r5,-4(fp)
 4020208:	1809883a 	mov	r4,r3
 402020c:	103ee83a 	callr	r2
 4020210:	00000206 	br	402021c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 4020214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 4020218:	0005883a 	mov	r2,zero
}
 402021c:	e037883a 	mov	sp,fp
 4020220:	dfc00117 	ldw	ra,4(sp)
 4020224:	df000017 	ldw	fp,0(sp)
 4020228:	dec00204 	addi	sp,sp,8
 402022c:	f800283a 	ret

Disassembly of section .text:

04020230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 4020230:	06c100f4 	movhi	sp,1027
    ori sp, sp, %lo(__alt_stack_pointer)
 4020234:	defd0014 	ori	sp,sp,62464
    movhi gp, %hi(_gp)
 4020238:	068100b4 	movhi	gp,1026
    ori gp, gp, %lo(_gp)
 402023c:	d6b03c14 	ori	gp,gp,49392
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 4020240:	008100b4 	movhi	r2,1026
    ori r2, r2, %lo(__bss_start)
 4020244:	10910a14 	ori	r2,r2,17448

    movhi r3, %hi(__bss_end)
 4020248:	00c100b4 	movhi	r3,1026
    ori r3, r3, %lo(__bss_end)
 402024c:	18d15214 	ori	r3,r3,17736

    beq r2, r3, 1f
 4020250:	10c00326 	beq	r2,r3,4020260 <_start+0x30>

0:
    stw zero, (r2)
 4020254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 4020258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 402025c:	10fffd36 	bltu	r2,r3,4020254 <__alt_data_end+0xfffe0e54>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 4020260:	40226100 	call	4022610 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 4020264:	40226940 	call	4022694 <alt_main>

04020268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 4020268:	003fff06 	br	4020268 <__alt_data_end+0xfffe0e68>

0402026c <main>:
#include <stdio.h>
//#include <system.h>
#include "io.h"

/*=======  main =========*/
int main (void) {
 402026c:	defff404 	addi	sp,sp,-48
 4020270:	dfc00b15 	stw	ra,44(sp)
 4020274:	df000a15 	stw	fp,40(sp)
 4020278:	df000a04 	addi	fp,sp,40
	volatile int * ADC = (int *) 0x4041020;//asignar la memoria del ADC
 402027c:	00810134 	movhi	r2,1028
 4020280:	10840804 	addi	r2,r2,4128
 4020284:	e0bff615 	stw	r2,-40(fp)
	int * memoria = (int *) 0x00; // SDRAM address
 4020288:	e03ff715 	stw	zero,-36(fp)
	unsigned int canal_ldr;
	unsigned int canal_humedad_suelo;
	unsigned int canal_humedad_aire;
	unsigned int canal_temperatura;

	*(ADC) = 0; //setear valores de los canales en 0
 402028c:	e0bff617 	ldw	r2,-40(fp)
 4020290:	10000015 	stw	zero,0(r2)

	while (1){

		//Asignar valores a los canales
		canal_ldr = 0;
 4020294:	e03ff815 	stw	zero,-32(fp)
		canal_humedad_suelo = 1;
 4020298:	00800044 	movi	r2,1
 402029c:	e0bff915 	stw	r2,-28(fp)
		canal_humedad_aire = 2;
 40202a0:	00800084 	movi	r2,2
 40202a4:	e0bffa15 	stw	r2,-24(fp)
		canal_temperatura = 3;
 40202a8:	008000c4 	movi	r2,3
 40202ac:	e0bffb15 	stw	r2,-20(fp)
		//Lectura LDR
		ldr = *(ADC+canal_ldr); //Obtener el valor del ldr
 40202b0:	e0bff817 	ldw	r2,-32(fp)
 40202b4:	1085883a 	add	r2,r2,r2
 40202b8:	1085883a 	add	r2,r2,r2
 40202bc:	1007883a 	mov	r3,r2
 40202c0:	e0bff617 	ldw	r2,-40(fp)
 40202c4:	10c5883a 	add	r2,r2,r3
 40202c8:	10800017 	ldw	r2,0(r2)
 40202cc:	e0bffc15 	stw	r2,-16(fp)
		ldr=(ldr*3.3)*100/(4095*3)-10; //Convertir el valor en porcentaje
 40202d0:	e13ffc17 	ldw	r4,-16(fp)
 40202d4:	40222c00 	call	40222c0 <__floatunsidf>
 40202d8:	1011883a 	mov	r8,r2
 40202dc:	1813883a 	mov	r9,r3
 40202e0:	019999b4 	movhi	r6,26214
 40202e4:	31999984 	addi	r6,r6,26214
 40202e8:	01d002b4 	movhi	r7,16394
 40202ec:	39d99984 	addi	r7,r7,26214
 40202f0:	4009883a 	mov	r4,r8
 40202f4:	480b883a 	mov	r5,r9
 40202f8:	40210d80 	call	40210d8 <__muldf3>
 40202fc:	1009883a 	mov	r4,r2
 4020300:	180b883a 	mov	r5,r3
 4020304:	2005883a 	mov	r2,r4
 4020308:	2807883a 	mov	r3,r5
 402030c:	000d883a 	mov	r6,zero
 4020310:	01d01674 	movhi	r7,16473
 4020314:	1009883a 	mov	r4,r2
 4020318:	180b883a 	mov	r5,r3
 402031c:	40210d80 	call	40210d8 <__muldf3>
 4020320:	1009883a 	mov	r4,r2
 4020324:	180b883a 	mov	r5,r3
 4020328:	2005883a 	mov	r2,r4
 402032c:	2807883a 	mov	r3,r5
 4020330:	000d883a 	mov	r6,zero
 4020334:	01d03234 	movhi	r7,16584
 4020338:	39ffa004 	addi	r7,r7,-384
 402033c:	1009883a 	mov	r4,r2
 4020340:	180b883a 	mov	r5,r3
 4020344:	402062c0 	call	402062c <__divdf3>
 4020348:	1009883a 	mov	r4,r2
 402034c:	180b883a 	mov	r5,r3
 4020350:	2005883a 	mov	r2,r4
 4020354:	2807883a 	mov	r3,r5
 4020358:	000d883a 	mov	r6,zero
 402035c:	01d00934 	movhi	r7,16420
 4020360:	1009883a 	mov	r4,r2
 4020364:	180b883a 	mov	r5,r3
 4020368:	40219440 	call	4021944 <__subdf3>
 402036c:	1009883a 	mov	r4,r2
 4020370:	180b883a 	mov	r5,r3
 4020374:	2005883a 	mov	r2,r4
 4020378:	2807883a 	mov	r3,r5
 402037c:	1009883a 	mov	r4,r2
 4020380:	180b883a 	mov	r5,r3
 4020384:	40205b80 	call	40205b8 <__fixunsdfsi>
 4020388:	e0bffc15 	stw	r2,-16(fp)
		//printf("El valor del LDR en el canal %d es --> %d Porciento \n",canal_ldr,ldr);

		//Lectura FC-28
		humedad_suelo = *(ADC+canal_humedad_suelo); //Obtener el valor del sensor FC-28
 402038c:	e0bff917 	ldw	r2,-28(fp)
 4020390:	1085883a 	add	r2,r2,r2
 4020394:	1085883a 	add	r2,r2,r2
 4020398:	1007883a 	mov	r3,r2
 402039c:	e0bff617 	ldw	r2,-40(fp)
 40203a0:	10c5883a 	add	r2,r2,r3
 40203a4:	10800017 	ldw	r2,0(r2)
 40203a8:	e0bffd15 	stw	r2,-12(fp)
		humedad_suelo=(humedad_suelo*3.3)*100/(4095*3)-10; //Convertir el valor en porcentaje
 40203ac:	e13ffd17 	ldw	r4,-12(fp)
 40203b0:	40222c00 	call	40222c0 <__floatunsidf>
 40203b4:	1011883a 	mov	r8,r2
 40203b8:	1813883a 	mov	r9,r3
 40203bc:	019999b4 	movhi	r6,26214
 40203c0:	31999984 	addi	r6,r6,26214
 40203c4:	01d002b4 	movhi	r7,16394
 40203c8:	39d99984 	addi	r7,r7,26214
 40203cc:	4009883a 	mov	r4,r8
 40203d0:	480b883a 	mov	r5,r9
 40203d4:	40210d80 	call	40210d8 <__muldf3>
 40203d8:	1009883a 	mov	r4,r2
 40203dc:	180b883a 	mov	r5,r3
 40203e0:	2005883a 	mov	r2,r4
 40203e4:	2807883a 	mov	r3,r5
 40203e8:	000d883a 	mov	r6,zero
 40203ec:	01d01674 	movhi	r7,16473
 40203f0:	1009883a 	mov	r4,r2
 40203f4:	180b883a 	mov	r5,r3
 40203f8:	40210d80 	call	40210d8 <__muldf3>
 40203fc:	1009883a 	mov	r4,r2
 4020400:	180b883a 	mov	r5,r3
 4020404:	2005883a 	mov	r2,r4
 4020408:	2807883a 	mov	r3,r5
 402040c:	000d883a 	mov	r6,zero
 4020410:	01d03234 	movhi	r7,16584
 4020414:	39ffa004 	addi	r7,r7,-384
 4020418:	1009883a 	mov	r4,r2
 402041c:	180b883a 	mov	r5,r3
 4020420:	402062c0 	call	402062c <__divdf3>
 4020424:	1009883a 	mov	r4,r2
 4020428:	180b883a 	mov	r5,r3
 402042c:	2005883a 	mov	r2,r4
 4020430:	2807883a 	mov	r3,r5
 4020434:	000d883a 	mov	r6,zero
 4020438:	01d00934 	movhi	r7,16420
 402043c:	1009883a 	mov	r4,r2
 4020440:	180b883a 	mov	r5,r3
 4020444:	40219440 	call	4021944 <__subdf3>
 4020448:	1009883a 	mov	r4,r2
 402044c:	180b883a 	mov	r5,r3
 4020450:	2005883a 	mov	r2,r4
 4020454:	2807883a 	mov	r3,r5
 4020458:	1009883a 	mov	r4,r2
 402045c:	180b883a 	mov	r5,r3
 4020460:	40205b80 	call	40205b8 <__fixunsdfsi>
 4020464:	e0bffd15 	stw	r2,-12(fp)
		//printf("El valor del sensor FC-28 en el canal %d es --> %d Porciento \n",canal_humedad_suelo,humedad_suelo);

		//Lectura Humedad del aire
		humedad_aire = *(ADC+canal_humedad_aire); //Obtener el valor de la humedad del aire
 4020468:	e0bffa17 	ldw	r2,-24(fp)
 402046c:	1085883a 	add	r2,r2,r2
 4020470:	1085883a 	add	r2,r2,r2
 4020474:	1007883a 	mov	r3,r2
 4020478:	e0bff617 	ldw	r2,-40(fp)
 402047c:	10c5883a 	add	r2,r2,r3
 4020480:	10800017 	ldw	r2,0(r2)
 4020484:	e0bffe15 	stw	r2,-8(fp)
		humedad_aire=(humedad_aire*3.3)*100/(4095*3)-10; //Convertir el valor en porcentaje
 4020488:	e13ffe17 	ldw	r4,-8(fp)
 402048c:	40222c00 	call	40222c0 <__floatunsidf>
 4020490:	1011883a 	mov	r8,r2
 4020494:	1813883a 	mov	r9,r3
 4020498:	019999b4 	movhi	r6,26214
 402049c:	31999984 	addi	r6,r6,26214
 40204a0:	01d002b4 	movhi	r7,16394
 40204a4:	39d99984 	addi	r7,r7,26214
 40204a8:	4009883a 	mov	r4,r8
 40204ac:	480b883a 	mov	r5,r9
 40204b0:	40210d80 	call	40210d8 <__muldf3>
 40204b4:	1009883a 	mov	r4,r2
 40204b8:	180b883a 	mov	r5,r3
 40204bc:	2005883a 	mov	r2,r4
 40204c0:	2807883a 	mov	r3,r5
 40204c4:	000d883a 	mov	r6,zero
 40204c8:	01d01674 	movhi	r7,16473
 40204cc:	1009883a 	mov	r4,r2
 40204d0:	180b883a 	mov	r5,r3
 40204d4:	40210d80 	call	40210d8 <__muldf3>
 40204d8:	1009883a 	mov	r4,r2
 40204dc:	180b883a 	mov	r5,r3
 40204e0:	2005883a 	mov	r2,r4
 40204e4:	2807883a 	mov	r3,r5
 40204e8:	000d883a 	mov	r6,zero
 40204ec:	01d03234 	movhi	r7,16584
 40204f0:	39ffa004 	addi	r7,r7,-384
 40204f4:	1009883a 	mov	r4,r2
 40204f8:	180b883a 	mov	r5,r3
 40204fc:	402062c0 	call	402062c <__divdf3>
 4020500:	1009883a 	mov	r4,r2
 4020504:	180b883a 	mov	r5,r3
 4020508:	2005883a 	mov	r2,r4
 402050c:	2807883a 	mov	r3,r5
 4020510:	000d883a 	mov	r6,zero
 4020514:	01d00934 	movhi	r7,16420
 4020518:	1009883a 	mov	r4,r2
 402051c:	180b883a 	mov	r5,r3
 4020520:	40219440 	call	4021944 <__subdf3>
 4020524:	1009883a 	mov	r4,r2
 4020528:	180b883a 	mov	r5,r3
 402052c:	2005883a 	mov	r2,r4
 4020530:	2807883a 	mov	r3,r5
 4020534:	1009883a 	mov	r4,r2
 4020538:	180b883a 	mov	r5,r3
 402053c:	40205b80 	call	40205b8 <__fixunsdfsi>
 4020540:	e0bffe15 	stw	r2,-8(fp)
		//printf("El valor de la humedad del aire en el canal %d es --> %d Porciento \n",canal_humedad_aire,humedad_aire);

		//Lectura de la temperatura del ambiente
		temperatura = *(ADC+canal_temperatura); //Obtener el valor de la humedad del aire
 4020544:	e0bffb17 	ldw	r2,-20(fp)
 4020548:	1085883a 	add	r2,r2,r2
 402054c:	1085883a 	add	r2,r2,r2
 4020550:	1007883a 	mov	r3,r2
 4020554:	e0bff617 	ldw	r2,-40(fp)
 4020558:	10c5883a 	add	r2,r2,r3
 402055c:	10800017 	ldw	r2,0(r2)
 4020560:	e0bfff15 	stw	r2,-4(fp)
		//temperatura=(temperatura*3.3)*100/(4095*3)-10; //Convertir el valor en porcentaje
		temperatura = 44;
 4020564:	00800b04 	movi	r2,44
 4020568:	e0bfff15 	stw	r2,-4(fp)
		//printf("El valor de la temperatura en el canal %d es --> %d Porciento \n",canal_temperatura,temperatura);

		//Escritura en memoria
		IOWR(memoria,0x000,ldr);
 402056c:	e0fffc17 	ldw	r3,-16(fp)
 4020570:	e0bff717 	ldw	r2,-36(fp)
 4020574:	10c00035 	stwio	r3,0(r2)
		IOWR(memoria,0x001,humedad_suelo);
 4020578:	e0bff717 	ldw	r2,-36(fp)
 402057c:	10800104 	addi	r2,r2,4
 4020580:	e0fffd17 	ldw	r3,-12(fp)
 4020584:	10c00035 	stwio	r3,0(r2)
		IOWR(memoria,0x002,humedad_aire);
 4020588:	e0bff717 	ldw	r2,-36(fp)
 402058c:	10800204 	addi	r2,r2,8
 4020590:	e0fffe17 	ldw	r3,-8(fp)
 4020594:	10c00035 	stwio	r3,0(r2)
		IOWR(memoria,0x003,temperatura);
 4020598:	e0bff717 	ldw	r2,-36(fp)
 402059c:	10800304 	addi	r2,r2,12
 40205a0:	e0ffff17 	ldw	r3,-4(fp)
 40205a4:	10c00035 	stwio	r3,0(r2)
		usleep(100000);
 40205a8:	010000b4 	movhi	r4,2
 40205ac:	2121a804 	addi	r4,r4,-31072
 40205b0:	40227000 	call	4022700 <usleep>
	}
 40205b4:	003f3706 	br	4020294 <__alt_data_end+0xfffe0e94>

040205b8 <__fixunsdfsi>:
 40205b8:	defffd04 	addi	sp,sp,-12
 40205bc:	000d883a 	mov	r6,zero
 40205c0:	01d07834 	movhi	r7,16864
 40205c4:	dc400115 	stw	r17,4(sp)
 40205c8:	dc000015 	stw	r16,0(sp)
 40205cc:	dfc00215 	stw	ra,8(sp)
 40205d0:	2023883a 	mov	r17,r4
 40205d4:	2821883a 	mov	r16,r5
 40205d8:	4020ffc0 	call	4020ffc <__gedf2>
 40205dc:	1000080e 	bge	r2,zero,4020600 <__fixunsdfsi+0x48>
 40205e0:	8809883a 	mov	r4,r17
 40205e4:	800b883a 	mov	r5,r16
 40205e8:	40222400 	call	4022240 <__fixdfsi>
 40205ec:	dfc00217 	ldw	ra,8(sp)
 40205f0:	dc400117 	ldw	r17,4(sp)
 40205f4:	dc000017 	ldw	r16,0(sp)
 40205f8:	dec00304 	addi	sp,sp,12
 40205fc:	f800283a 	ret
 4020600:	000d883a 	mov	r6,zero
 4020604:	01d07834 	movhi	r7,16864
 4020608:	8809883a 	mov	r4,r17
 402060c:	800b883a 	mov	r5,r16
 4020610:	40219440 	call	4021944 <__subdf3>
 4020614:	180b883a 	mov	r5,r3
 4020618:	1009883a 	mov	r4,r2
 402061c:	40222400 	call	4022240 <__fixdfsi>
 4020620:	00e00034 	movhi	r3,32768
 4020624:	10c5883a 	add	r2,r2,r3
 4020628:	003ff006 	br	40205ec <__alt_data_end+0xfffe11ec>

0402062c <__divdf3>:
 402062c:	defff004 	addi	sp,sp,-64
 4020630:	dc800815 	stw	r18,32(sp)
 4020634:	2824d53a 	srli	r18,r5,20
 4020638:	dd800c15 	stw	r22,48(sp)
 402063c:	282cd7fa 	srli	r22,r5,31
 4020640:	dc000615 	stw	r16,24(sp)
 4020644:	04000434 	movhi	r16,16
 4020648:	843fffc4 	addi	r16,r16,-1
 402064c:	dfc00f15 	stw	ra,60(sp)
 4020650:	df000e15 	stw	fp,56(sp)
 4020654:	ddc00d15 	stw	r23,52(sp)
 4020658:	dd400b15 	stw	r21,44(sp)
 402065c:	dd000a15 	stw	r20,40(sp)
 4020660:	dcc00915 	stw	r19,36(sp)
 4020664:	dc400715 	stw	r17,28(sp)
 4020668:	9481ffcc 	andi	r18,r18,2047
 402066c:	2c20703a 	and	r16,r5,r16
 4020670:	b2003fcc 	andi	r8,r22,255
 4020674:	90006126 	beq	r18,zero,40207fc <__divdf3+0x1d0>
 4020678:	0081ffc4 	movi	r2,2047
 402067c:	202b883a 	mov	r21,r4
 4020680:	90803726 	beq	r18,r2,4020760 <__divdf3+0x134>
 4020684:	80800434 	orhi	r2,r16,16
 4020688:	100490fa 	slli	r2,r2,3
 402068c:	2020d77a 	srli	r16,r4,29
 4020690:	202a90fa 	slli	r21,r4,3
 4020694:	94bf0044 	addi	r18,r18,-1023
 4020698:	80a0b03a 	or	r16,r16,r2
 402069c:	0013883a 	mov	r9,zero
 40206a0:	000b883a 	mov	r5,zero
 40206a4:	3806d53a 	srli	r3,r7,20
 40206a8:	382ed7fa 	srli	r23,r7,31
 40206ac:	04400434 	movhi	r17,16
 40206b0:	8c7fffc4 	addi	r17,r17,-1
 40206b4:	18c1ffcc 	andi	r3,r3,2047
 40206b8:	3029883a 	mov	r20,r6
 40206bc:	3c62703a 	and	r17,r7,r17
 40206c0:	bf003fcc 	andi	fp,r23,255
 40206c4:	18006e26 	beq	r3,zero,4020880 <__divdf3+0x254>
 40206c8:	0081ffc4 	movi	r2,2047
 40206cc:	18806626 	beq	r3,r2,4020868 <__divdf3+0x23c>
 40206d0:	88800434 	orhi	r2,r17,16
 40206d4:	100490fa 	slli	r2,r2,3
 40206d8:	3022d77a 	srli	r17,r6,29
 40206dc:	302890fa 	slli	r20,r6,3
 40206e0:	18ff0044 	addi	r3,r3,-1023
 40206e4:	88a2b03a 	or	r17,r17,r2
 40206e8:	000f883a 	mov	r7,zero
 40206ec:	b5e6f03a 	xor	r19,r22,r23
 40206f0:	3a4cb03a 	or	r6,r7,r9
 40206f4:	008003c4 	movi	r2,15
 40206f8:	9809883a 	mov	r4,r19
 40206fc:	90c7c83a 	sub	r3,r18,r3
 4020700:	9cc03fcc 	andi	r19,r19,255
 4020704:	11809636 	bltu	r2,r6,4020960 <__divdf3+0x334>
 4020708:	300c90ba 	slli	r6,r6,2
 402070c:	008100b4 	movhi	r2,1026
 4020710:	1081c804 	addi	r2,r2,1824
 4020714:	308d883a 	add	r6,r6,r2
 4020718:	30800017 	ldw	r2,0(r6)
 402071c:	1000683a 	jmp	r2
 4020720:	04020960 	cmpeqi	r16,zero,2085
 4020724:	04020798 	cmpnei	r16,zero,2078
 4020728:	04020950 	cmplti	r16,zero,2085
 402072c:	0402078c 	andi	r16,zero,2078
 4020730:	04020950 	cmplti	r16,zero,2085
 4020734:	04020924 	muli	r16,zero,2084
 4020738:	04020950 	cmplti	r16,zero,2085
 402073c:	0402078c 	andi	r16,zero,2078
 4020740:	04020798 	cmpnei	r16,zero,2078
 4020744:	04020798 	cmpnei	r16,zero,2078
 4020748:	04020924 	muli	r16,zero,2084
 402074c:	0402078c 	andi	r16,zero,2078
 4020750:	0402077c 	xorhi	r16,zero,2077
 4020754:	0402077c 	xorhi	r16,zero,2077
 4020758:	0402077c 	xorhi	r16,zero,2077
 402075c:	04020ce8 	cmpgeui	r16,zero,2099
 4020760:	2404b03a 	or	r2,r4,r16
 4020764:	10006c1e 	bne	r2,zero,4020918 <__divdf3+0x2ec>
 4020768:	02400204 	movi	r9,8
 402076c:	0021883a 	mov	r16,zero
 4020770:	002b883a 	mov	r21,zero
 4020774:	01400084 	movi	r5,2
 4020778:	003fca06 	br	40206a4 <__alt_data_end+0xfffe12a4>
 402077c:	8023883a 	mov	r17,r16
 4020780:	a829883a 	mov	r20,r21
 4020784:	4039883a 	mov	fp,r8
 4020788:	280f883a 	mov	r7,r5
 402078c:	00800084 	movi	r2,2
 4020790:	3881601e 	bne	r7,r2,4020d14 <__divdf3+0x6e8>
 4020794:	e027883a 	mov	r19,fp
 4020798:	9900004c 	andi	r4,r19,1
 402079c:	0081ffc4 	movi	r2,2047
 40207a0:	0021883a 	mov	r16,zero
 40207a4:	002b883a 	mov	r21,zero
 40207a8:	1004953a 	slli	r2,r2,20
 40207ac:	20c03fcc 	andi	r3,r4,255
 40207b0:	01400434 	movhi	r5,16
 40207b4:	297fffc4 	addi	r5,r5,-1
 40207b8:	180697fa 	slli	r3,r3,31
 40207bc:	8160703a 	and	r16,r16,r5
 40207c0:	80a0b03a 	or	r16,r16,r2
 40207c4:	80c6b03a 	or	r3,r16,r3
 40207c8:	a805883a 	mov	r2,r21
 40207cc:	dfc00f17 	ldw	ra,60(sp)
 40207d0:	df000e17 	ldw	fp,56(sp)
 40207d4:	ddc00d17 	ldw	r23,52(sp)
 40207d8:	dd800c17 	ldw	r22,48(sp)
 40207dc:	dd400b17 	ldw	r21,44(sp)
 40207e0:	dd000a17 	ldw	r20,40(sp)
 40207e4:	dcc00917 	ldw	r19,36(sp)
 40207e8:	dc800817 	ldw	r18,32(sp)
 40207ec:	dc400717 	ldw	r17,28(sp)
 40207f0:	dc000617 	ldw	r16,24(sp)
 40207f4:	dec01004 	addi	sp,sp,64
 40207f8:	f800283a 	ret
 40207fc:	2404b03a 	or	r2,r4,r16
 4020800:	2023883a 	mov	r17,r4
 4020804:	10003f26 	beq	r2,zero,4020904 <__divdf3+0x2d8>
 4020808:	80015e26 	beq	r16,zero,4020d84 <__divdf3+0x758>
 402080c:	8009883a 	mov	r4,r16
 4020810:	d9800215 	stw	r6,8(sp)
 4020814:	d9c00515 	stw	r7,20(sp)
 4020818:	da000415 	stw	r8,16(sp)
 402081c:	40223680 	call	4022368 <__clzsi2>
 4020820:	d9800217 	ldw	r6,8(sp)
 4020824:	d9c00517 	ldw	r7,20(sp)
 4020828:	da000417 	ldw	r8,16(sp)
 402082c:	113ffd44 	addi	r4,r2,-11
 4020830:	00c00704 	movi	r3,28
 4020834:	19014f16 	blt	r3,r4,4020d74 <__divdf3+0x748>
 4020838:	00c00744 	movi	r3,29
 402083c:	157ffe04 	addi	r21,r2,-8
 4020840:	1907c83a 	sub	r3,r3,r4
 4020844:	8560983a 	sll	r16,r16,r21
 4020848:	88c6d83a 	srl	r3,r17,r3
 402084c:	8d6a983a 	sll	r21,r17,r21
 4020850:	1c20b03a 	or	r16,r3,r16
 4020854:	1080fcc4 	addi	r2,r2,1011
 4020858:	00a5c83a 	sub	r18,zero,r2
 402085c:	0013883a 	mov	r9,zero
 4020860:	000b883a 	mov	r5,zero
 4020864:	003f8f06 	br	40206a4 <__alt_data_end+0xfffe12a4>
 4020868:	3444b03a 	or	r2,r6,r17
 402086c:	1000231e 	bne	r2,zero,40208fc <__divdf3+0x2d0>
 4020870:	0023883a 	mov	r17,zero
 4020874:	0029883a 	mov	r20,zero
 4020878:	01c00084 	movi	r7,2
 402087c:	003f9b06 	br	40206ec <__alt_data_end+0xfffe12ec>
 4020880:	3444b03a 	or	r2,r6,r17
 4020884:	10001926 	beq	r2,zero,40208ec <__divdf3+0x2c0>
 4020888:	88014b26 	beq	r17,zero,4020db8 <__divdf3+0x78c>
 402088c:	8809883a 	mov	r4,r17
 4020890:	d9400115 	stw	r5,4(sp)
 4020894:	d9800215 	stw	r6,8(sp)
 4020898:	da000415 	stw	r8,16(sp)
 402089c:	da400315 	stw	r9,12(sp)
 40208a0:	40223680 	call	4022368 <__clzsi2>
 40208a4:	d9400117 	ldw	r5,4(sp)
 40208a8:	d9800217 	ldw	r6,8(sp)
 40208ac:	da000417 	ldw	r8,16(sp)
 40208b0:	da400317 	ldw	r9,12(sp)
 40208b4:	113ffd44 	addi	r4,r2,-11
 40208b8:	00c00704 	movi	r3,28
 40208bc:	19013a16 	blt	r3,r4,4020da8 <__divdf3+0x77c>
 40208c0:	00c00744 	movi	r3,29
 40208c4:	153ffe04 	addi	r20,r2,-8
 40208c8:	1907c83a 	sub	r3,r3,r4
 40208cc:	8d22983a 	sll	r17,r17,r20
 40208d0:	30c6d83a 	srl	r3,r6,r3
 40208d4:	3528983a 	sll	r20,r6,r20
 40208d8:	1c62b03a 	or	r17,r3,r17
 40208dc:	1080fcc4 	addi	r2,r2,1011
 40208e0:	0087c83a 	sub	r3,zero,r2
 40208e4:	000f883a 	mov	r7,zero
 40208e8:	003f8006 	br	40206ec <__alt_data_end+0xfffe12ec>
 40208ec:	0023883a 	mov	r17,zero
 40208f0:	0029883a 	mov	r20,zero
 40208f4:	01c00044 	movi	r7,1
 40208f8:	003f7c06 	br	40206ec <__alt_data_end+0xfffe12ec>
 40208fc:	01c000c4 	movi	r7,3
 4020900:	003f7a06 	br	40206ec <__alt_data_end+0xfffe12ec>
 4020904:	02400104 	movi	r9,4
 4020908:	0021883a 	mov	r16,zero
 402090c:	002b883a 	mov	r21,zero
 4020910:	01400044 	movi	r5,1
 4020914:	003f6306 	br	40206a4 <__alt_data_end+0xfffe12a4>
 4020918:	02400304 	movi	r9,12
 402091c:	014000c4 	movi	r5,3
 4020920:	003f6006 	br	40206a4 <__alt_data_end+0xfffe12a4>
 4020924:	04000434 	movhi	r16,16
 4020928:	0009883a 	mov	r4,zero
 402092c:	843fffc4 	addi	r16,r16,-1
 4020930:	057fffc4 	movi	r21,-1
 4020934:	0081ffc4 	movi	r2,2047
 4020938:	003f9b06 	br	40207a8 <__alt_data_end+0xfffe13a8>
 402093c:	00c00044 	movi	r3,1
 4020940:	1887c83a 	sub	r3,r3,r2
 4020944:	01000e04 	movi	r4,56
 4020948:	20c1530e 	bge	r4,r3,4020e98 <__divdf3+0x86c>
 402094c:	9900004c 	andi	r4,r19,1
 4020950:	0005883a 	mov	r2,zero
 4020954:	0021883a 	mov	r16,zero
 4020958:	002b883a 	mov	r21,zero
 402095c:	003f9206 	br	40207a8 <__alt_data_end+0xfffe13a8>
 4020960:	8c012e36 	bltu	r17,r16,4020e1c <__divdf3+0x7f0>
 4020964:	84412c26 	beq	r16,r17,4020e18 <__divdf3+0x7ec>
 4020968:	a82f883a 	mov	r23,r21
 402096c:	18ffffc4 	addi	r3,r3,-1
 4020970:	002b883a 	mov	r21,zero
 4020974:	a004d63a 	srli	r2,r20,24
 4020978:	8822923a 	slli	r17,r17,8
 402097c:	a028923a 	slli	r20,r20,8
 4020980:	8009883a 	mov	r4,r16
 4020984:	88acb03a 	or	r22,r17,r2
 4020988:	dd000015 	stw	r20,0(sp)
 402098c:	b028d43a 	srli	r20,r22,16
 4020990:	d8c00215 	stw	r3,8(sp)
 4020994:	b4bfffcc 	andi	r18,r22,65535
 4020998:	a00b883a 	mov	r5,r20
 402099c:	40224c40 	call	40224c4 <__udivsi3>
 40209a0:	100b883a 	mov	r5,r2
 40209a4:	9009883a 	mov	r4,r18
 40209a8:	1023883a 	mov	r17,r2
 40209ac:	40225800 	call	4022580 <__mulsi3>
 40209b0:	8009883a 	mov	r4,r16
 40209b4:	a00b883a 	mov	r5,r20
 40209b8:	1039883a 	mov	fp,r2
 40209bc:	40225280 	call	4022528 <__umodsi3>
 40209c0:	1004943a 	slli	r2,r2,16
 40209c4:	b808d43a 	srli	r4,r23,16
 40209c8:	d8c00217 	ldw	r3,8(sp)
 40209cc:	2084b03a 	or	r2,r4,r2
 40209d0:	1700062e 	bgeu	r2,fp,40209ec <__divdf3+0x3c0>
 40209d4:	1585883a 	add	r2,r2,r22
 40209d8:	893fffc4 	addi	r4,r17,-1
 40209dc:	15811d36 	bltu	r2,r22,4020e54 <__divdf3+0x828>
 40209e0:	17011c2e 	bgeu	r2,fp,4020e54 <__divdf3+0x828>
 40209e4:	8c7fff84 	addi	r17,r17,-2
 40209e8:	1585883a 	add	r2,r2,r22
 40209ec:	1739c83a 	sub	fp,r2,fp
 40209f0:	a00b883a 	mov	r5,r20
 40209f4:	e009883a 	mov	r4,fp
 40209f8:	d8c00215 	stw	r3,8(sp)
 40209fc:	40224c40 	call	40224c4 <__udivsi3>
 4020a00:	100b883a 	mov	r5,r2
 4020a04:	9009883a 	mov	r4,r18
 4020a08:	1021883a 	mov	r16,r2
 4020a0c:	40225800 	call	4022580 <__mulsi3>
 4020a10:	a00b883a 	mov	r5,r20
 4020a14:	e009883a 	mov	r4,fp
 4020a18:	d8800415 	stw	r2,16(sp)
 4020a1c:	40225280 	call	4022528 <__umodsi3>
 4020a20:	1004943a 	slli	r2,r2,16
 4020a24:	da000417 	ldw	r8,16(sp)
 4020a28:	bdffffcc 	andi	r23,r23,65535
 4020a2c:	b884b03a 	or	r2,r23,r2
 4020a30:	d8c00217 	ldw	r3,8(sp)
 4020a34:	1200062e 	bgeu	r2,r8,4020a50 <__divdf3+0x424>
 4020a38:	1585883a 	add	r2,r2,r22
 4020a3c:	813fffc4 	addi	r4,r16,-1
 4020a40:	15810236 	bltu	r2,r22,4020e4c <__divdf3+0x820>
 4020a44:	1201012e 	bgeu	r2,r8,4020e4c <__divdf3+0x820>
 4020a48:	843fff84 	addi	r16,r16,-2
 4020a4c:	1585883a 	add	r2,r2,r22
 4020a50:	8822943a 	slli	r17,r17,16
 4020a54:	d9800017 	ldw	r6,0(sp)
 4020a58:	1211c83a 	sub	r8,r2,r8
 4020a5c:	8c22b03a 	or	r17,r17,r16
 4020a60:	373fffcc 	andi	fp,r6,65535
 4020a64:	8abfffcc 	andi	r10,r17,65535
 4020a68:	8820d43a 	srli	r16,r17,16
 4020a6c:	5009883a 	mov	r4,r10
 4020a70:	e00b883a 	mov	r5,fp
 4020a74:	302ed43a 	srli	r23,r6,16
 4020a78:	d8c00215 	stw	r3,8(sp)
 4020a7c:	da000415 	stw	r8,16(sp)
 4020a80:	da800115 	stw	r10,4(sp)
 4020a84:	40225800 	call	4022580 <__mulsi3>
 4020a88:	800b883a 	mov	r5,r16
 4020a8c:	e009883a 	mov	r4,fp
 4020a90:	d8800515 	stw	r2,20(sp)
 4020a94:	40225800 	call	4022580 <__mulsi3>
 4020a98:	8009883a 	mov	r4,r16
 4020a9c:	b80b883a 	mov	r5,r23
 4020aa0:	d8800315 	stw	r2,12(sp)
 4020aa4:	40225800 	call	4022580 <__mulsi3>
 4020aa8:	da800117 	ldw	r10,4(sp)
 4020aac:	b80b883a 	mov	r5,r23
 4020ab0:	1021883a 	mov	r16,r2
 4020ab4:	5009883a 	mov	r4,r10
 4020ab8:	40225800 	call	4022580 <__mulsi3>
 4020abc:	d9c00517 	ldw	r7,20(sp)
 4020ac0:	da400317 	ldw	r9,12(sp)
 4020ac4:	d8c00217 	ldw	r3,8(sp)
 4020ac8:	3808d43a 	srli	r4,r7,16
 4020acc:	1245883a 	add	r2,r2,r9
 4020ad0:	da000417 	ldw	r8,16(sp)
 4020ad4:	2085883a 	add	r2,r4,r2
 4020ad8:	1240022e 	bgeu	r2,r9,4020ae4 <__divdf3+0x4b8>
 4020adc:	01000074 	movhi	r4,1
 4020ae0:	8121883a 	add	r16,r16,r4
 4020ae4:	1008d43a 	srli	r4,r2,16
 4020ae8:	1004943a 	slli	r2,r2,16
 4020aec:	39ffffcc 	andi	r7,r7,65535
 4020af0:	2409883a 	add	r4,r4,r16
 4020af4:	11c5883a 	add	r2,r2,r7
 4020af8:	4100bb36 	bltu	r8,r4,4020de8 <__divdf3+0x7bc>
 4020afc:	4100d726 	beq	r8,r4,4020e5c <__divdf3+0x830>
 4020b00:	4109c83a 	sub	r4,r8,r4
 4020b04:	a8a1c83a 	sub	r16,r21,r2
 4020b08:	ac2b803a 	cmpltu	r21,r21,r16
 4020b0c:	256bc83a 	sub	r21,r4,r21
 4020b10:	b540d926 	beq	r22,r21,4020e78 <__divdf3+0x84c>
 4020b14:	a00b883a 	mov	r5,r20
 4020b18:	a809883a 	mov	r4,r21
 4020b1c:	d8c00215 	stw	r3,8(sp)
 4020b20:	40224c40 	call	40224c4 <__udivsi3>
 4020b24:	100b883a 	mov	r5,r2
 4020b28:	9009883a 	mov	r4,r18
 4020b2c:	d8800515 	stw	r2,20(sp)
 4020b30:	40225800 	call	4022580 <__mulsi3>
 4020b34:	a809883a 	mov	r4,r21
 4020b38:	a00b883a 	mov	r5,r20
 4020b3c:	d8800415 	stw	r2,16(sp)
 4020b40:	40225280 	call	4022528 <__umodsi3>
 4020b44:	1004943a 	slli	r2,r2,16
 4020b48:	8008d43a 	srli	r4,r16,16
 4020b4c:	da000417 	ldw	r8,16(sp)
 4020b50:	d8c00217 	ldw	r3,8(sp)
 4020b54:	2084b03a 	or	r2,r4,r2
 4020b58:	d9c00517 	ldw	r7,20(sp)
 4020b5c:	1200062e 	bgeu	r2,r8,4020b78 <__divdf3+0x54c>
 4020b60:	1585883a 	add	r2,r2,r22
 4020b64:	393fffc4 	addi	r4,r7,-1
 4020b68:	1580c536 	bltu	r2,r22,4020e80 <__divdf3+0x854>
 4020b6c:	1200c42e 	bgeu	r2,r8,4020e80 <__divdf3+0x854>
 4020b70:	39ffff84 	addi	r7,r7,-2
 4020b74:	1585883a 	add	r2,r2,r22
 4020b78:	122bc83a 	sub	r21,r2,r8
 4020b7c:	a00b883a 	mov	r5,r20
 4020b80:	a809883a 	mov	r4,r21
 4020b84:	d8c00215 	stw	r3,8(sp)
 4020b88:	d9c00515 	stw	r7,20(sp)
 4020b8c:	40224c40 	call	40224c4 <__udivsi3>
 4020b90:	9009883a 	mov	r4,r18
 4020b94:	100b883a 	mov	r5,r2
 4020b98:	d8800415 	stw	r2,16(sp)
 4020b9c:	40225800 	call	4022580 <__mulsi3>
 4020ba0:	a809883a 	mov	r4,r21
 4020ba4:	a00b883a 	mov	r5,r20
 4020ba8:	1025883a 	mov	r18,r2
 4020bac:	40225280 	call	4022528 <__umodsi3>
 4020bb0:	1004943a 	slli	r2,r2,16
 4020bb4:	813fffcc 	andi	r4,r16,65535
 4020bb8:	d8c00217 	ldw	r3,8(sp)
 4020bbc:	20a0b03a 	or	r16,r4,r2
 4020bc0:	d9c00517 	ldw	r7,20(sp)
 4020bc4:	da000417 	ldw	r8,16(sp)
 4020bc8:	8480062e 	bgeu	r16,r18,4020be4 <__divdf3+0x5b8>
 4020bcc:	85a1883a 	add	r16,r16,r22
 4020bd0:	40bfffc4 	addi	r2,r8,-1
 4020bd4:	8580ac36 	bltu	r16,r22,4020e88 <__divdf3+0x85c>
 4020bd8:	8480ab2e 	bgeu	r16,r18,4020e88 <__divdf3+0x85c>
 4020bdc:	423fff84 	addi	r8,r8,-2
 4020be0:	85a1883a 	add	r16,r16,r22
 4020be4:	3804943a 	slli	r2,r7,16
 4020be8:	84a1c83a 	sub	r16,r16,r18
 4020bec:	e009883a 	mov	r4,fp
 4020bf0:	1228b03a 	or	r20,r2,r8
 4020bf4:	a1ffffcc 	andi	r7,r20,65535
 4020bf8:	a024d43a 	srli	r18,r20,16
 4020bfc:	380b883a 	mov	r5,r7
 4020c00:	d8c00215 	stw	r3,8(sp)
 4020c04:	d9c00515 	stw	r7,20(sp)
 4020c08:	40225800 	call	4022580 <__mulsi3>
 4020c0c:	900b883a 	mov	r5,r18
 4020c10:	e009883a 	mov	r4,fp
 4020c14:	102b883a 	mov	r21,r2
 4020c18:	40225800 	call	4022580 <__mulsi3>
 4020c1c:	900b883a 	mov	r5,r18
 4020c20:	b809883a 	mov	r4,r23
 4020c24:	1039883a 	mov	fp,r2
 4020c28:	40225800 	call	4022580 <__mulsi3>
 4020c2c:	d9c00517 	ldw	r7,20(sp)
 4020c30:	b80b883a 	mov	r5,r23
 4020c34:	1025883a 	mov	r18,r2
 4020c38:	3809883a 	mov	r4,r7
 4020c3c:	40225800 	call	4022580 <__mulsi3>
 4020c40:	a808d43a 	srli	r4,r21,16
 4020c44:	1705883a 	add	r2,r2,fp
 4020c48:	d8c00217 	ldw	r3,8(sp)
 4020c4c:	2085883a 	add	r2,r4,r2
 4020c50:	1700022e 	bgeu	r2,fp,4020c5c <__divdf3+0x630>
 4020c54:	01000074 	movhi	r4,1
 4020c58:	9125883a 	add	r18,r18,r4
 4020c5c:	1008d43a 	srli	r4,r2,16
 4020c60:	1004943a 	slli	r2,r2,16
 4020c64:	ad7fffcc 	andi	r21,r21,65535
 4020c68:	2489883a 	add	r4,r4,r18
 4020c6c:	1545883a 	add	r2,r2,r21
 4020c70:	81003836 	bltu	r16,r4,4020d54 <__divdf3+0x728>
 4020c74:	81003626 	beq	r16,r4,4020d50 <__divdf3+0x724>
 4020c78:	a5000054 	ori	r20,r20,1
 4020c7c:	1880ffc4 	addi	r2,r3,1023
 4020c80:	00bf2e0e 	bge	zero,r2,402093c <__alt_data_end+0xfffe153c>
 4020c84:	a10001cc 	andi	r4,r20,7
 4020c88:	20000726 	beq	r4,zero,4020ca8 <__divdf3+0x67c>
 4020c8c:	a10003cc 	andi	r4,r20,15
 4020c90:	01400104 	movi	r5,4
 4020c94:	21400426 	beq	r4,r5,4020ca8 <__divdf3+0x67c>
 4020c98:	a149883a 	add	r4,r20,r5
 4020c9c:	2529803a 	cmpltu	r20,r4,r20
 4020ca0:	8d23883a 	add	r17,r17,r20
 4020ca4:	2029883a 	mov	r20,r4
 4020ca8:	8900402c 	andhi	r4,r17,256
 4020cac:	20000426 	beq	r4,zero,4020cc0 <__divdf3+0x694>
 4020cb0:	18810004 	addi	r2,r3,1024
 4020cb4:	00ffc034 	movhi	r3,65280
 4020cb8:	18ffffc4 	addi	r3,r3,-1
 4020cbc:	88e2703a 	and	r17,r17,r3
 4020cc0:	00c1ff84 	movi	r3,2046
 4020cc4:	18beb416 	blt	r3,r2,4020798 <__alt_data_end+0xfffe1398>
 4020cc8:	a028d0fa 	srli	r20,r20,3
 4020ccc:	882a977a 	slli	r21,r17,29
 4020cd0:	8820927a 	slli	r16,r17,9
 4020cd4:	1081ffcc 	andi	r2,r2,2047
 4020cd8:	ad2ab03a 	or	r21,r21,r20
 4020cdc:	8020d33a 	srli	r16,r16,12
 4020ce0:	9900004c 	andi	r4,r19,1
 4020ce4:	003eb006 	br	40207a8 <__alt_data_end+0xfffe13a8>
 4020ce8:	8080022c 	andhi	r2,r16,8
 4020cec:	10001226 	beq	r2,zero,4020d38 <__divdf3+0x70c>
 4020cf0:	8880022c 	andhi	r2,r17,8
 4020cf4:	1000101e 	bne	r2,zero,4020d38 <__divdf3+0x70c>
 4020cf8:	00800434 	movhi	r2,16
 4020cfc:	8c000234 	orhi	r16,r17,8
 4020d00:	10bfffc4 	addi	r2,r2,-1
 4020d04:	b809883a 	mov	r4,r23
 4020d08:	80a0703a 	and	r16,r16,r2
 4020d0c:	a02b883a 	mov	r21,r20
 4020d10:	003f0806 	br	4020934 <__alt_data_end+0xfffe1534>
 4020d14:	008000c4 	movi	r2,3
 4020d18:	3880b126 	beq	r7,r2,4020fe0 <__divdf3+0x9b4>
 4020d1c:	00800044 	movi	r2,1
 4020d20:	38805b1e 	bne	r7,r2,4020e90 <__divdf3+0x864>
 4020d24:	e009883a 	mov	r4,fp
 4020d28:	0005883a 	mov	r2,zero
 4020d2c:	0021883a 	mov	r16,zero
 4020d30:	002b883a 	mov	r21,zero
 4020d34:	003e9c06 	br	40207a8 <__alt_data_end+0xfffe13a8>
 4020d38:	00800434 	movhi	r2,16
 4020d3c:	84000234 	orhi	r16,r16,8
 4020d40:	10bfffc4 	addi	r2,r2,-1
 4020d44:	b009883a 	mov	r4,r22
 4020d48:	80a0703a 	and	r16,r16,r2
 4020d4c:	003ef906 	br	4020934 <__alt_data_end+0xfffe1534>
 4020d50:	103fca26 	beq	r2,zero,4020c7c <__alt_data_end+0xfffe187c>
 4020d54:	b421883a 	add	r16,r22,r16
 4020d58:	a17fffc4 	addi	r5,r20,-1
 4020d5c:	8580422e 	bgeu	r16,r22,4020e68 <__divdf3+0x83c>
 4020d60:	2829883a 	mov	r20,r5
 4020d64:	813fc41e 	bne	r16,r4,4020c78 <__alt_data_end+0xfffe1878>
 4020d68:	d9800017 	ldw	r6,0(sp)
 4020d6c:	30bfc21e 	bne	r6,r2,4020c78 <__alt_data_end+0xfffe1878>
 4020d70:	003fc206 	br	4020c7c <__alt_data_end+0xfffe187c>
 4020d74:	143ff604 	addi	r16,r2,-40
 4020d78:	8c20983a 	sll	r16,r17,r16
 4020d7c:	002b883a 	mov	r21,zero
 4020d80:	003eb406 	br	4020854 <__alt_data_end+0xfffe1454>
 4020d84:	d9800215 	stw	r6,8(sp)
 4020d88:	d9c00515 	stw	r7,20(sp)
 4020d8c:	da000415 	stw	r8,16(sp)
 4020d90:	40223680 	call	4022368 <__clzsi2>
 4020d94:	10800804 	addi	r2,r2,32
 4020d98:	da000417 	ldw	r8,16(sp)
 4020d9c:	d9c00517 	ldw	r7,20(sp)
 4020da0:	d9800217 	ldw	r6,8(sp)
 4020da4:	003ea106 	br	402082c <__alt_data_end+0xfffe142c>
 4020da8:	147ff604 	addi	r17,r2,-40
 4020dac:	3462983a 	sll	r17,r6,r17
 4020db0:	0029883a 	mov	r20,zero
 4020db4:	003ec906 	br	40208dc <__alt_data_end+0xfffe14dc>
 4020db8:	3009883a 	mov	r4,r6
 4020dbc:	d9400115 	stw	r5,4(sp)
 4020dc0:	d9800215 	stw	r6,8(sp)
 4020dc4:	da000415 	stw	r8,16(sp)
 4020dc8:	da400315 	stw	r9,12(sp)
 4020dcc:	40223680 	call	4022368 <__clzsi2>
 4020dd0:	10800804 	addi	r2,r2,32
 4020dd4:	da400317 	ldw	r9,12(sp)
 4020dd8:	da000417 	ldw	r8,16(sp)
 4020ddc:	d9800217 	ldw	r6,8(sp)
 4020de0:	d9400117 	ldw	r5,4(sp)
 4020de4:	003eb306 	br	40208b4 <__alt_data_end+0xfffe14b4>
 4020de8:	d9800017 	ldw	r6,0(sp)
 4020dec:	a9ab883a 	add	r21,r21,r6
 4020df0:	a98b803a 	cmpltu	r5,r21,r6
 4020df4:	2d8b883a 	add	r5,r5,r22
 4020df8:	2a11883a 	add	r8,r5,r8
 4020dfc:	897fffc4 	addi	r5,r17,-1
 4020e00:	b2000c2e 	bgeu	r22,r8,4020e34 <__divdf3+0x808>
 4020e04:	41003f36 	bltu	r8,r4,4020f04 <__divdf3+0x8d8>
 4020e08:	22006c26 	beq	r4,r8,4020fbc <__divdf3+0x990>
 4020e0c:	4109c83a 	sub	r4,r8,r4
 4020e10:	2823883a 	mov	r17,r5
 4020e14:	003f3b06 	br	4020b04 <__alt_data_end+0xfffe1704>
 4020e18:	ad3ed336 	bltu	r21,r20,4020968 <__alt_data_end+0xfffe1568>
 4020e1c:	a804d07a 	srli	r2,r21,1
 4020e20:	802e97fa 	slli	r23,r16,31
 4020e24:	a82a97fa 	slli	r21,r21,31
 4020e28:	8020d07a 	srli	r16,r16,1
 4020e2c:	b8aeb03a 	or	r23,r23,r2
 4020e30:	003ed006 	br	4020974 <__alt_data_end+0xfffe1574>
 4020e34:	b23ff51e 	bne	r22,r8,4020e0c <__alt_data_end+0xfffe1a0c>
 4020e38:	d9800017 	ldw	r6,0(sp)
 4020e3c:	a9bff12e 	bgeu	r21,r6,4020e04 <__alt_data_end+0xfffe1a04>
 4020e40:	b109c83a 	sub	r4,r22,r4
 4020e44:	2823883a 	mov	r17,r5
 4020e48:	003f2e06 	br	4020b04 <__alt_data_end+0xfffe1704>
 4020e4c:	2021883a 	mov	r16,r4
 4020e50:	003eff06 	br	4020a50 <__alt_data_end+0xfffe1650>
 4020e54:	2023883a 	mov	r17,r4
 4020e58:	003ee406 	br	40209ec <__alt_data_end+0xfffe15ec>
 4020e5c:	a8bfe236 	bltu	r21,r2,4020de8 <__alt_data_end+0xfffe19e8>
 4020e60:	0009883a 	mov	r4,zero
 4020e64:	003f2706 	br	4020b04 <__alt_data_end+0xfffe1704>
 4020e68:	81002d36 	bltu	r16,r4,4020f20 <__divdf3+0x8f4>
 4020e6c:	24005626 	beq	r4,r16,4020fc8 <__divdf3+0x99c>
 4020e70:	2829883a 	mov	r20,r5
 4020e74:	003f8006 	br	4020c78 <__alt_data_end+0xfffe1878>
 4020e78:	053fffc4 	movi	r20,-1
 4020e7c:	003f7f06 	br	4020c7c <__alt_data_end+0xfffe187c>
 4020e80:	200f883a 	mov	r7,r4
 4020e84:	003f3c06 	br	4020b78 <__alt_data_end+0xfffe1778>
 4020e88:	1011883a 	mov	r8,r2
 4020e8c:	003f5506 	br	4020be4 <__alt_data_end+0xfffe17e4>
 4020e90:	e027883a 	mov	r19,fp
 4020e94:	003f7906 	br	4020c7c <__alt_data_end+0xfffe187c>
 4020e98:	010007c4 	movi	r4,31
 4020e9c:	20c02816 	blt	r4,r3,4020f40 <__divdf3+0x914>
 4020ea0:	00800804 	movi	r2,32
 4020ea4:	10c5c83a 	sub	r2,r2,r3
 4020ea8:	888a983a 	sll	r5,r17,r2
 4020eac:	a0c8d83a 	srl	r4,r20,r3
 4020eb0:	a084983a 	sll	r2,r20,r2
 4020eb4:	88e2d83a 	srl	r17,r17,r3
 4020eb8:	2906b03a 	or	r3,r5,r4
 4020ebc:	1004c03a 	cmpne	r2,r2,zero
 4020ec0:	1886b03a 	or	r3,r3,r2
 4020ec4:	188001cc 	andi	r2,r3,7
 4020ec8:	10000726 	beq	r2,zero,4020ee8 <__divdf3+0x8bc>
 4020ecc:	188003cc 	andi	r2,r3,15
 4020ed0:	01000104 	movi	r4,4
 4020ed4:	11000426 	beq	r2,r4,4020ee8 <__divdf3+0x8bc>
 4020ed8:	1805883a 	mov	r2,r3
 4020edc:	10c00104 	addi	r3,r2,4
 4020ee0:	1885803a 	cmpltu	r2,r3,r2
 4020ee4:	88a3883a 	add	r17,r17,r2
 4020ee8:	8880202c 	andhi	r2,r17,128
 4020eec:	10002926 	beq	r2,zero,4020f94 <__divdf3+0x968>
 4020ef0:	9900004c 	andi	r4,r19,1
 4020ef4:	00800044 	movi	r2,1
 4020ef8:	0021883a 	mov	r16,zero
 4020efc:	002b883a 	mov	r21,zero
 4020f00:	003e2906 	br	40207a8 <__alt_data_end+0xfffe13a8>
 4020f04:	d9800017 	ldw	r6,0(sp)
 4020f08:	8c7fff84 	addi	r17,r17,-2
 4020f0c:	a9ab883a 	add	r21,r21,r6
 4020f10:	a98b803a 	cmpltu	r5,r21,r6
 4020f14:	2d8b883a 	add	r5,r5,r22
 4020f18:	2a11883a 	add	r8,r5,r8
 4020f1c:	003ef806 	br	4020b00 <__alt_data_end+0xfffe1700>
 4020f20:	d9800017 	ldw	r6,0(sp)
 4020f24:	318f883a 	add	r7,r6,r6
 4020f28:	398b803a 	cmpltu	r5,r7,r6
 4020f2c:	2d8d883a 	add	r6,r5,r22
 4020f30:	81a1883a 	add	r16,r16,r6
 4020f34:	a17fff84 	addi	r5,r20,-2
 4020f38:	d9c00015 	stw	r7,0(sp)
 4020f3c:	003f8806 	br	4020d60 <__alt_data_end+0xfffe1960>
 4020f40:	013ff844 	movi	r4,-31
 4020f44:	2085c83a 	sub	r2,r4,r2
 4020f48:	8888d83a 	srl	r4,r17,r2
 4020f4c:	00800804 	movi	r2,32
 4020f50:	18802126 	beq	r3,r2,4020fd8 <__divdf3+0x9ac>
 4020f54:	04001004 	movi	r16,64
 4020f58:	80c7c83a 	sub	r3,r16,r3
 4020f5c:	88e0983a 	sll	r16,r17,r3
 4020f60:	8504b03a 	or	r2,r16,r20
 4020f64:	1004c03a 	cmpne	r2,r2,zero
 4020f68:	2084b03a 	or	r2,r4,r2
 4020f6c:	144001cc 	andi	r17,r2,7
 4020f70:	88000d1e 	bne	r17,zero,4020fa8 <__divdf3+0x97c>
 4020f74:	0021883a 	mov	r16,zero
 4020f78:	102ad0fa 	srli	r21,r2,3
 4020f7c:	9900004c 	andi	r4,r19,1
 4020f80:	0005883a 	mov	r2,zero
 4020f84:	ac6ab03a 	or	r21,r21,r17
 4020f88:	003e0706 	br	40207a8 <__alt_data_end+0xfffe13a8>
 4020f8c:	1007883a 	mov	r3,r2
 4020f90:	0023883a 	mov	r17,zero
 4020f94:	8820927a 	slli	r16,r17,9
 4020f98:	1805883a 	mov	r2,r3
 4020f9c:	8822977a 	slli	r17,r17,29
 4020fa0:	8020d33a 	srli	r16,r16,12
 4020fa4:	003ff406 	br	4020f78 <__alt_data_end+0xfffe1b78>
 4020fa8:	10c003cc 	andi	r3,r2,15
 4020fac:	01000104 	movi	r4,4
 4020fb0:	193ff626 	beq	r3,r4,4020f8c <__alt_data_end+0xfffe1b8c>
 4020fb4:	0023883a 	mov	r17,zero
 4020fb8:	003fc806 	br	4020edc <__alt_data_end+0xfffe1adc>
 4020fbc:	a8bfd136 	bltu	r21,r2,4020f04 <__alt_data_end+0xfffe1b04>
 4020fc0:	2823883a 	mov	r17,r5
 4020fc4:	003fa606 	br	4020e60 <__alt_data_end+0xfffe1a60>
 4020fc8:	d9800017 	ldw	r6,0(sp)
 4020fcc:	30bfd436 	bltu	r6,r2,4020f20 <__alt_data_end+0xfffe1b20>
 4020fd0:	2829883a 	mov	r20,r5
 4020fd4:	003f6406 	br	4020d68 <__alt_data_end+0xfffe1968>
 4020fd8:	0021883a 	mov	r16,zero
 4020fdc:	003fe006 	br	4020f60 <__alt_data_end+0xfffe1b60>
 4020fe0:	00800434 	movhi	r2,16
 4020fe4:	8c000234 	orhi	r16,r17,8
 4020fe8:	10bfffc4 	addi	r2,r2,-1
 4020fec:	e009883a 	mov	r4,fp
 4020ff0:	80a0703a 	and	r16,r16,r2
 4020ff4:	a02b883a 	mov	r21,r20
 4020ff8:	003e4e06 	br	4020934 <__alt_data_end+0xfffe1534>

04020ffc <__gedf2>:
 4020ffc:	2804d53a 	srli	r2,r5,20
 4021000:	3806d53a 	srli	r3,r7,20
 4021004:	02000434 	movhi	r8,16
 4021008:	423fffc4 	addi	r8,r8,-1
 402100c:	1081ffcc 	andi	r2,r2,2047
 4021010:	0241ffc4 	movi	r9,2047
 4021014:	2a14703a 	and	r10,r5,r8
 4021018:	18c1ffcc 	andi	r3,r3,2047
 402101c:	3a10703a 	and	r8,r7,r8
 4021020:	280ad7fa 	srli	r5,r5,31
 4021024:	380ed7fa 	srli	r7,r7,31
 4021028:	12401d26 	beq	r2,r9,40210a0 <__gedf2+0xa4>
 402102c:	0241ffc4 	movi	r9,2047
 4021030:	1a401226 	beq	r3,r9,402107c <__gedf2+0x80>
 4021034:	1000081e 	bne	r2,zero,4021058 <__gedf2+0x5c>
 4021038:	2296b03a 	or	r11,r4,r10
 402103c:	5813003a 	cmpeq	r9,r11,zero
 4021040:	1800091e 	bne	r3,zero,4021068 <__gedf2+0x6c>
 4021044:	3218b03a 	or	r12,r6,r8
 4021048:	6000071e 	bne	r12,zero,4021068 <__gedf2+0x6c>
 402104c:	0005883a 	mov	r2,zero
 4021050:	5800101e 	bne	r11,zero,4021094 <__gedf2+0x98>
 4021054:	f800283a 	ret
 4021058:	18000c1e 	bne	r3,zero,402108c <__gedf2+0x90>
 402105c:	3212b03a 	or	r9,r6,r8
 4021060:	48000c26 	beq	r9,zero,4021094 <__gedf2+0x98>
 4021064:	0013883a 	mov	r9,zero
 4021068:	39c03fcc 	andi	r7,r7,255
 402106c:	48000826 	beq	r9,zero,4021090 <__gedf2+0x94>
 4021070:	38000926 	beq	r7,zero,4021098 <__gedf2+0x9c>
 4021074:	00800044 	movi	r2,1
 4021078:	f800283a 	ret
 402107c:	3212b03a 	or	r9,r6,r8
 4021080:	483fec26 	beq	r9,zero,4021034 <__alt_data_end+0xfffe1c34>
 4021084:	00bfff84 	movi	r2,-2
 4021088:	f800283a 	ret
 402108c:	39c03fcc 	andi	r7,r7,255
 4021090:	29c00626 	beq	r5,r7,40210ac <__gedf2+0xb0>
 4021094:	283ff726 	beq	r5,zero,4021074 <__alt_data_end+0xfffe1c74>
 4021098:	00bfffc4 	movi	r2,-1
 402109c:	f800283a 	ret
 40210a0:	2292b03a 	or	r9,r4,r10
 40210a4:	483fe126 	beq	r9,zero,402102c <__alt_data_end+0xfffe1c2c>
 40210a8:	003ff606 	br	4021084 <__alt_data_end+0xfffe1c84>
 40210ac:	18bff916 	blt	r3,r2,4021094 <__alt_data_end+0xfffe1c94>
 40210b0:	10c00316 	blt	r2,r3,40210c0 <__gedf2+0xc4>
 40210b4:	42bff736 	bltu	r8,r10,4021094 <__alt_data_end+0xfffe1c94>
 40210b8:	52000326 	beq	r10,r8,40210c8 <__gedf2+0xcc>
 40210bc:	5200042e 	bgeu	r10,r8,40210d0 <__gedf2+0xd4>
 40210c0:	283fec1e 	bne	r5,zero,4021074 <__alt_data_end+0xfffe1c74>
 40210c4:	003ff406 	br	4021098 <__alt_data_end+0xfffe1c98>
 40210c8:	313ff236 	bltu	r6,r4,4021094 <__alt_data_end+0xfffe1c94>
 40210cc:	21bffc36 	bltu	r4,r6,40210c0 <__alt_data_end+0xfffe1cc0>
 40210d0:	0005883a 	mov	r2,zero
 40210d4:	f800283a 	ret

040210d8 <__muldf3>:
 40210d8:	deffee04 	addi	sp,sp,-72
 40210dc:	dd000c15 	stw	r20,48(sp)
 40210e0:	2828d53a 	srli	r20,r5,20
 40210e4:	ddc00f15 	stw	r23,60(sp)
 40210e8:	282ed7fa 	srli	r23,r5,31
 40210ec:	dc000815 	stw	r16,32(sp)
 40210f0:	04000434 	movhi	r16,16
 40210f4:	dcc00b15 	stw	r19,44(sp)
 40210f8:	843fffc4 	addi	r16,r16,-1
 40210fc:	dfc01115 	stw	ra,68(sp)
 4021100:	df001015 	stw	fp,64(sp)
 4021104:	dd800e15 	stw	r22,56(sp)
 4021108:	dd400d15 	stw	r21,52(sp)
 402110c:	dc800a15 	stw	r18,40(sp)
 4021110:	dc400915 	stw	r17,36(sp)
 4021114:	a501ffcc 	andi	r20,r20,2047
 4021118:	2c20703a 	and	r16,r5,r16
 402111c:	b827883a 	mov	r19,r23
 4021120:	ba403fcc 	andi	r9,r23,255
 4021124:	a0006026 	beq	r20,zero,40212a8 <__muldf3+0x1d0>
 4021128:	0081ffc4 	movi	r2,2047
 402112c:	202d883a 	mov	r22,r4
 4021130:	a0803626 	beq	r20,r2,402120c <__muldf3+0x134>
 4021134:	84000434 	orhi	r16,r16,16
 4021138:	200ad77a 	srli	r5,r4,29
 402113c:	800490fa 	slli	r2,r16,3
 4021140:	202c90fa 	slli	r22,r4,3
 4021144:	a53f0044 	addi	r20,r20,-1023
 4021148:	28a0b03a 	or	r16,r5,r2
 402114c:	002b883a 	mov	r21,zero
 4021150:	000b883a 	mov	r5,zero
 4021154:	3804d53a 	srli	r2,r7,20
 4021158:	3838d7fa 	srli	fp,r7,31
 402115c:	04400434 	movhi	r17,16
 4021160:	8c7fffc4 	addi	r17,r17,-1
 4021164:	1081ffcc 	andi	r2,r2,2047
 4021168:	3025883a 	mov	r18,r6
 402116c:	3c62703a 	and	r17,r7,r17
 4021170:	e2803fcc 	andi	r10,fp,255
 4021174:	10006d26 	beq	r2,zero,402132c <__muldf3+0x254>
 4021178:	00c1ffc4 	movi	r3,2047
 402117c:	10c06526 	beq	r2,r3,4021314 <__muldf3+0x23c>
 4021180:	8c400434 	orhi	r17,r17,16
 4021184:	300ed77a 	srli	r7,r6,29
 4021188:	880690fa 	slli	r3,r17,3
 402118c:	302490fa 	slli	r18,r6,3
 4021190:	10bf0044 	addi	r2,r2,-1023
 4021194:	38e2b03a 	or	r17,r7,r3
 4021198:	000f883a 	mov	r7,zero
 402119c:	a087883a 	add	r3,r20,r2
 40211a0:	010003c4 	movi	r4,15
 40211a4:	3d44b03a 	or	r2,r7,r21
 40211a8:	e5ccf03a 	xor	r6,fp,r23
 40211ac:	1a000044 	addi	r8,r3,1
 40211b0:	20809b36 	bltu	r4,r2,4021420 <__muldf3+0x348>
 40211b4:	100490ba 	slli	r2,r2,2
 40211b8:	010100b4 	movhi	r4,1026
 40211bc:	21047304 	addi	r4,r4,4556
 40211c0:	1105883a 	add	r2,r2,r4
 40211c4:	10800017 	ldw	r2,0(r2)
 40211c8:	1000683a 	jmp	r2
 40211cc:	04021420 	cmpeqi	r16,zero,2128
 40211d0:	0402122c 	andhi	r16,zero,2120
 40211d4:	0402122c 	andhi	r16,zero,2120
 40211d8:	04021228 	cmpgeui	r16,zero,2120
 40211dc:	040213fc 	xorhi	r16,zero,2127
 40211e0:	040213fc 	xorhi	r16,zero,2127
 40211e4:	040213e4 	muli	r16,zero,2127
 40211e8:	04021228 	cmpgeui	r16,zero,2120
 40211ec:	040213fc 	xorhi	r16,zero,2127
 40211f0:	040213e4 	muli	r16,zero,2127
 40211f4:	040213fc 	xorhi	r16,zero,2127
 40211f8:	04021228 	cmpgeui	r16,zero,2120
 40211fc:	0402140c 	andi	r16,zero,2128
 4021200:	0402140c 	andi	r16,zero,2128
 4021204:	0402140c 	andi	r16,zero,2128
 4021208:	0402176c 	andhi	r16,zero,2141
 402120c:	2404b03a 	or	r2,r4,r16
 4021210:	1000711e 	bne	r2,zero,40213d8 <__muldf3+0x300>
 4021214:	05400204 	movi	r21,8
 4021218:	0021883a 	mov	r16,zero
 402121c:	002d883a 	mov	r22,zero
 4021220:	01400084 	movi	r5,2
 4021224:	003fcb06 	br	4021154 <__alt_data_end+0xfffe1d54>
 4021228:	500d883a 	mov	r6,r10
 402122c:	00800084 	movi	r2,2
 4021230:	38805926 	beq	r7,r2,4021398 <__muldf3+0x2c0>
 4021234:	008000c4 	movi	r2,3
 4021238:	3881bb26 	beq	r7,r2,4021928 <__muldf3+0x850>
 402123c:	00800044 	movi	r2,1
 4021240:	3881961e 	bne	r7,r2,402189c <__muldf3+0x7c4>
 4021244:	3027883a 	mov	r19,r6
 4021248:	0005883a 	mov	r2,zero
 402124c:	0021883a 	mov	r16,zero
 4021250:	002d883a 	mov	r22,zero
 4021254:	1004953a 	slli	r2,r2,20
 4021258:	98c03fcc 	andi	r3,r19,255
 402125c:	04400434 	movhi	r17,16
 4021260:	8c7fffc4 	addi	r17,r17,-1
 4021264:	180697fa 	slli	r3,r3,31
 4021268:	8460703a 	and	r16,r16,r17
 402126c:	80a0b03a 	or	r16,r16,r2
 4021270:	80c6b03a 	or	r3,r16,r3
 4021274:	b005883a 	mov	r2,r22
 4021278:	dfc01117 	ldw	ra,68(sp)
 402127c:	df001017 	ldw	fp,64(sp)
 4021280:	ddc00f17 	ldw	r23,60(sp)
 4021284:	dd800e17 	ldw	r22,56(sp)
 4021288:	dd400d17 	ldw	r21,52(sp)
 402128c:	dd000c17 	ldw	r20,48(sp)
 4021290:	dcc00b17 	ldw	r19,44(sp)
 4021294:	dc800a17 	ldw	r18,40(sp)
 4021298:	dc400917 	ldw	r17,36(sp)
 402129c:	dc000817 	ldw	r16,32(sp)
 40212a0:	dec01204 	addi	sp,sp,72
 40212a4:	f800283a 	ret
 40212a8:	2404b03a 	or	r2,r4,r16
 40212ac:	202b883a 	mov	r21,r4
 40212b0:	10004426 	beq	r2,zero,40213c4 <__muldf3+0x2ec>
 40212b4:	80015126 	beq	r16,zero,40217fc <__muldf3+0x724>
 40212b8:	8009883a 	mov	r4,r16
 40212bc:	d9800715 	stw	r6,28(sp)
 40212c0:	d9c00215 	stw	r7,8(sp)
 40212c4:	da400415 	stw	r9,16(sp)
 40212c8:	40223680 	call	4022368 <__clzsi2>
 40212cc:	d9800717 	ldw	r6,28(sp)
 40212d0:	d9c00217 	ldw	r7,8(sp)
 40212d4:	da400417 	ldw	r9,16(sp)
 40212d8:	113ffd44 	addi	r4,r2,-11
 40212dc:	00c00704 	movi	r3,28
 40212e0:	19014216 	blt	r3,r4,40217ec <__muldf3+0x714>
 40212e4:	00c00744 	movi	r3,29
 40212e8:	15bffe04 	addi	r22,r2,-8
 40212ec:	1907c83a 	sub	r3,r3,r4
 40212f0:	85a0983a 	sll	r16,r16,r22
 40212f4:	a8c6d83a 	srl	r3,r21,r3
 40212f8:	adac983a 	sll	r22,r21,r22
 40212fc:	1c20b03a 	or	r16,r3,r16
 4021300:	1080fcc4 	addi	r2,r2,1011
 4021304:	00a9c83a 	sub	r20,zero,r2
 4021308:	002b883a 	mov	r21,zero
 402130c:	000b883a 	mov	r5,zero
 4021310:	003f9006 	br	4021154 <__alt_data_end+0xfffe1d54>
 4021314:	3446b03a 	or	r3,r6,r17
 4021318:	1800281e 	bne	r3,zero,40213bc <__muldf3+0x2e4>
 402131c:	0023883a 	mov	r17,zero
 4021320:	0025883a 	mov	r18,zero
 4021324:	01c00084 	movi	r7,2
 4021328:	003f9c06 	br	402119c <__alt_data_end+0xfffe1d9c>
 402132c:	3446b03a 	or	r3,r6,r17
 4021330:	18001e26 	beq	r3,zero,40213ac <__muldf3+0x2d4>
 4021334:	88012126 	beq	r17,zero,40217bc <__muldf3+0x6e4>
 4021338:	8809883a 	mov	r4,r17
 402133c:	d9400215 	stw	r5,8(sp)
 4021340:	d9800715 	stw	r6,28(sp)
 4021344:	da400415 	stw	r9,16(sp)
 4021348:	da800315 	stw	r10,12(sp)
 402134c:	40223680 	call	4022368 <__clzsi2>
 4021350:	d9400217 	ldw	r5,8(sp)
 4021354:	d9800717 	ldw	r6,28(sp)
 4021358:	da400417 	ldw	r9,16(sp)
 402135c:	da800317 	ldw	r10,12(sp)
 4021360:	113ffd44 	addi	r4,r2,-11
 4021364:	00c00704 	movi	r3,28
 4021368:	19011016 	blt	r3,r4,40217ac <__muldf3+0x6d4>
 402136c:	00c00744 	movi	r3,29
 4021370:	14bffe04 	addi	r18,r2,-8
 4021374:	1907c83a 	sub	r3,r3,r4
 4021378:	8ca2983a 	sll	r17,r17,r18
 402137c:	30c6d83a 	srl	r3,r6,r3
 4021380:	34a4983a 	sll	r18,r6,r18
 4021384:	1c62b03a 	or	r17,r3,r17
 4021388:	1080fcc4 	addi	r2,r2,1011
 402138c:	0085c83a 	sub	r2,zero,r2
 4021390:	000f883a 	mov	r7,zero
 4021394:	003f8106 	br	402119c <__alt_data_end+0xfffe1d9c>
 4021398:	3027883a 	mov	r19,r6
 402139c:	0081ffc4 	movi	r2,2047
 40213a0:	0021883a 	mov	r16,zero
 40213a4:	002d883a 	mov	r22,zero
 40213a8:	003faa06 	br	4021254 <__alt_data_end+0xfffe1e54>
 40213ac:	0023883a 	mov	r17,zero
 40213b0:	0025883a 	mov	r18,zero
 40213b4:	01c00044 	movi	r7,1
 40213b8:	003f7806 	br	402119c <__alt_data_end+0xfffe1d9c>
 40213bc:	01c000c4 	movi	r7,3
 40213c0:	003f7606 	br	402119c <__alt_data_end+0xfffe1d9c>
 40213c4:	05400104 	movi	r21,4
 40213c8:	0021883a 	mov	r16,zero
 40213cc:	002d883a 	mov	r22,zero
 40213d0:	01400044 	movi	r5,1
 40213d4:	003f5f06 	br	4021154 <__alt_data_end+0xfffe1d54>
 40213d8:	05400304 	movi	r21,12
 40213dc:	014000c4 	movi	r5,3
 40213e0:	003f5c06 	br	4021154 <__alt_data_end+0xfffe1d54>
 40213e4:	04000434 	movhi	r16,16
 40213e8:	0027883a 	mov	r19,zero
 40213ec:	843fffc4 	addi	r16,r16,-1
 40213f0:	05bfffc4 	movi	r22,-1
 40213f4:	0081ffc4 	movi	r2,2047
 40213f8:	003f9606 	br	4021254 <__alt_data_end+0xfffe1e54>
 40213fc:	8023883a 	mov	r17,r16
 4021400:	b025883a 	mov	r18,r22
 4021404:	280f883a 	mov	r7,r5
 4021408:	003f8806 	br	402122c <__alt_data_end+0xfffe1e2c>
 402140c:	8023883a 	mov	r17,r16
 4021410:	b025883a 	mov	r18,r22
 4021414:	480d883a 	mov	r6,r9
 4021418:	280f883a 	mov	r7,r5
 402141c:	003f8306 	br	402122c <__alt_data_end+0xfffe1e2c>
 4021420:	b026d43a 	srli	r19,r22,16
 4021424:	902ed43a 	srli	r23,r18,16
 4021428:	b5bfffcc 	andi	r22,r22,65535
 402142c:	94bfffcc 	andi	r18,r18,65535
 4021430:	b00b883a 	mov	r5,r22
 4021434:	9009883a 	mov	r4,r18
 4021438:	d8c00515 	stw	r3,20(sp)
 402143c:	d9800715 	stw	r6,28(sp)
 4021440:	da000615 	stw	r8,24(sp)
 4021444:	40225800 	call	4022580 <__mulsi3>
 4021448:	980b883a 	mov	r5,r19
 402144c:	9009883a 	mov	r4,r18
 4021450:	1029883a 	mov	r20,r2
 4021454:	40225800 	call	4022580 <__mulsi3>
 4021458:	b80b883a 	mov	r5,r23
 402145c:	9809883a 	mov	r4,r19
 4021460:	102b883a 	mov	r21,r2
 4021464:	40225800 	call	4022580 <__mulsi3>
 4021468:	b809883a 	mov	r4,r23
 402146c:	b00b883a 	mov	r5,r22
 4021470:	1039883a 	mov	fp,r2
 4021474:	40225800 	call	4022580 <__mulsi3>
 4021478:	a008d43a 	srli	r4,r20,16
 402147c:	1545883a 	add	r2,r2,r21
 4021480:	d8c00517 	ldw	r3,20(sp)
 4021484:	2085883a 	add	r2,r4,r2
 4021488:	d9800717 	ldw	r6,28(sp)
 402148c:	da000617 	ldw	r8,24(sp)
 4021490:	1540022e 	bgeu	r2,r21,402149c <__muldf3+0x3c4>
 4021494:	01000074 	movhi	r4,1
 4021498:	e139883a 	add	fp,fp,r4
 402149c:	100e943a 	slli	r7,r2,16
 40214a0:	1004d43a 	srli	r2,r2,16
 40214a4:	882ad43a 	srli	r21,r17,16
 40214a8:	a53fffcc 	andi	r20,r20,65535
 40214ac:	8c7fffcc 	andi	r17,r17,65535
 40214b0:	3d29883a 	add	r20,r7,r20
 40214b4:	b00b883a 	mov	r5,r22
 40214b8:	8809883a 	mov	r4,r17
 40214bc:	d8c00515 	stw	r3,20(sp)
 40214c0:	d9800715 	stw	r6,28(sp)
 40214c4:	da000615 	stw	r8,24(sp)
 40214c8:	dd000115 	stw	r20,4(sp)
 40214cc:	d8800015 	stw	r2,0(sp)
 40214d0:	40225800 	call	4022580 <__mulsi3>
 40214d4:	980b883a 	mov	r5,r19
 40214d8:	8809883a 	mov	r4,r17
 40214dc:	d8800215 	stw	r2,8(sp)
 40214e0:	40225800 	call	4022580 <__mulsi3>
 40214e4:	9809883a 	mov	r4,r19
 40214e8:	a80b883a 	mov	r5,r21
 40214ec:	1029883a 	mov	r20,r2
 40214f0:	40225800 	call	4022580 <__mulsi3>
 40214f4:	b00b883a 	mov	r5,r22
 40214f8:	a809883a 	mov	r4,r21
 40214fc:	d8800415 	stw	r2,16(sp)
 4021500:	40225800 	call	4022580 <__mulsi3>
 4021504:	d9c00217 	ldw	r7,8(sp)
 4021508:	1505883a 	add	r2,r2,r20
 402150c:	d8c00517 	ldw	r3,20(sp)
 4021510:	3826d43a 	srli	r19,r7,16
 4021514:	d9800717 	ldw	r6,28(sp)
 4021518:	da000617 	ldw	r8,24(sp)
 402151c:	9885883a 	add	r2,r19,r2
 4021520:	da400417 	ldw	r9,16(sp)
 4021524:	1500022e 	bgeu	r2,r20,4021530 <__muldf3+0x458>
 4021528:	01000074 	movhi	r4,1
 402152c:	4913883a 	add	r9,r9,r4
 4021530:	1028d43a 	srli	r20,r2,16
 4021534:	1004943a 	slli	r2,r2,16
 4021538:	802cd43a 	srli	r22,r16,16
 402153c:	843fffcc 	andi	r16,r16,65535
 4021540:	3cffffcc 	andi	r19,r7,65535
 4021544:	9009883a 	mov	r4,r18
 4021548:	800b883a 	mov	r5,r16
 402154c:	a269883a 	add	r20,r20,r9
 4021550:	d8c00515 	stw	r3,20(sp)
 4021554:	d9800715 	stw	r6,28(sp)
 4021558:	da000615 	stw	r8,24(sp)
 402155c:	14e7883a 	add	r19,r2,r19
 4021560:	40225800 	call	4022580 <__mulsi3>
 4021564:	9009883a 	mov	r4,r18
 4021568:	b00b883a 	mov	r5,r22
 402156c:	d8800315 	stw	r2,12(sp)
 4021570:	40225800 	call	4022580 <__mulsi3>
 4021574:	b809883a 	mov	r4,r23
 4021578:	b00b883a 	mov	r5,r22
 402157c:	d8800215 	stw	r2,8(sp)
 4021580:	40225800 	call	4022580 <__mulsi3>
 4021584:	b80b883a 	mov	r5,r23
 4021588:	8009883a 	mov	r4,r16
 402158c:	d8800415 	stw	r2,16(sp)
 4021590:	40225800 	call	4022580 <__mulsi3>
 4021594:	da800317 	ldw	r10,12(sp)
 4021598:	d9c00217 	ldw	r7,8(sp)
 402159c:	d9000017 	ldw	r4,0(sp)
 40215a0:	502ed43a 	srli	r23,r10,16
 40215a4:	11c5883a 	add	r2,r2,r7
 40215a8:	24e5883a 	add	r18,r4,r19
 40215ac:	b885883a 	add	r2,r23,r2
 40215b0:	d8c00517 	ldw	r3,20(sp)
 40215b4:	d9800717 	ldw	r6,28(sp)
 40215b8:	da000617 	ldw	r8,24(sp)
 40215bc:	da400417 	ldw	r9,16(sp)
 40215c0:	11c0022e 	bgeu	r2,r7,40215cc <__muldf3+0x4f4>
 40215c4:	01000074 	movhi	r4,1
 40215c8:	4913883a 	add	r9,r9,r4
 40215cc:	100ed43a 	srli	r7,r2,16
 40215d0:	1004943a 	slli	r2,r2,16
 40215d4:	55ffffcc 	andi	r23,r10,65535
 40215d8:	3a53883a 	add	r9,r7,r9
 40215dc:	8809883a 	mov	r4,r17
 40215e0:	800b883a 	mov	r5,r16
 40215e4:	d8c00515 	stw	r3,20(sp)
 40215e8:	d9800715 	stw	r6,28(sp)
 40215ec:	da000615 	stw	r8,24(sp)
 40215f0:	da400415 	stw	r9,16(sp)
 40215f4:	15ef883a 	add	r23,r2,r23
 40215f8:	40225800 	call	4022580 <__mulsi3>
 40215fc:	8809883a 	mov	r4,r17
 4021600:	b00b883a 	mov	r5,r22
 4021604:	d8800215 	stw	r2,8(sp)
 4021608:	40225800 	call	4022580 <__mulsi3>
 402160c:	b00b883a 	mov	r5,r22
 4021610:	a809883a 	mov	r4,r21
 4021614:	d8800315 	stw	r2,12(sp)
 4021618:	40225800 	call	4022580 <__mulsi3>
 402161c:	8009883a 	mov	r4,r16
 4021620:	a80b883a 	mov	r5,r21
 4021624:	1023883a 	mov	r17,r2
 4021628:	40225800 	call	4022580 <__mulsi3>
 402162c:	d9c00217 	ldw	r7,8(sp)
 4021630:	da800317 	ldw	r10,12(sp)
 4021634:	d8c00517 	ldw	r3,20(sp)
 4021638:	3808d43a 	srli	r4,r7,16
 402163c:	1285883a 	add	r2,r2,r10
 4021640:	d9800717 	ldw	r6,28(sp)
 4021644:	2085883a 	add	r2,r4,r2
 4021648:	da000617 	ldw	r8,24(sp)
 402164c:	da400417 	ldw	r9,16(sp)
 4021650:	1280022e 	bgeu	r2,r10,402165c <__muldf3+0x584>
 4021654:	01000074 	movhi	r4,1
 4021658:	8923883a 	add	r17,r17,r4
 402165c:	1008943a 	slli	r4,r2,16
 4021660:	39ffffcc 	andi	r7,r7,65535
 4021664:	e4b9883a 	add	fp,fp,r18
 4021668:	21cf883a 	add	r7,r4,r7
 402166c:	e4e7803a 	cmpltu	r19,fp,r19
 4021670:	3d0f883a 	add	r7,r7,r20
 4021674:	bf39883a 	add	fp,r23,fp
 4021678:	99c9883a 	add	r4,r19,r7
 402167c:	e5ef803a 	cmpltu	r23,fp,r23
 4021680:	490b883a 	add	r5,r9,r4
 4021684:	1004d43a 	srli	r2,r2,16
 4021688:	b965883a 	add	r18,r23,r5
 402168c:	24c9803a 	cmpltu	r4,r4,r19
 4021690:	3d29803a 	cmpltu	r20,r7,r20
 4021694:	a128b03a 	or	r20,r20,r4
 4021698:	95ef803a 	cmpltu	r23,r18,r23
 402169c:	2a53803a 	cmpltu	r9,r5,r9
 40216a0:	a0a9883a 	add	r20,r20,r2
 40216a4:	4deeb03a 	or	r23,r9,r23
 40216a8:	a5ef883a 	add	r23,r20,r23
 40216ac:	bc63883a 	add	r17,r23,r17
 40216b0:	e004927a 	slli	r2,fp,9
 40216b4:	d9000117 	ldw	r4,4(sp)
 40216b8:	882e927a 	slli	r23,r17,9
 40216bc:	9022d5fa 	srli	r17,r18,23
 40216c0:	e038d5fa 	srli	fp,fp,23
 40216c4:	1104b03a 	or	r2,r2,r4
 40216c8:	9024927a 	slli	r18,r18,9
 40216cc:	1004c03a 	cmpne	r2,r2,zero
 40216d0:	bc62b03a 	or	r17,r23,r17
 40216d4:	1738b03a 	or	fp,r2,fp
 40216d8:	8880402c 	andhi	r2,r17,256
 40216dc:	e4a4b03a 	or	r18,fp,r18
 40216e0:	10000726 	beq	r2,zero,4021700 <__muldf3+0x628>
 40216e4:	9006d07a 	srli	r3,r18,1
 40216e8:	880497fa 	slli	r2,r17,31
 40216ec:	9480004c 	andi	r18,r18,1
 40216f0:	8822d07a 	srli	r17,r17,1
 40216f4:	1ca4b03a 	or	r18,r3,r18
 40216f8:	14a4b03a 	or	r18,r2,r18
 40216fc:	4007883a 	mov	r3,r8
 4021700:	1880ffc4 	addi	r2,r3,1023
 4021704:	0080460e 	bge	zero,r2,4021820 <__muldf3+0x748>
 4021708:	910001cc 	andi	r4,r18,7
 402170c:	20000726 	beq	r4,zero,402172c <__muldf3+0x654>
 4021710:	910003cc 	andi	r4,r18,15
 4021714:	01400104 	movi	r5,4
 4021718:	21400426 	beq	r4,r5,402172c <__muldf3+0x654>
 402171c:	9149883a 	add	r4,r18,r5
 4021720:	24a5803a 	cmpltu	r18,r4,r18
 4021724:	8ca3883a 	add	r17,r17,r18
 4021728:	2025883a 	mov	r18,r4
 402172c:	8900402c 	andhi	r4,r17,256
 4021730:	20000426 	beq	r4,zero,4021744 <__muldf3+0x66c>
 4021734:	18810004 	addi	r2,r3,1024
 4021738:	00ffc034 	movhi	r3,65280
 402173c:	18ffffc4 	addi	r3,r3,-1
 4021740:	88e2703a 	and	r17,r17,r3
 4021744:	00c1ff84 	movi	r3,2046
 4021748:	18bf1316 	blt	r3,r2,4021398 <__alt_data_end+0xfffe1f98>
 402174c:	882c977a 	slli	r22,r17,29
 4021750:	9024d0fa 	srli	r18,r18,3
 4021754:	8822927a 	slli	r17,r17,9
 4021758:	1081ffcc 	andi	r2,r2,2047
 402175c:	b4acb03a 	or	r22,r22,r18
 4021760:	8820d33a 	srli	r16,r17,12
 4021764:	3027883a 	mov	r19,r6
 4021768:	003eba06 	br	4021254 <__alt_data_end+0xfffe1e54>
 402176c:	8080022c 	andhi	r2,r16,8
 4021770:	10000926 	beq	r2,zero,4021798 <__muldf3+0x6c0>
 4021774:	8880022c 	andhi	r2,r17,8
 4021778:	1000071e 	bne	r2,zero,4021798 <__muldf3+0x6c0>
 402177c:	00800434 	movhi	r2,16
 4021780:	8c000234 	orhi	r16,r17,8
 4021784:	10bfffc4 	addi	r2,r2,-1
 4021788:	e027883a 	mov	r19,fp
 402178c:	80a0703a 	and	r16,r16,r2
 4021790:	902d883a 	mov	r22,r18
 4021794:	003f1706 	br	40213f4 <__alt_data_end+0xfffe1ff4>
 4021798:	00800434 	movhi	r2,16
 402179c:	84000234 	orhi	r16,r16,8
 40217a0:	10bfffc4 	addi	r2,r2,-1
 40217a4:	80a0703a 	and	r16,r16,r2
 40217a8:	003f1206 	br	40213f4 <__alt_data_end+0xfffe1ff4>
 40217ac:	147ff604 	addi	r17,r2,-40
 40217b0:	3462983a 	sll	r17,r6,r17
 40217b4:	0025883a 	mov	r18,zero
 40217b8:	003ef306 	br	4021388 <__alt_data_end+0xfffe1f88>
 40217bc:	3009883a 	mov	r4,r6
 40217c0:	d9400215 	stw	r5,8(sp)
 40217c4:	d9800715 	stw	r6,28(sp)
 40217c8:	da400415 	stw	r9,16(sp)
 40217cc:	da800315 	stw	r10,12(sp)
 40217d0:	40223680 	call	4022368 <__clzsi2>
 40217d4:	10800804 	addi	r2,r2,32
 40217d8:	da800317 	ldw	r10,12(sp)
 40217dc:	da400417 	ldw	r9,16(sp)
 40217e0:	d9800717 	ldw	r6,28(sp)
 40217e4:	d9400217 	ldw	r5,8(sp)
 40217e8:	003edd06 	br	4021360 <__alt_data_end+0xfffe1f60>
 40217ec:	143ff604 	addi	r16,r2,-40
 40217f0:	ac20983a 	sll	r16,r21,r16
 40217f4:	002d883a 	mov	r22,zero
 40217f8:	003ec106 	br	4021300 <__alt_data_end+0xfffe1f00>
 40217fc:	d9800715 	stw	r6,28(sp)
 4021800:	d9c00215 	stw	r7,8(sp)
 4021804:	da400415 	stw	r9,16(sp)
 4021808:	40223680 	call	4022368 <__clzsi2>
 402180c:	10800804 	addi	r2,r2,32
 4021810:	da400417 	ldw	r9,16(sp)
 4021814:	d9c00217 	ldw	r7,8(sp)
 4021818:	d9800717 	ldw	r6,28(sp)
 402181c:	003eae06 	br	40212d8 <__alt_data_end+0xfffe1ed8>
 4021820:	00c00044 	movi	r3,1
 4021824:	1887c83a 	sub	r3,r3,r2
 4021828:	01000e04 	movi	r4,56
 402182c:	20fe8516 	blt	r4,r3,4021244 <__alt_data_end+0xfffe1e44>
 4021830:	010007c4 	movi	r4,31
 4021834:	20c01b16 	blt	r4,r3,40218a4 <__muldf3+0x7cc>
 4021838:	00800804 	movi	r2,32
 402183c:	10c5c83a 	sub	r2,r2,r3
 4021840:	888a983a 	sll	r5,r17,r2
 4021844:	90c8d83a 	srl	r4,r18,r3
 4021848:	9084983a 	sll	r2,r18,r2
 402184c:	88e2d83a 	srl	r17,r17,r3
 4021850:	2906b03a 	or	r3,r5,r4
 4021854:	1004c03a 	cmpne	r2,r2,zero
 4021858:	1886b03a 	or	r3,r3,r2
 402185c:	188001cc 	andi	r2,r3,7
 4021860:	10000726 	beq	r2,zero,4021880 <__muldf3+0x7a8>
 4021864:	188003cc 	andi	r2,r3,15
 4021868:	01000104 	movi	r4,4
 402186c:	11000426 	beq	r2,r4,4021880 <__muldf3+0x7a8>
 4021870:	1805883a 	mov	r2,r3
 4021874:	10c00104 	addi	r3,r2,4
 4021878:	1885803a 	cmpltu	r2,r3,r2
 402187c:	88a3883a 	add	r17,r17,r2
 4021880:	8880202c 	andhi	r2,r17,128
 4021884:	10001c26 	beq	r2,zero,40218f8 <__muldf3+0x820>
 4021888:	3027883a 	mov	r19,r6
 402188c:	00800044 	movi	r2,1
 4021890:	0021883a 	mov	r16,zero
 4021894:	002d883a 	mov	r22,zero
 4021898:	003e6e06 	br	4021254 <__alt_data_end+0xfffe1e54>
 402189c:	4007883a 	mov	r3,r8
 40218a0:	003f9706 	br	4021700 <__alt_data_end+0xfffe2300>
 40218a4:	017ff844 	movi	r5,-31
 40218a8:	2885c83a 	sub	r2,r5,r2
 40218ac:	888ad83a 	srl	r5,r17,r2
 40218b0:	00800804 	movi	r2,32
 40218b4:	18801a26 	beq	r3,r2,4021920 <__muldf3+0x848>
 40218b8:	01001004 	movi	r4,64
 40218bc:	20c7c83a 	sub	r3,r4,r3
 40218c0:	88e2983a 	sll	r17,r17,r3
 40218c4:	8ca4b03a 	or	r18,r17,r18
 40218c8:	9004c03a 	cmpne	r2,r18,zero
 40218cc:	2884b03a 	or	r2,r5,r2
 40218d0:	144001cc 	andi	r17,r2,7
 40218d4:	88000d1e 	bne	r17,zero,402190c <__muldf3+0x834>
 40218d8:	0021883a 	mov	r16,zero
 40218dc:	102cd0fa 	srli	r22,r2,3
 40218e0:	3027883a 	mov	r19,r6
 40218e4:	0005883a 	mov	r2,zero
 40218e8:	b46cb03a 	or	r22,r22,r17
 40218ec:	003e5906 	br	4021254 <__alt_data_end+0xfffe1e54>
 40218f0:	1007883a 	mov	r3,r2
 40218f4:	0023883a 	mov	r17,zero
 40218f8:	8820927a 	slli	r16,r17,9
 40218fc:	1805883a 	mov	r2,r3
 4021900:	8822977a 	slli	r17,r17,29
 4021904:	8020d33a 	srli	r16,r16,12
 4021908:	003ff406 	br	40218dc <__alt_data_end+0xfffe24dc>
 402190c:	10c003cc 	andi	r3,r2,15
 4021910:	01000104 	movi	r4,4
 4021914:	193ff626 	beq	r3,r4,40218f0 <__alt_data_end+0xfffe24f0>
 4021918:	0023883a 	mov	r17,zero
 402191c:	003fd506 	br	4021874 <__alt_data_end+0xfffe2474>
 4021920:	0023883a 	mov	r17,zero
 4021924:	003fe706 	br	40218c4 <__alt_data_end+0xfffe24c4>
 4021928:	00800434 	movhi	r2,16
 402192c:	8c000234 	orhi	r16,r17,8
 4021930:	10bfffc4 	addi	r2,r2,-1
 4021934:	3027883a 	mov	r19,r6
 4021938:	80a0703a 	and	r16,r16,r2
 402193c:	902d883a 	mov	r22,r18
 4021940:	003eac06 	br	40213f4 <__alt_data_end+0xfffe1ff4>

04021944 <__subdf3>:
 4021944:	02000434 	movhi	r8,16
 4021948:	423fffc4 	addi	r8,r8,-1
 402194c:	defffb04 	addi	sp,sp,-20
 4021950:	2a14703a 	and	r10,r5,r8
 4021954:	3812d53a 	srli	r9,r7,20
 4021958:	3a10703a 	and	r8,r7,r8
 402195c:	2006d77a 	srli	r3,r4,29
 4021960:	3004d77a 	srli	r2,r6,29
 4021964:	dc000015 	stw	r16,0(sp)
 4021968:	501490fa 	slli	r10,r10,3
 402196c:	2820d53a 	srli	r16,r5,20
 4021970:	401090fa 	slli	r8,r8,3
 4021974:	dc800215 	stw	r18,8(sp)
 4021978:	dc400115 	stw	r17,4(sp)
 402197c:	dfc00415 	stw	ra,16(sp)
 4021980:	202290fa 	slli	r17,r4,3
 4021984:	dcc00315 	stw	r19,12(sp)
 4021988:	4a41ffcc 	andi	r9,r9,2047
 402198c:	0101ffc4 	movi	r4,2047
 4021990:	2824d7fa 	srli	r18,r5,31
 4021994:	8401ffcc 	andi	r16,r16,2047
 4021998:	50c6b03a 	or	r3,r10,r3
 402199c:	380ed7fa 	srli	r7,r7,31
 40219a0:	408ab03a 	or	r5,r8,r2
 40219a4:	300c90fa 	slli	r6,r6,3
 40219a8:	49009626 	beq	r9,r4,4021c04 <__subdf3+0x2c0>
 40219ac:	39c0005c 	xori	r7,r7,1
 40219b0:	8245c83a 	sub	r2,r16,r9
 40219b4:	3c807426 	beq	r7,r18,4021b88 <__subdf3+0x244>
 40219b8:	0080af0e 	bge	zero,r2,4021c78 <__subdf3+0x334>
 40219bc:	48002a1e 	bne	r9,zero,4021a68 <__subdf3+0x124>
 40219c0:	2988b03a 	or	r4,r5,r6
 40219c4:	20009a1e 	bne	r4,zero,4021c30 <__subdf3+0x2ec>
 40219c8:	888001cc 	andi	r2,r17,7
 40219cc:	10000726 	beq	r2,zero,40219ec <__subdf3+0xa8>
 40219d0:	888003cc 	andi	r2,r17,15
 40219d4:	01000104 	movi	r4,4
 40219d8:	11000426 	beq	r2,r4,40219ec <__subdf3+0xa8>
 40219dc:	890b883a 	add	r5,r17,r4
 40219e0:	2c63803a 	cmpltu	r17,r5,r17
 40219e4:	1c47883a 	add	r3,r3,r17
 40219e8:	2823883a 	mov	r17,r5
 40219ec:	1880202c 	andhi	r2,r3,128
 40219f0:	10005926 	beq	r2,zero,4021b58 <__subdf3+0x214>
 40219f4:	84000044 	addi	r16,r16,1
 40219f8:	0081ffc4 	movi	r2,2047
 40219fc:	8080be26 	beq	r16,r2,4021cf8 <__subdf3+0x3b4>
 4021a00:	017fe034 	movhi	r5,65408
 4021a04:	297fffc4 	addi	r5,r5,-1
 4021a08:	1946703a 	and	r3,r3,r5
 4021a0c:	1804977a 	slli	r2,r3,29
 4021a10:	1806927a 	slli	r3,r3,9
 4021a14:	8822d0fa 	srli	r17,r17,3
 4021a18:	8401ffcc 	andi	r16,r16,2047
 4021a1c:	180ad33a 	srli	r5,r3,12
 4021a20:	9100004c 	andi	r4,r18,1
 4021a24:	1444b03a 	or	r2,r2,r17
 4021a28:	80c1ffcc 	andi	r3,r16,2047
 4021a2c:	1820953a 	slli	r16,r3,20
 4021a30:	20c03fcc 	andi	r3,r4,255
 4021a34:	180897fa 	slli	r4,r3,31
 4021a38:	00c00434 	movhi	r3,16
 4021a3c:	18ffffc4 	addi	r3,r3,-1
 4021a40:	28c6703a 	and	r3,r5,r3
 4021a44:	1c06b03a 	or	r3,r3,r16
 4021a48:	1906b03a 	or	r3,r3,r4
 4021a4c:	dfc00417 	ldw	ra,16(sp)
 4021a50:	dcc00317 	ldw	r19,12(sp)
 4021a54:	dc800217 	ldw	r18,8(sp)
 4021a58:	dc400117 	ldw	r17,4(sp)
 4021a5c:	dc000017 	ldw	r16,0(sp)
 4021a60:	dec00504 	addi	sp,sp,20
 4021a64:	f800283a 	ret
 4021a68:	0101ffc4 	movi	r4,2047
 4021a6c:	813fd626 	beq	r16,r4,40219c8 <__alt_data_end+0xfffe25c8>
 4021a70:	29402034 	orhi	r5,r5,128
 4021a74:	01000e04 	movi	r4,56
 4021a78:	2080a316 	blt	r4,r2,4021d08 <__subdf3+0x3c4>
 4021a7c:	010007c4 	movi	r4,31
 4021a80:	2080c616 	blt	r4,r2,4021d9c <__subdf3+0x458>
 4021a84:	01000804 	movi	r4,32
 4021a88:	2089c83a 	sub	r4,r4,r2
 4021a8c:	2910983a 	sll	r8,r5,r4
 4021a90:	308ed83a 	srl	r7,r6,r2
 4021a94:	3108983a 	sll	r4,r6,r4
 4021a98:	2884d83a 	srl	r2,r5,r2
 4021a9c:	41ccb03a 	or	r6,r8,r7
 4021aa0:	2008c03a 	cmpne	r4,r4,zero
 4021aa4:	310cb03a 	or	r6,r6,r4
 4021aa8:	898dc83a 	sub	r6,r17,r6
 4021aac:	89a3803a 	cmpltu	r17,r17,r6
 4021ab0:	1887c83a 	sub	r3,r3,r2
 4021ab4:	1c47c83a 	sub	r3,r3,r17
 4021ab8:	3023883a 	mov	r17,r6
 4021abc:	1880202c 	andhi	r2,r3,128
 4021ac0:	10002326 	beq	r2,zero,4021b50 <__subdf3+0x20c>
 4021ac4:	04c02034 	movhi	r19,128
 4021ac8:	9cffffc4 	addi	r19,r19,-1
 4021acc:	1ce6703a 	and	r19,r3,r19
 4021ad0:	98007a26 	beq	r19,zero,4021cbc <__subdf3+0x378>
 4021ad4:	9809883a 	mov	r4,r19
 4021ad8:	40223680 	call	4022368 <__clzsi2>
 4021adc:	113ffe04 	addi	r4,r2,-8
 4021ae0:	00c007c4 	movi	r3,31
 4021ae4:	19007b16 	blt	r3,r4,4021cd4 <__subdf3+0x390>
 4021ae8:	00800804 	movi	r2,32
 4021aec:	1105c83a 	sub	r2,r2,r4
 4021af0:	8884d83a 	srl	r2,r17,r2
 4021af4:	9906983a 	sll	r3,r19,r4
 4021af8:	8922983a 	sll	r17,r17,r4
 4021afc:	10c4b03a 	or	r2,r2,r3
 4021b00:	24007816 	blt	r4,r16,4021ce4 <__subdf3+0x3a0>
 4021b04:	2421c83a 	sub	r16,r4,r16
 4021b08:	80c00044 	addi	r3,r16,1
 4021b0c:	010007c4 	movi	r4,31
 4021b10:	20c09516 	blt	r4,r3,4021d68 <__subdf3+0x424>
 4021b14:	01400804 	movi	r5,32
 4021b18:	28cbc83a 	sub	r5,r5,r3
 4021b1c:	88c8d83a 	srl	r4,r17,r3
 4021b20:	8962983a 	sll	r17,r17,r5
 4021b24:	114a983a 	sll	r5,r2,r5
 4021b28:	10c6d83a 	srl	r3,r2,r3
 4021b2c:	8804c03a 	cmpne	r2,r17,zero
 4021b30:	290ab03a 	or	r5,r5,r4
 4021b34:	28a2b03a 	or	r17,r5,r2
 4021b38:	0021883a 	mov	r16,zero
 4021b3c:	003fa206 	br	40219c8 <__alt_data_end+0xfffe25c8>
 4021b40:	2090b03a 	or	r8,r4,r2
 4021b44:	40018e26 	beq	r8,zero,4022180 <__subdf3+0x83c>
 4021b48:	1007883a 	mov	r3,r2
 4021b4c:	2023883a 	mov	r17,r4
 4021b50:	888001cc 	andi	r2,r17,7
 4021b54:	103f9e1e 	bne	r2,zero,40219d0 <__alt_data_end+0xfffe25d0>
 4021b58:	1804977a 	slli	r2,r3,29
 4021b5c:	8822d0fa 	srli	r17,r17,3
 4021b60:	1810d0fa 	srli	r8,r3,3
 4021b64:	9100004c 	andi	r4,r18,1
 4021b68:	1444b03a 	or	r2,r2,r17
 4021b6c:	00c1ffc4 	movi	r3,2047
 4021b70:	80c02826 	beq	r16,r3,4021c14 <__subdf3+0x2d0>
 4021b74:	01400434 	movhi	r5,16
 4021b78:	297fffc4 	addi	r5,r5,-1
 4021b7c:	80e0703a 	and	r16,r16,r3
 4021b80:	414a703a 	and	r5,r8,r5
 4021b84:	003fa806 	br	4021a28 <__alt_data_end+0xfffe2628>
 4021b88:	0080630e 	bge	zero,r2,4021d18 <__subdf3+0x3d4>
 4021b8c:	48003026 	beq	r9,zero,4021c50 <__subdf3+0x30c>
 4021b90:	0101ffc4 	movi	r4,2047
 4021b94:	813f8c26 	beq	r16,r4,40219c8 <__alt_data_end+0xfffe25c8>
 4021b98:	29402034 	orhi	r5,r5,128
 4021b9c:	01000e04 	movi	r4,56
 4021ba0:	2080a90e 	bge	r4,r2,4021e48 <__subdf3+0x504>
 4021ba4:	298cb03a 	or	r6,r5,r6
 4021ba8:	3012c03a 	cmpne	r9,r6,zero
 4021bac:	0005883a 	mov	r2,zero
 4021bb0:	4c53883a 	add	r9,r9,r17
 4021bb4:	4c63803a 	cmpltu	r17,r9,r17
 4021bb8:	10c7883a 	add	r3,r2,r3
 4021bbc:	88c7883a 	add	r3,r17,r3
 4021bc0:	4823883a 	mov	r17,r9
 4021bc4:	1880202c 	andhi	r2,r3,128
 4021bc8:	1000d026 	beq	r2,zero,4021f0c <__subdf3+0x5c8>
 4021bcc:	84000044 	addi	r16,r16,1
 4021bd0:	0081ffc4 	movi	r2,2047
 4021bd4:	8080fe26 	beq	r16,r2,4021fd0 <__subdf3+0x68c>
 4021bd8:	00bfe034 	movhi	r2,65408
 4021bdc:	10bfffc4 	addi	r2,r2,-1
 4021be0:	1886703a 	and	r3,r3,r2
 4021be4:	880ad07a 	srli	r5,r17,1
 4021be8:	180497fa 	slli	r2,r3,31
 4021bec:	8900004c 	andi	r4,r17,1
 4021bf0:	2922b03a 	or	r17,r5,r4
 4021bf4:	1806d07a 	srli	r3,r3,1
 4021bf8:	1462b03a 	or	r17,r2,r17
 4021bfc:	3825883a 	mov	r18,r7
 4021c00:	003f7106 	br	40219c8 <__alt_data_end+0xfffe25c8>
 4021c04:	2984b03a 	or	r2,r5,r6
 4021c08:	103f6826 	beq	r2,zero,40219ac <__alt_data_end+0xfffe25ac>
 4021c0c:	39c03fcc 	andi	r7,r7,255
 4021c10:	003f6706 	br	40219b0 <__alt_data_end+0xfffe25b0>
 4021c14:	4086b03a 	or	r3,r8,r2
 4021c18:	18015226 	beq	r3,zero,4022164 <__subdf3+0x820>
 4021c1c:	00c00434 	movhi	r3,16
 4021c20:	41400234 	orhi	r5,r8,8
 4021c24:	18ffffc4 	addi	r3,r3,-1
 4021c28:	28ca703a 	and	r5,r5,r3
 4021c2c:	003f7e06 	br	4021a28 <__alt_data_end+0xfffe2628>
 4021c30:	10bfffc4 	addi	r2,r2,-1
 4021c34:	1000491e 	bne	r2,zero,4021d5c <__subdf3+0x418>
 4021c38:	898fc83a 	sub	r7,r17,r6
 4021c3c:	89e3803a 	cmpltu	r17,r17,r7
 4021c40:	1947c83a 	sub	r3,r3,r5
 4021c44:	1c47c83a 	sub	r3,r3,r17
 4021c48:	3823883a 	mov	r17,r7
 4021c4c:	003f9b06 	br	4021abc <__alt_data_end+0xfffe26bc>
 4021c50:	2988b03a 	or	r4,r5,r6
 4021c54:	203f5c26 	beq	r4,zero,40219c8 <__alt_data_end+0xfffe25c8>
 4021c58:	10bfffc4 	addi	r2,r2,-1
 4021c5c:	1000931e 	bne	r2,zero,4021eac <__subdf3+0x568>
 4021c60:	898d883a 	add	r6,r17,r6
 4021c64:	3463803a 	cmpltu	r17,r6,r17
 4021c68:	1947883a 	add	r3,r3,r5
 4021c6c:	88c7883a 	add	r3,r17,r3
 4021c70:	3023883a 	mov	r17,r6
 4021c74:	003fd306 	br	4021bc4 <__alt_data_end+0xfffe27c4>
 4021c78:	1000541e 	bne	r2,zero,4021dcc <__subdf3+0x488>
 4021c7c:	80800044 	addi	r2,r16,1
 4021c80:	1081ffcc 	andi	r2,r2,2047
 4021c84:	01000044 	movi	r4,1
 4021c88:	2080a20e 	bge	r4,r2,4021f14 <__subdf3+0x5d0>
 4021c8c:	8989c83a 	sub	r4,r17,r6
 4021c90:	8905803a 	cmpltu	r2,r17,r4
 4021c94:	1967c83a 	sub	r19,r3,r5
 4021c98:	98a7c83a 	sub	r19,r19,r2
 4021c9c:	9880202c 	andhi	r2,r19,128
 4021ca0:	10006326 	beq	r2,zero,4021e30 <__subdf3+0x4ec>
 4021ca4:	3463c83a 	sub	r17,r6,r17
 4021ca8:	28c7c83a 	sub	r3,r5,r3
 4021cac:	344d803a 	cmpltu	r6,r6,r17
 4021cb0:	19a7c83a 	sub	r19,r3,r6
 4021cb4:	3825883a 	mov	r18,r7
 4021cb8:	983f861e 	bne	r19,zero,4021ad4 <__alt_data_end+0xfffe26d4>
 4021cbc:	8809883a 	mov	r4,r17
 4021cc0:	40223680 	call	4022368 <__clzsi2>
 4021cc4:	10800804 	addi	r2,r2,32
 4021cc8:	113ffe04 	addi	r4,r2,-8
 4021ccc:	00c007c4 	movi	r3,31
 4021cd0:	193f850e 	bge	r3,r4,4021ae8 <__alt_data_end+0xfffe26e8>
 4021cd4:	10bff604 	addi	r2,r2,-40
 4021cd8:	8884983a 	sll	r2,r17,r2
 4021cdc:	0023883a 	mov	r17,zero
 4021ce0:	243f880e 	bge	r4,r16,4021b04 <__alt_data_end+0xfffe2704>
 4021ce4:	00ffe034 	movhi	r3,65408
 4021ce8:	18ffffc4 	addi	r3,r3,-1
 4021cec:	8121c83a 	sub	r16,r16,r4
 4021cf0:	10c6703a 	and	r3,r2,r3
 4021cf4:	003f3406 	br	40219c8 <__alt_data_end+0xfffe25c8>
 4021cf8:	9100004c 	andi	r4,r18,1
 4021cfc:	000b883a 	mov	r5,zero
 4021d00:	0005883a 	mov	r2,zero
 4021d04:	003f4806 	br	4021a28 <__alt_data_end+0xfffe2628>
 4021d08:	298cb03a 	or	r6,r5,r6
 4021d0c:	300cc03a 	cmpne	r6,r6,zero
 4021d10:	0005883a 	mov	r2,zero
 4021d14:	003f6406 	br	4021aa8 <__alt_data_end+0xfffe26a8>
 4021d18:	10009a1e 	bne	r2,zero,4021f84 <__subdf3+0x640>
 4021d1c:	82400044 	addi	r9,r16,1
 4021d20:	4881ffcc 	andi	r2,r9,2047
 4021d24:	02800044 	movi	r10,1
 4021d28:	5080670e 	bge	r10,r2,4021ec8 <__subdf3+0x584>
 4021d2c:	0081ffc4 	movi	r2,2047
 4021d30:	4880af26 	beq	r9,r2,4021ff0 <__subdf3+0x6ac>
 4021d34:	898d883a 	add	r6,r17,r6
 4021d38:	1945883a 	add	r2,r3,r5
 4021d3c:	3447803a 	cmpltu	r3,r6,r17
 4021d40:	1887883a 	add	r3,r3,r2
 4021d44:	182297fa 	slli	r17,r3,31
 4021d48:	300cd07a 	srli	r6,r6,1
 4021d4c:	1806d07a 	srli	r3,r3,1
 4021d50:	4821883a 	mov	r16,r9
 4021d54:	89a2b03a 	or	r17,r17,r6
 4021d58:	003f1b06 	br	40219c8 <__alt_data_end+0xfffe25c8>
 4021d5c:	0101ffc4 	movi	r4,2047
 4021d60:	813f441e 	bne	r16,r4,4021a74 <__alt_data_end+0xfffe2674>
 4021d64:	003f1806 	br	40219c8 <__alt_data_end+0xfffe25c8>
 4021d68:	843ff844 	addi	r16,r16,-31
 4021d6c:	01400804 	movi	r5,32
 4021d70:	1408d83a 	srl	r4,r2,r16
 4021d74:	19405026 	beq	r3,r5,4021eb8 <__subdf3+0x574>
 4021d78:	01401004 	movi	r5,64
 4021d7c:	28c7c83a 	sub	r3,r5,r3
 4021d80:	10c4983a 	sll	r2,r2,r3
 4021d84:	88a2b03a 	or	r17,r17,r2
 4021d88:	8822c03a 	cmpne	r17,r17,zero
 4021d8c:	2462b03a 	or	r17,r4,r17
 4021d90:	0007883a 	mov	r3,zero
 4021d94:	0021883a 	mov	r16,zero
 4021d98:	003f6d06 	br	4021b50 <__alt_data_end+0xfffe2750>
 4021d9c:	11fff804 	addi	r7,r2,-32
 4021da0:	01000804 	movi	r4,32
 4021da4:	29ced83a 	srl	r7,r5,r7
 4021da8:	11004526 	beq	r2,r4,4021ec0 <__subdf3+0x57c>
 4021dac:	01001004 	movi	r4,64
 4021db0:	2089c83a 	sub	r4,r4,r2
 4021db4:	2904983a 	sll	r2,r5,r4
 4021db8:	118cb03a 	or	r6,r2,r6
 4021dbc:	300cc03a 	cmpne	r6,r6,zero
 4021dc0:	398cb03a 	or	r6,r7,r6
 4021dc4:	0005883a 	mov	r2,zero
 4021dc8:	003f3706 	br	4021aa8 <__alt_data_end+0xfffe26a8>
 4021dcc:	80002a26 	beq	r16,zero,4021e78 <__subdf3+0x534>
 4021dd0:	0101ffc4 	movi	r4,2047
 4021dd4:	49006626 	beq	r9,r4,4021f70 <__subdf3+0x62c>
 4021dd8:	0085c83a 	sub	r2,zero,r2
 4021ddc:	18c02034 	orhi	r3,r3,128
 4021de0:	01000e04 	movi	r4,56
 4021de4:	20807e16 	blt	r4,r2,4021fe0 <__subdf3+0x69c>
 4021de8:	010007c4 	movi	r4,31
 4021dec:	2080e716 	blt	r4,r2,402218c <__subdf3+0x848>
 4021df0:	01000804 	movi	r4,32
 4021df4:	2089c83a 	sub	r4,r4,r2
 4021df8:	1914983a 	sll	r10,r3,r4
 4021dfc:	8890d83a 	srl	r8,r17,r2
 4021e00:	8908983a 	sll	r4,r17,r4
 4021e04:	1884d83a 	srl	r2,r3,r2
 4021e08:	5222b03a 	or	r17,r10,r8
 4021e0c:	2006c03a 	cmpne	r3,r4,zero
 4021e10:	88e2b03a 	or	r17,r17,r3
 4021e14:	3463c83a 	sub	r17,r6,r17
 4021e18:	2885c83a 	sub	r2,r5,r2
 4021e1c:	344d803a 	cmpltu	r6,r6,r17
 4021e20:	1187c83a 	sub	r3,r2,r6
 4021e24:	4821883a 	mov	r16,r9
 4021e28:	3825883a 	mov	r18,r7
 4021e2c:	003f2306 	br	4021abc <__alt_data_end+0xfffe26bc>
 4021e30:	24d0b03a 	or	r8,r4,r19
 4021e34:	40001b1e 	bne	r8,zero,4021ea4 <__subdf3+0x560>
 4021e38:	0005883a 	mov	r2,zero
 4021e3c:	0009883a 	mov	r4,zero
 4021e40:	0021883a 	mov	r16,zero
 4021e44:	003f4906 	br	4021b6c <__alt_data_end+0xfffe276c>
 4021e48:	010007c4 	movi	r4,31
 4021e4c:	20803a16 	blt	r4,r2,4021f38 <__subdf3+0x5f4>
 4021e50:	01000804 	movi	r4,32
 4021e54:	2089c83a 	sub	r4,r4,r2
 4021e58:	2912983a 	sll	r9,r5,r4
 4021e5c:	3090d83a 	srl	r8,r6,r2
 4021e60:	3108983a 	sll	r4,r6,r4
 4021e64:	2884d83a 	srl	r2,r5,r2
 4021e68:	4a12b03a 	or	r9,r9,r8
 4021e6c:	2008c03a 	cmpne	r4,r4,zero
 4021e70:	4912b03a 	or	r9,r9,r4
 4021e74:	003f4e06 	br	4021bb0 <__alt_data_end+0xfffe27b0>
 4021e78:	1c48b03a 	or	r4,r3,r17
 4021e7c:	20003c26 	beq	r4,zero,4021f70 <__subdf3+0x62c>
 4021e80:	0084303a 	nor	r2,zero,r2
 4021e84:	1000381e 	bne	r2,zero,4021f68 <__subdf3+0x624>
 4021e88:	3463c83a 	sub	r17,r6,r17
 4021e8c:	28c5c83a 	sub	r2,r5,r3
 4021e90:	344d803a 	cmpltu	r6,r6,r17
 4021e94:	1187c83a 	sub	r3,r2,r6
 4021e98:	4821883a 	mov	r16,r9
 4021e9c:	3825883a 	mov	r18,r7
 4021ea0:	003f0606 	br	4021abc <__alt_data_end+0xfffe26bc>
 4021ea4:	2023883a 	mov	r17,r4
 4021ea8:	003f0906 	br	4021ad0 <__alt_data_end+0xfffe26d0>
 4021eac:	0101ffc4 	movi	r4,2047
 4021eb0:	813f3a1e 	bne	r16,r4,4021b9c <__alt_data_end+0xfffe279c>
 4021eb4:	003ec406 	br	40219c8 <__alt_data_end+0xfffe25c8>
 4021eb8:	0005883a 	mov	r2,zero
 4021ebc:	003fb106 	br	4021d84 <__alt_data_end+0xfffe2984>
 4021ec0:	0005883a 	mov	r2,zero
 4021ec4:	003fbc06 	br	4021db8 <__alt_data_end+0xfffe29b8>
 4021ec8:	1c44b03a 	or	r2,r3,r17
 4021ecc:	80008e1e 	bne	r16,zero,4022108 <__subdf3+0x7c4>
 4021ed0:	1000c826 	beq	r2,zero,40221f4 <__subdf3+0x8b0>
 4021ed4:	2984b03a 	or	r2,r5,r6
 4021ed8:	103ebb26 	beq	r2,zero,40219c8 <__alt_data_end+0xfffe25c8>
 4021edc:	8989883a 	add	r4,r17,r6
 4021ee0:	1945883a 	add	r2,r3,r5
 4021ee4:	2447803a 	cmpltu	r3,r4,r17
 4021ee8:	1887883a 	add	r3,r3,r2
 4021eec:	1880202c 	andhi	r2,r3,128
 4021ef0:	2023883a 	mov	r17,r4
 4021ef4:	103f1626 	beq	r2,zero,4021b50 <__alt_data_end+0xfffe2750>
 4021ef8:	00bfe034 	movhi	r2,65408
 4021efc:	10bfffc4 	addi	r2,r2,-1
 4021f00:	5021883a 	mov	r16,r10
 4021f04:	1886703a 	and	r3,r3,r2
 4021f08:	003eaf06 	br	40219c8 <__alt_data_end+0xfffe25c8>
 4021f0c:	3825883a 	mov	r18,r7
 4021f10:	003f0f06 	br	4021b50 <__alt_data_end+0xfffe2750>
 4021f14:	1c44b03a 	or	r2,r3,r17
 4021f18:	8000251e 	bne	r16,zero,4021fb0 <__subdf3+0x66c>
 4021f1c:	1000661e 	bne	r2,zero,40220b8 <__subdf3+0x774>
 4021f20:	2990b03a 	or	r8,r5,r6
 4021f24:	40009626 	beq	r8,zero,4022180 <__subdf3+0x83c>
 4021f28:	2807883a 	mov	r3,r5
 4021f2c:	3023883a 	mov	r17,r6
 4021f30:	3825883a 	mov	r18,r7
 4021f34:	003ea406 	br	40219c8 <__alt_data_end+0xfffe25c8>
 4021f38:	127ff804 	addi	r9,r2,-32
 4021f3c:	01000804 	movi	r4,32
 4021f40:	2a52d83a 	srl	r9,r5,r9
 4021f44:	11008c26 	beq	r2,r4,4022178 <__subdf3+0x834>
 4021f48:	01001004 	movi	r4,64
 4021f4c:	2085c83a 	sub	r2,r4,r2
 4021f50:	2884983a 	sll	r2,r5,r2
 4021f54:	118cb03a 	or	r6,r2,r6
 4021f58:	300cc03a 	cmpne	r6,r6,zero
 4021f5c:	4992b03a 	or	r9,r9,r6
 4021f60:	0005883a 	mov	r2,zero
 4021f64:	003f1206 	br	4021bb0 <__alt_data_end+0xfffe27b0>
 4021f68:	0101ffc4 	movi	r4,2047
 4021f6c:	493f9c1e 	bne	r9,r4,4021de0 <__alt_data_end+0xfffe29e0>
 4021f70:	2807883a 	mov	r3,r5
 4021f74:	3023883a 	mov	r17,r6
 4021f78:	4821883a 	mov	r16,r9
 4021f7c:	3825883a 	mov	r18,r7
 4021f80:	003e9106 	br	40219c8 <__alt_data_end+0xfffe25c8>
 4021f84:	80001f1e 	bne	r16,zero,4022004 <__subdf3+0x6c0>
 4021f88:	1c48b03a 	or	r4,r3,r17
 4021f8c:	20005a26 	beq	r4,zero,40220f8 <__subdf3+0x7b4>
 4021f90:	0084303a 	nor	r2,zero,r2
 4021f94:	1000561e 	bne	r2,zero,40220f0 <__subdf3+0x7ac>
 4021f98:	89a3883a 	add	r17,r17,r6
 4021f9c:	1945883a 	add	r2,r3,r5
 4021fa0:	898d803a 	cmpltu	r6,r17,r6
 4021fa4:	3087883a 	add	r3,r6,r2
 4021fa8:	4821883a 	mov	r16,r9
 4021fac:	003f0506 	br	4021bc4 <__alt_data_end+0xfffe27c4>
 4021fb0:	10002b1e 	bne	r2,zero,4022060 <__subdf3+0x71c>
 4021fb4:	2984b03a 	or	r2,r5,r6
 4021fb8:	10008026 	beq	r2,zero,40221bc <__subdf3+0x878>
 4021fbc:	2807883a 	mov	r3,r5
 4021fc0:	3023883a 	mov	r17,r6
 4021fc4:	3825883a 	mov	r18,r7
 4021fc8:	0401ffc4 	movi	r16,2047
 4021fcc:	003e7e06 	br	40219c8 <__alt_data_end+0xfffe25c8>
 4021fd0:	3809883a 	mov	r4,r7
 4021fd4:	0011883a 	mov	r8,zero
 4021fd8:	0005883a 	mov	r2,zero
 4021fdc:	003ee306 	br	4021b6c <__alt_data_end+0xfffe276c>
 4021fe0:	1c62b03a 	or	r17,r3,r17
 4021fe4:	8822c03a 	cmpne	r17,r17,zero
 4021fe8:	0005883a 	mov	r2,zero
 4021fec:	003f8906 	br	4021e14 <__alt_data_end+0xfffe2a14>
 4021ff0:	3809883a 	mov	r4,r7
 4021ff4:	4821883a 	mov	r16,r9
 4021ff8:	0011883a 	mov	r8,zero
 4021ffc:	0005883a 	mov	r2,zero
 4022000:	003eda06 	br	4021b6c <__alt_data_end+0xfffe276c>
 4022004:	0101ffc4 	movi	r4,2047
 4022008:	49003b26 	beq	r9,r4,40220f8 <__subdf3+0x7b4>
 402200c:	0085c83a 	sub	r2,zero,r2
 4022010:	18c02034 	orhi	r3,r3,128
 4022014:	01000e04 	movi	r4,56
 4022018:	20806e16 	blt	r4,r2,40221d4 <__subdf3+0x890>
 402201c:	010007c4 	movi	r4,31
 4022020:	20807716 	blt	r4,r2,4022200 <__subdf3+0x8bc>
 4022024:	01000804 	movi	r4,32
 4022028:	2089c83a 	sub	r4,r4,r2
 402202c:	1914983a 	sll	r10,r3,r4
 4022030:	8890d83a 	srl	r8,r17,r2
 4022034:	8908983a 	sll	r4,r17,r4
 4022038:	1884d83a 	srl	r2,r3,r2
 402203c:	5222b03a 	or	r17,r10,r8
 4022040:	2006c03a 	cmpne	r3,r4,zero
 4022044:	88e2b03a 	or	r17,r17,r3
 4022048:	89a3883a 	add	r17,r17,r6
 402204c:	1145883a 	add	r2,r2,r5
 4022050:	898d803a 	cmpltu	r6,r17,r6
 4022054:	3087883a 	add	r3,r6,r2
 4022058:	4821883a 	mov	r16,r9
 402205c:	003ed906 	br	4021bc4 <__alt_data_end+0xfffe27c4>
 4022060:	2984b03a 	or	r2,r5,r6
 4022064:	10004226 	beq	r2,zero,4022170 <__subdf3+0x82c>
 4022068:	1808d0fa 	srli	r4,r3,3
 402206c:	8822d0fa 	srli	r17,r17,3
 4022070:	1806977a 	slli	r3,r3,29
 4022074:	2080022c 	andhi	r2,r4,8
 4022078:	1c62b03a 	or	r17,r3,r17
 402207c:	10000826 	beq	r2,zero,40220a0 <__subdf3+0x75c>
 4022080:	2812d0fa 	srli	r9,r5,3
 4022084:	4880022c 	andhi	r2,r9,8
 4022088:	1000051e 	bne	r2,zero,40220a0 <__subdf3+0x75c>
 402208c:	300cd0fa 	srli	r6,r6,3
 4022090:	2804977a 	slli	r2,r5,29
 4022094:	4809883a 	mov	r4,r9
 4022098:	3825883a 	mov	r18,r7
 402209c:	11a2b03a 	or	r17,r2,r6
 40220a0:	8806d77a 	srli	r3,r17,29
 40220a4:	200890fa 	slli	r4,r4,3
 40220a8:	882290fa 	slli	r17,r17,3
 40220ac:	0401ffc4 	movi	r16,2047
 40220b0:	1906b03a 	or	r3,r3,r4
 40220b4:	003e4406 	br	40219c8 <__alt_data_end+0xfffe25c8>
 40220b8:	2984b03a 	or	r2,r5,r6
 40220bc:	103e4226 	beq	r2,zero,40219c8 <__alt_data_end+0xfffe25c8>
 40220c0:	8989c83a 	sub	r4,r17,r6
 40220c4:	8911803a 	cmpltu	r8,r17,r4
 40220c8:	1945c83a 	sub	r2,r3,r5
 40220cc:	1205c83a 	sub	r2,r2,r8
 40220d0:	1200202c 	andhi	r8,r2,128
 40220d4:	403e9a26 	beq	r8,zero,4021b40 <__alt_data_end+0xfffe2740>
 40220d8:	3463c83a 	sub	r17,r6,r17
 40220dc:	28c5c83a 	sub	r2,r5,r3
 40220e0:	344d803a 	cmpltu	r6,r6,r17
 40220e4:	1187c83a 	sub	r3,r2,r6
 40220e8:	3825883a 	mov	r18,r7
 40220ec:	003e3606 	br	40219c8 <__alt_data_end+0xfffe25c8>
 40220f0:	0101ffc4 	movi	r4,2047
 40220f4:	493fc71e 	bne	r9,r4,4022014 <__alt_data_end+0xfffe2c14>
 40220f8:	2807883a 	mov	r3,r5
 40220fc:	3023883a 	mov	r17,r6
 4022100:	4821883a 	mov	r16,r9
 4022104:	003e3006 	br	40219c8 <__alt_data_end+0xfffe25c8>
 4022108:	10003626 	beq	r2,zero,40221e4 <__subdf3+0x8a0>
 402210c:	2984b03a 	or	r2,r5,r6
 4022110:	10001726 	beq	r2,zero,4022170 <__subdf3+0x82c>
 4022114:	1808d0fa 	srli	r4,r3,3
 4022118:	8822d0fa 	srli	r17,r17,3
 402211c:	1806977a 	slli	r3,r3,29
 4022120:	2080022c 	andhi	r2,r4,8
 4022124:	1c62b03a 	or	r17,r3,r17
 4022128:	10000726 	beq	r2,zero,4022148 <__subdf3+0x804>
 402212c:	2812d0fa 	srli	r9,r5,3
 4022130:	4880022c 	andhi	r2,r9,8
 4022134:	1000041e 	bne	r2,zero,4022148 <__subdf3+0x804>
 4022138:	300cd0fa 	srli	r6,r6,3
 402213c:	2804977a 	slli	r2,r5,29
 4022140:	4809883a 	mov	r4,r9
 4022144:	11a2b03a 	or	r17,r2,r6
 4022148:	8806d77a 	srli	r3,r17,29
 402214c:	200890fa 	slli	r4,r4,3
 4022150:	882290fa 	slli	r17,r17,3
 4022154:	3825883a 	mov	r18,r7
 4022158:	1906b03a 	or	r3,r3,r4
 402215c:	0401ffc4 	movi	r16,2047
 4022160:	003e1906 	br	40219c8 <__alt_data_end+0xfffe25c8>
 4022164:	000b883a 	mov	r5,zero
 4022168:	0005883a 	mov	r2,zero
 402216c:	003e2e06 	br	4021a28 <__alt_data_end+0xfffe2628>
 4022170:	0401ffc4 	movi	r16,2047
 4022174:	003e1406 	br	40219c8 <__alt_data_end+0xfffe25c8>
 4022178:	0005883a 	mov	r2,zero
 402217c:	003f7506 	br	4021f54 <__alt_data_end+0xfffe2b54>
 4022180:	0005883a 	mov	r2,zero
 4022184:	0009883a 	mov	r4,zero
 4022188:	003e7806 	br	4021b6c <__alt_data_end+0xfffe276c>
 402218c:	123ff804 	addi	r8,r2,-32
 4022190:	01000804 	movi	r4,32
 4022194:	1a10d83a 	srl	r8,r3,r8
 4022198:	11002526 	beq	r2,r4,4022230 <__subdf3+0x8ec>
 402219c:	01001004 	movi	r4,64
 40221a0:	2085c83a 	sub	r2,r4,r2
 40221a4:	1884983a 	sll	r2,r3,r2
 40221a8:	1444b03a 	or	r2,r2,r17
 40221ac:	1004c03a 	cmpne	r2,r2,zero
 40221b0:	40a2b03a 	or	r17,r8,r2
 40221b4:	0005883a 	mov	r2,zero
 40221b8:	003f1606 	br	4021e14 <__alt_data_end+0xfffe2a14>
 40221bc:	02000434 	movhi	r8,16
 40221c0:	0009883a 	mov	r4,zero
 40221c4:	423fffc4 	addi	r8,r8,-1
 40221c8:	00bfffc4 	movi	r2,-1
 40221cc:	0401ffc4 	movi	r16,2047
 40221d0:	003e6606 	br	4021b6c <__alt_data_end+0xfffe276c>
 40221d4:	1c62b03a 	or	r17,r3,r17
 40221d8:	8822c03a 	cmpne	r17,r17,zero
 40221dc:	0005883a 	mov	r2,zero
 40221e0:	003f9906 	br	4022048 <__alt_data_end+0xfffe2c48>
 40221e4:	2807883a 	mov	r3,r5
 40221e8:	3023883a 	mov	r17,r6
 40221ec:	0401ffc4 	movi	r16,2047
 40221f0:	003df506 	br	40219c8 <__alt_data_end+0xfffe25c8>
 40221f4:	2807883a 	mov	r3,r5
 40221f8:	3023883a 	mov	r17,r6
 40221fc:	003df206 	br	40219c8 <__alt_data_end+0xfffe25c8>
 4022200:	123ff804 	addi	r8,r2,-32
 4022204:	01000804 	movi	r4,32
 4022208:	1a10d83a 	srl	r8,r3,r8
 402220c:	11000a26 	beq	r2,r4,4022238 <__subdf3+0x8f4>
 4022210:	01001004 	movi	r4,64
 4022214:	2085c83a 	sub	r2,r4,r2
 4022218:	1884983a 	sll	r2,r3,r2
 402221c:	1444b03a 	or	r2,r2,r17
 4022220:	1004c03a 	cmpne	r2,r2,zero
 4022224:	40a2b03a 	or	r17,r8,r2
 4022228:	0005883a 	mov	r2,zero
 402222c:	003f8606 	br	4022048 <__alt_data_end+0xfffe2c48>
 4022230:	0005883a 	mov	r2,zero
 4022234:	003fdc06 	br	40221a8 <__alt_data_end+0xfffe2da8>
 4022238:	0005883a 	mov	r2,zero
 402223c:	003ff706 	br	402221c <__alt_data_end+0xfffe2e1c>

04022240 <__fixdfsi>:
 4022240:	280cd53a 	srli	r6,r5,20
 4022244:	00c00434 	movhi	r3,16
 4022248:	18ffffc4 	addi	r3,r3,-1
 402224c:	3181ffcc 	andi	r6,r6,2047
 4022250:	01c0ff84 	movi	r7,1022
 4022254:	28c6703a 	and	r3,r5,r3
 4022258:	280ad7fa 	srli	r5,r5,31
 402225c:	3980120e 	bge	r7,r6,40222a8 <__fixdfsi+0x68>
 4022260:	00810744 	movi	r2,1053
 4022264:	11800c16 	blt	r2,r6,4022298 <__fixdfsi+0x58>
 4022268:	00810cc4 	movi	r2,1075
 402226c:	1185c83a 	sub	r2,r2,r6
 4022270:	01c007c4 	movi	r7,31
 4022274:	18c00434 	orhi	r3,r3,16
 4022278:	38800d16 	blt	r7,r2,40222b0 <__fixdfsi+0x70>
 402227c:	31befb44 	addi	r6,r6,-1043
 4022280:	2084d83a 	srl	r2,r4,r2
 4022284:	1986983a 	sll	r3,r3,r6
 4022288:	1884b03a 	or	r2,r3,r2
 402228c:	28000726 	beq	r5,zero,40222ac <__fixdfsi+0x6c>
 4022290:	0085c83a 	sub	r2,zero,r2
 4022294:	f800283a 	ret
 4022298:	00a00034 	movhi	r2,32768
 402229c:	10bfffc4 	addi	r2,r2,-1
 40222a0:	2885883a 	add	r2,r5,r2
 40222a4:	f800283a 	ret
 40222a8:	0005883a 	mov	r2,zero
 40222ac:	f800283a 	ret
 40222b0:	008104c4 	movi	r2,1043
 40222b4:	1185c83a 	sub	r2,r2,r6
 40222b8:	1884d83a 	srl	r2,r3,r2
 40222bc:	003ff306 	br	402228c <__alt_data_end+0xfffe2e8c>

040222c0 <__floatunsidf>:
 40222c0:	defffe04 	addi	sp,sp,-8
 40222c4:	dc000015 	stw	r16,0(sp)
 40222c8:	dfc00115 	stw	ra,4(sp)
 40222cc:	2021883a 	mov	r16,r4
 40222d0:	20002226 	beq	r4,zero,402235c <__floatunsidf+0x9c>
 40222d4:	40223680 	call	4022368 <__clzsi2>
 40222d8:	01010784 	movi	r4,1054
 40222dc:	2089c83a 	sub	r4,r4,r2
 40222e0:	01810cc4 	movi	r6,1075
 40222e4:	310dc83a 	sub	r6,r6,r4
 40222e8:	00c007c4 	movi	r3,31
 40222ec:	1980120e 	bge	r3,r6,4022338 <__floatunsidf+0x78>
 40222f0:	00c104c4 	movi	r3,1043
 40222f4:	1907c83a 	sub	r3,r3,r4
 40222f8:	80ca983a 	sll	r5,r16,r3
 40222fc:	00800434 	movhi	r2,16
 4022300:	10bfffc4 	addi	r2,r2,-1
 4022304:	2101ffcc 	andi	r4,r4,2047
 4022308:	0021883a 	mov	r16,zero
 402230c:	288a703a 	and	r5,r5,r2
 4022310:	2008953a 	slli	r4,r4,20
 4022314:	00c00434 	movhi	r3,16
 4022318:	18ffffc4 	addi	r3,r3,-1
 402231c:	28c6703a 	and	r3,r5,r3
 4022320:	8005883a 	mov	r2,r16
 4022324:	1906b03a 	or	r3,r3,r4
 4022328:	dfc00117 	ldw	ra,4(sp)
 402232c:	dc000017 	ldw	r16,0(sp)
 4022330:	dec00204 	addi	sp,sp,8
 4022334:	f800283a 	ret
 4022338:	00c002c4 	movi	r3,11
 402233c:	188bc83a 	sub	r5,r3,r2
 4022340:	814ad83a 	srl	r5,r16,r5
 4022344:	00c00434 	movhi	r3,16
 4022348:	18ffffc4 	addi	r3,r3,-1
 402234c:	81a0983a 	sll	r16,r16,r6
 4022350:	2101ffcc 	andi	r4,r4,2047
 4022354:	28ca703a 	and	r5,r5,r3
 4022358:	003fed06 	br	4022310 <__alt_data_end+0xfffe2f10>
 402235c:	0009883a 	mov	r4,zero
 4022360:	000b883a 	mov	r5,zero
 4022364:	003fea06 	br	4022310 <__alt_data_end+0xfffe2f10>

04022368 <__clzsi2>:
 4022368:	00bfffd4 	movui	r2,65535
 402236c:	11000536 	bltu	r2,r4,4022384 <__clzsi2+0x1c>
 4022370:	00803fc4 	movi	r2,255
 4022374:	11000f36 	bltu	r2,r4,40223b4 <__clzsi2+0x4c>
 4022378:	00800804 	movi	r2,32
 402237c:	0007883a 	mov	r3,zero
 4022380:	00000506 	br	4022398 <__clzsi2+0x30>
 4022384:	00804034 	movhi	r2,256
 4022388:	10bfffc4 	addi	r2,r2,-1
 402238c:	11000c2e 	bgeu	r2,r4,40223c0 <__clzsi2+0x58>
 4022390:	00800204 	movi	r2,8
 4022394:	00c00604 	movi	r3,24
 4022398:	20c8d83a 	srl	r4,r4,r3
 402239c:	00c100b4 	movhi	r3,1026
 40223a0:	18cf3604 	addi	r3,r3,15576
 40223a4:	1909883a 	add	r4,r3,r4
 40223a8:	20c00003 	ldbu	r3,0(r4)
 40223ac:	10c5c83a 	sub	r2,r2,r3
 40223b0:	f800283a 	ret
 40223b4:	00800604 	movi	r2,24
 40223b8:	00c00204 	movi	r3,8
 40223bc:	003ff606 	br	4022398 <__alt_data_end+0xfffe2f98>
 40223c0:	00800404 	movi	r2,16
 40223c4:	1007883a 	mov	r3,r2
 40223c8:	003ff306 	br	4022398 <__alt_data_end+0xfffe2f98>

040223cc <__divsi3>:
 40223cc:	20001b16 	blt	r4,zero,402243c <__divsi3+0x70>
 40223d0:	000f883a 	mov	r7,zero
 40223d4:	28001616 	blt	r5,zero,4022430 <__divsi3+0x64>
 40223d8:	200d883a 	mov	r6,r4
 40223dc:	29001a2e 	bgeu	r5,r4,4022448 <__divsi3+0x7c>
 40223e0:	00800804 	movi	r2,32
 40223e4:	00c00044 	movi	r3,1
 40223e8:	00000106 	br	40223f0 <__divsi3+0x24>
 40223ec:	10000d26 	beq	r2,zero,4022424 <__divsi3+0x58>
 40223f0:	294b883a 	add	r5,r5,r5
 40223f4:	10bfffc4 	addi	r2,r2,-1
 40223f8:	18c7883a 	add	r3,r3,r3
 40223fc:	293ffb36 	bltu	r5,r4,40223ec <__alt_data_end+0xfffe2fec>
 4022400:	0005883a 	mov	r2,zero
 4022404:	18000726 	beq	r3,zero,4022424 <__divsi3+0x58>
 4022408:	0005883a 	mov	r2,zero
 402240c:	31400236 	bltu	r6,r5,4022418 <__divsi3+0x4c>
 4022410:	314dc83a 	sub	r6,r6,r5
 4022414:	10c4b03a 	or	r2,r2,r3
 4022418:	1806d07a 	srli	r3,r3,1
 402241c:	280ad07a 	srli	r5,r5,1
 4022420:	183ffa1e 	bne	r3,zero,402240c <__alt_data_end+0xfffe300c>
 4022424:	38000126 	beq	r7,zero,402242c <__divsi3+0x60>
 4022428:	0085c83a 	sub	r2,zero,r2
 402242c:	f800283a 	ret
 4022430:	014bc83a 	sub	r5,zero,r5
 4022434:	39c0005c 	xori	r7,r7,1
 4022438:	003fe706 	br	40223d8 <__alt_data_end+0xfffe2fd8>
 402243c:	0109c83a 	sub	r4,zero,r4
 4022440:	01c00044 	movi	r7,1
 4022444:	003fe306 	br	40223d4 <__alt_data_end+0xfffe2fd4>
 4022448:	00c00044 	movi	r3,1
 402244c:	003fee06 	br	4022408 <__alt_data_end+0xfffe3008>

04022450 <__modsi3>:
 4022450:	20001716 	blt	r4,zero,40224b0 <__modsi3+0x60>
 4022454:	000f883a 	mov	r7,zero
 4022458:	2005883a 	mov	r2,r4
 402245c:	28001216 	blt	r5,zero,40224a8 <__modsi3+0x58>
 4022460:	2900162e 	bgeu	r5,r4,40224bc <__modsi3+0x6c>
 4022464:	01800804 	movi	r6,32
 4022468:	00c00044 	movi	r3,1
 402246c:	00000106 	br	4022474 <__modsi3+0x24>
 4022470:	30000a26 	beq	r6,zero,402249c <__modsi3+0x4c>
 4022474:	294b883a 	add	r5,r5,r5
 4022478:	31bfffc4 	addi	r6,r6,-1
 402247c:	18c7883a 	add	r3,r3,r3
 4022480:	293ffb36 	bltu	r5,r4,4022470 <__alt_data_end+0xfffe3070>
 4022484:	18000526 	beq	r3,zero,402249c <__modsi3+0x4c>
 4022488:	1806d07a 	srli	r3,r3,1
 402248c:	11400136 	bltu	r2,r5,4022494 <__modsi3+0x44>
 4022490:	1145c83a 	sub	r2,r2,r5
 4022494:	280ad07a 	srli	r5,r5,1
 4022498:	183ffb1e 	bne	r3,zero,4022488 <__alt_data_end+0xfffe3088>
 402249c:	38000126 	beq	r7,zero,40224a4 <__modsi3+0x54>
 40224a0:	0085c83a 	sub	r2,zero,r2
 40224a4:	f800283a 	ret
 40224a8:	014bc83a 	sub	r5,zero,r5
 40224ac:	003fec06 	br	4022460 <__alt_data_end+0xfffe3060>
 40224b0:	0109c83a 	sub	r4,zero,r4
 40224b4:	01c00044 	movi	r7,1
 40224b8:	003fe706 	br	4022458 <__alt_data_end+0xfffe3058>
 40224bc:	00c00044 	movi	r3,1
 40224c0:	003ff106 	br	4022488 <__alt_data_end+0xfffe3088>

040224c4 <__udivsi3>:
 40224c4:	200d883a 	mov	r6,r4
 40224c8:	2900152e 	bgeu	r5,r4,4022520 <__udivsi3+0x5c>
 40224cc:	28001416 	blt	r5,zero,4022520 <__udivsi3+0x5c>
 40224d0:	00800804 	movi	r2,32
 40224d4:	00c00044 	movi	r3,1
 40224d8:	00000206 	br	40224e4 <__udivsi3+0x20>
 40224dc:	10000e26 	beq	r2,zero,4022518 <__udivsi3+0x54>
 40224e0:	28000516 	blt	r5,zero,40224f8 <__udivsi3+0x34>
 40224e4:	294b883a 	add	r5,r5,r5
 40224e8:	10bfffc4 	addi	r2,r2,-1
 40224ec:	18c7883a 	add	r3,r3,r3
 40224f0:	293ffa36 	bltu	r5,r4,40224dc <__alt_data_end+0xfffe30dc>
 40224f4:	18000826 	beq	r3,zero,4022518 <__udivsi3+0x54>
 40224f8:	0005883a 	mov	r2,zero
 40224fc:	31400236 	bltu	r6,r5,4022508 <__udivsi3+0x44>
 4022500:	314dc83a 	sub	r6,r6,r5
 4022504:	10c4b03a 	or	r2,r2,r3
 4022508:	1806d07a 	srli	r3,r3,1
 402250c:	280ad07a 	srli	r5,r5,1
 4022510:	183ffa1e 	bne	r3,zero,40224fc <__alt_data_end+0xfffe30fc>
 4022514:	f800283a 	ret
 4022518:	0005883a 	mov	r2,zero
 402251c:	f800283a 	ret
 4022520:	00c00044 	movi	r3,1
 4022524:	003ff406 	br	40224f8 <__alt_data_end+0xfffe30f8>

04022528 <__umodsi3>:
 4022528:	2005883a 	mov	r2,r4
 402252c:	2900122e 	bgeu	r5,r4,4022578 <__umodsi3+0x50>
 4022530:	28001116 	blt	r5,zero,4022578 <__umodsi3+0x50>
 4022534:	01800804 	movi	r6,32
 4022538:	00c00044 	movi	r3,1
 402253c:	00000206 	br	4022548 <__umodsi3+0x20>
 4022540:	30000c26 	beq	r6,zero,4022574 <__umodsi3+0x4c>
 4022544:	28000516 	blt	r5,zero,402255c <__umodsi3+0x34>
 4022548:	294b883a 	add	r5,r5,r5
 402254c:	31bfffc4 	addi	r6,r6,-1
 4022550:	18c7883a 	add	r3,r3,r3
 4022554:	293ffa36 	bltu	r5,r4,4022540 <__alt_data_end+0xfffe3140>
 4022558:	18000626 	beq	r3,zero,4022574 <__umodsi3+0x4c>
 402255c:	1806d07a 	srli	r3,r3,1
 4022560:	11400136 	bltu	r2,r5,4022568 <__umodsi3+0x40>
 4022564:	1145c83a 	sub	r2,r2,r5
 4022568:	280ad07a 	srli	r5,r5,1
 402256c:	183ffb1e 	bne	r3,zero,402255c <__alt_data_end+0xfffe315c>
 4022570:	f800283a 	ret
 4022574:	f800283a 	ret
 4022578:	00c00044 	movi	r3,1
 402257c:	003ff706 	br	402255c <__alt_data_end+0xfffe315c>

04022580 <__mulsi3>:
 4022580:	0005883a 	mov	r2,zero
 4022584:	20000726 	beq	r4,zero,40225a4 <__mulsi3+0x24>
 4022588:	20c0004c 	andi	r3,r4,1
 402258c:	2008d07a 	srli	r4,r4,1
 4022590:	18000126 	beq	r3,zero,4022598 <__mulsi3+0x18>
 4022594:	1145883a 	add	r2,r2,r5
 4022598:	294b883a 	add	r5,r5,r5
 402259c:	203ffa1e 	bne	r4,zero,4022588 <__alt_data_end+0xfffe3188>
 40225a0:	f800283a 	ret
 40225a4:	f800283a 	ret

040225a8 <alt_load_section>:
 40225a8:	defffc04 	addi	sp,sp,-16
 40225ac:	df000315 	stw	fp,12(sp)
 40225b0:	df000304 	addi	fp,sp,12
 40225b4:	e13ffd15 	stw	r4,-12(fp)
 40225b8:	e17ffe15 	stw	r5,-8(fp)
 40225bc:	e1bfff15 	stw	r6,-4(fp)
 40225c0:	e0fffe17 	ldw	r3,-8(fp)
 40225c4:	e0bffd17 	ldw	r2,-12(fp)
 40225c8:	18800c26 	beq	r3,r2,40225fc <alt_load_section+0x54>
 40225cc:	00000806 	br	40225f0 <alt_load_section+0x48>
 40225d0:	e0bffe17 	ldw	r2,-8(fp)
 40225d4:	10c00104 	addi	r3,r2,4
 40225d8:	e0fffe15 	stw	r3,-8(fp)
 40225dc:	e0fffd17 	ldw	r3,-12(fp)
 40225e0:	19000104 	addi	r4,r3,4
 40225e4:	e13ffd15 	stw	r4,-12(fp)
 40225e8:	18c00017 	ldw	r3,0(r3)
 40225ec:	10c00015 	stw	r3,0(r2)
 40225f0:	e0fffe17 	ldw	r3,-8(fp)
 40225f4:	e0bfff17 	ldw	r2,-4(fp)
 40225f8:	18bff51e 	bne	r3,r2,40225d0 <__alt_data_end+0xfffe31d0>
 40225fc:	0001883a 	nop
 4022600:	e037883a 	mov	sp,fp
 4022604:	df000017 	ldw	fp,0(sp)
 4022608:	dec00104 	addi	sp,sp,4
 402260c:	f800283a 	ret

04022610 <alt_load>:
 4022610:	defffe04 	addi	sp,sp,-8
 4022614:	dfc00115 	stw	ra,4(sp)
 4022618:	df000015 	stw	fp,0(sp)
 402261c:	d839883a 	mov	fp,sp
 4022620:	018100b4 	movhi	r6,1026
 4022624:	31904704 	addi	r6,r6,16668
 4022628:	014100b4 	movhi	r5,1026
 402262c:	294f8404 	addi	r5,r5,15888
 4022630:	010100b4 	movhi	r4,1026
 4022634:	21104704 	addi	r4,r4,16668
 4022638:	40225a80 	call	40225a8 <alt_load_section>
 402263c:	018100b4 	movhi	r6,1026
 4022640:	31808c04 	addi	r6,r6,560
 4022644:	014100b4 	movhi	r5,1026
 4022648:	29400804 	addi	r5,r5,32
 402264c:	010100b4 	movhi	r4,1026
 4022650:	21000804 	addi	r4,r4,32
 4022654:	40225a80 	call	40225a8 <alt_load_section>
 4022658:	018100b4 	movhi	r6,1026
 402265c:	318f8404 	addi	r6,r6,15888
 4022660:	014100b4 	movhi	r5,1026
 4022664:	294f3604 	addi	r5,r5,15576
 4022668:	010100b4 	movhi	r4,1026
 402266c:	210f3604 	addi	r4,r4,15576
 4022670:	40225a80 	call	40225a8 <alt_load_section>
 4022674:	4022d940 	call	4022d94 <alt_dcache_flush_all>
 4022678:	4022ec00 	call	4022ec0 <alt_icache_flush_all>
 402267c:	0001883a 	nop
 4022680:	e037883a 	mov	sp,fp
 4022684:	dfc00117 	ldw	ra,4(sp)
 4022688:	df000017 	ldw	fp,0(sp)
 402268c:	dec00204 	addi	sp,sp,8
 4022690:	f800283a 	ret

04022694 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 4022694:	defffd04 	addi	sp,sp,-12
 4022698:	dfc00215 	stw	ra,8(sp)
 402269c:	df000115 	stw	fp,4(sp)
 40226a0:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 40226a4:	0009883a 	mov	r4,zero
 40226a8:	40227640 	call	4022764 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 40226ac:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 40226b0:	402279c0 	call	402279c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 40226b4:	018100b4 	movhi	r6,1026
 40226b8:	318f7604 	addi	r6,r6,15832
 40226bc:	014100b4 	movhi	r5,1026
 40226c0:	294f7604 	addi	r5,r5,15832
 40226c4:	010100b4 	movhi	r4,1026
 40226c8:	210f7604 	addi	r4,r4,15832
 40226cc:	40232640 	call	4023264 <alt_io_redirect>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 40226d0:	d0a0ce17 	ldw	r2,-31944(gp)
 40226d4:	d0e0cf17 	ldw	r3,-31940(gp)
 40226d8:	d120d017 	ldw	r4,-31936(gp)
 40226dc:	200d883a 	mov	r6,r4
 40226e0:	180b883a 	mov	r5,r3
 40226e4:	1009883a 	mov	r4,r2
 40226e8:	402026c0 	call	402026c <main>
 40226ec:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 40226f0:	01000044 	movi	r4,1
 40226f4:	4022cbc0 	call	4022cbc <close>
  exit (result);
 40226f8:	e13fff17 	ldw	r4,-4(fp)
 40226fc:	4023aa80 	call	4023aa8 <exit>

04022700 <usleep>:
 4022700:	defffd04 	addi	sp,sp,-12
 4022704:	dfc00215 	stw	ra,8(sp)
 4022708:	df000115 	stw	fp,4(sp)
 402270c:	df000104 	addi	fp,sp,4
 4022710:	e13fff15 	stw	r4,-4(fp)
 4022714:	e13fff17 	ldw	r4,-4(fp)
 4022718:	4022b280 	call	4022b28 <alt_busy_sleep>
 402271c:	e037883a 	mov	sp,fp
 4022720:	dfc00117 	ldw	ra,4(sp)
 4022724:	df000017 	ldw	fp,0(sp)
 4022728:	dec00204 	addi	sp,sp,8
 402272c:	f800283a 	ret

04022730 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 4022730:	defffd04 	addi	sp,sp,-12
 4022734:	dfc00215 	stw	ra,8(sp)
 4022738:	df000115 	stw	fp,4(sp)
 402273c:	df000104 	addi	fp,sp,4
 4022740:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 4022744:	d1600204 	addi	r5,gp,-32760
 4022748:	e13fff17 	ldw	r4,-4(fp)
 402274c:	4022e1c0 	call	4022e1c <alt_dev_llist_insert>
}
 4022750:	e037883a 	mov	sp,fp
 4022754:	dfc00117 	ldw	ra,4(sp)
 4022758:	df000017 	ldw	fp,0(sp)
 402275c:	dec00204 	addi	sp,sp,8
 4022760:	f800283a 	ret

04022764 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 4022764:	defffd04 	addi	sp,sp,-12
 4022768:	dfc00215 	stw	ra,8(sp)
 402276c:	df000115 	stw	fp,4(sp)
 4022770:	df000104 	addi	fp,sp,4
 4022774:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( PROCESADOR1, Procesador1);
 4022778:	402378c0 	call	402378c <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 402277c:	00800044 	movi	r2,1
 4022780:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 4022784:	0001883a 	nop
 4022788:	e037883a 	mov	sp,fp
 402278c:	dfc00117 	ldw	ra,4(sp)
 4022790:	df000017 	ldw	fp,0(sp)
 4022794:	dec00204 	addi	sp,sp,8
 4022798:	f800283a 	ret

0402279c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 402279c:	defffe04 	addi	sp,sp,-8
 40227a0:	dfc00115 	stw	ra,4(sp)
 40227a4:	df000015 	stw	fp,0(sp)
 40227a8:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER, TIMER);
 40227ac:	01c0fa04 	movi	r7,1000
 40227b0:	000d883a 	mov	r6,zero
 40227b4:	000b883a 	mov	r5,zero
 40227b8:	01010134 	movhi	r4,1028
 40227bc:	21040004 	addi	r4,r4,4096
 40227c0:	4022aac0 	call	4022aac <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, JTAG_UART);
 40227c4:	010100b4 	movhi	r4,1026
 40227c8:	210f8404 	addi	r4,r4,15888
 40227cc:	40227300 	call	4022730 <alt_dev_reg>
    ALTERA_UP_AVALON_ADC_INIT ( LDR, LDR);
 40227d0:	010100b4 	movhi	r4,1026
 40227d4:	210f8f04 	addi	r4,r4,15932
 40227d8:	40227300 	call	4022730 <alt_dev_reg>
}
 40227dc:	0001883a 	nop
 40227e0:	e037883a 	mov	sp,fp
 40227e4:	dfc00117 	ldw	ra,4(sp)
 40227e8:	df000017 	ldw	fp,0(sp)
 40227ec:	dec00204 	addi	sp,sp,8
 40227f0:	f800283a 	ret

040227f4 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 40227f4:	defffa04 	addi	sp,sp,-24
 40227f8:	dfc00515 	stw	ra,20(sp)
 40227fc:	df000415 	stw	fp,16(sp)
 4022800:	df000404 	addi	fp,sp,16
 4022804:	e13ffd15 	stw	r4,-12(fp)
 4022808:	e17ffe15 	stw	r5,-8(fp)
 402280c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 4022810:	e0bffd17 	ldw	r2,-12(fp)
 4022814:	10800017 	ldw	r2,0(r2)
 4022818:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 402281c:	e0bffc17 	ldw	r2,-16(fp)
 4022820:	10c00a04 	addi	r3,r2,40
 4022824:	e0bffd17 	ldw	r2,-12(fp)
 4022828:	10800217 	ldw	r2,8(r2)
 402282c:	100f883a 	mov	r7,r2
 4022830:	e1bfff17 	ldw	r6,-4(fp)
 4022834:	e17ffe17 	ldw	r5,-8(fp)
 4022838:	1809883a 	mov	r4,r3
 402283c:	40228b40 	call	40228b4 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 4022840:	e037883a 	mov	sp,fp
 4022844:	dfc00117 	ldw	ra,4(sp)
 4022848:	df000017 	ldw	fp,0(sp)
 402284c:	dec00204 	addi	sp,sp,8
 4022850:	f800283a 	ret

04022854 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 4022854:	defffa04 	addi	sp,sp,-24
 4022858:	dfc00515 	stw	ra,20(sp)
 402285c:	df000415 	stw	fp,16(sp)
 4022860:	df000404 	addi	fp,sp,16
 4022864:	e13ffd15 	stw	r4,-12(fp)
 4022868:	e17ffe15 	stw	r5,-8(fp)
 402286c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 4022870:	e0bffd17 	ldw	r2,-12(fp)
 4022874:	10800017 	ldw	r2,0(r2)
 4022878:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 402287c:	e0bffc17 	ldw	r2,-16(fp)
 4022880:	10c00a04 	addi	r3,r2,40
 4022884:	e0bffd17 	ldw	r2,-12(fp)
 4022888:	10800217 	ldw	r2,8(r2)
 402288c:	100f883a 	mov	r7,r2
 4022890:	e1bfff17 	ldw	r6,-4(fp)
 4022894:	e17ffe17 	ldw	r5,-8(fp)
 4022898:	1809883a 	mov	r4,r3
 402289c:	40229a00 	call	40229a0 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 40228a0:	e037883a 	mov	sp,fp
 40228a4:	dfc00117 	ldw	ra,4(sp)
 40228a8:	df000017 	ldw	fp,0(sp)
 40228ac:	dec00204 	addi	sp,sp,8
 40228b0:	f800283a 	ret

040228b4 <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
 40228b4:	defff704 	addi	sp,sp,-36
 40228b8:	df000815 	stw	fp,32(sp)
 40228bc:	df000804 	addi	fp,sp,32
 40228c0:	e13ffc15 	stw	r4,-16(fp)
 40228c4:	e17ffd15 	stw	r5,-12(fp)
 40228c8:	e1bffe15 	stw	r6,-8(fp)
 40228cc:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
 40228d0:	e0bffc17 	ldw	r2,-16(fp)
 40228d4:	10800017 	ldw	r2,0(r2)
 40228d8:	e0bff915 	stw	r2,-28(fp)

  char * ptr = buffer;
 40228dc:	e0bffd17 	ldw	r2,-12(fp)
 40228e0:	e0bff815 	stw	r2,-32(fp)
  char * end = buffer + space;
 40228e4:	e0bffe17 	ldw	r2,-8(fp)
 40228e8:	e0fffd17 	ldw	r3,-12(fp)
 40228ec:	1885883a 	add	r2,r3,r2
 40228f0:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
 40228f4:	00001206 	br	4022940 <altera_avalon_jtag_uart_read+0x8c>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 40228f8:	e0bff917 	ldw	r2,-28(fp)
 40228fc:	10800037 	ldwio	r2,0(r2)
 4022900:	e0bffb15 	stw	r2,-20(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
 4022904:	e0bffb17 	ldw	r2,-20(fp)
 4022908:	10a0000c 	andi	r2,r2,32768
 402290c:	10000626 	beq	r2,zero,4022928 <altera_avalon_jtag_uart_read+0x74>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 4022910:	e0bff817 	ldw	r2,-32(fp)
 4022914:	10c00044 	addi	r3,r2,1
 4022918:	e0fff815 	stw	r3,-32(fp)
 402291c:	e0fffb17 	ldw	r3,-20(fp)
 4022920:	10c00005 	stb	r3,0(r2)
 4022924:	00000606 	br	4022940 <altera_avalon_jtag_uart_read+0x8c>
    else if (ptr != buffer)
 4022928:	e0fff817 	ldw	r3,-32(fp)
 402292c:	e0bffd17 	ldw	r2,-12(fp)
 4022930:	1880071e 	bne	r3,r2,4022950 <altera_avalon_jtag_uart_read+0x9c>
      break;
    else if(flags & O_NONBLOCK)
 4022934:	e0bfff17 	ldw	r2,-4(fp)
 4022938:	1090000c 	andi	r2,r2,16384
 402293c:	1000061e 	bne	r2,zero,4022958 <altera_avalon_jtag_uart_read+0xa4>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
 4022940:	e0fff817 	ldw	r3,-32(fp)
 4022944:	e0bffa17 	ldw	r2,-24(fp)
 4022948:	18bfeb36 	bltu	r3,r2,40228f8 <__alt_data_end+0xfffe34f8>
 402294c:	00000306 	br	402295c <altera_avalon_jtag_uart_read+0xa8>
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
 4022950:	0001883a 	nop
 4022954:	00000106 	br	402295c <altera_avalon_jtag_uart_read+0xa8>
    else if(flags & O_NONBLOCK)
      break;   
 4022958:	0001883a 	nop
    
  }

  if (ptr != buffer)
 402295c:	e0fff817 	ldw	r3,-32(fp)
 4022960:	e0bffd17 	ldw	r2,-12(fp)
 4022964:	18800426 	beq	r3,r2,4022978 <altera_avalon_jtag_uart_read+0xc4>
    return ptr - buffer;
 4022968:	e0fff817 	ldw	r3,-32(fp)
 402296c:	e0bffd17 	ldw	r2,-12(fp)
 4022970:	1885c83a 	sub	r2,r3,r2
 4022974:	00000606 	br	4022990 <altera_avalon_jtag_uart_read+0xdc>
  else if (flags & O_NONBLOCK)
 4022978:	e0bfff17 	ldw	r2,-4(fp)
 402297c:	1090000c 	andi	r2,r2,16384
 4022980:	10000226 	beq	r2,zero,402298c <altera_avalon_jtag_uart_read+0xd8>
    return -EWOULDBLOCK;
 4022984:	00bffd44 	movi	r2,-11
 4022988:	00000106 	br	4022990 <altera_avalon_jtag_uart_read+0xdc>
  else
    return -EIO;
 402298c:	00bffec4 	movi	r2,-5
}
 4022990:	e037883a 	mov	sp,fp
 4022994:	df000017 	ldw	fp,0(sp)
 4022998:	dec00104 	addi	sp,sp,4
 402299c:	f800283a 	ret

040229a0 <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 40229a0:	defff904 	addi	sp,sp,-28
 40229a4:	df000615 	stw	fp,24(sp)
 40229a8:	df000604 	addi	fp,sp,24
 40229ac:	e13ffc15 	stw	r4,-16(fp)
 40229b0:	e17ffd15 	stw	r5,-12(fp)
 40229b4:	e1bffe15 	stw	r6,-8(fp)
 40229b8:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
 40229bc:	e0bffc17 	ldw	r2,-16(fp)
 40229c0:	10800017 	ldw	r2,0(r2)
 40229c4:	e0bffa15 	stw	r2,-24(fp)

  const char * end = ptr + count;
 40229c8:	e0bffe17 	ldw	r2,-8(fp)
 40229cc:	e0fffd17 	ldw	r3,-12(fp)
 40229d0:	1885883a 	add	r2,r3,r2
 40229d4:	e0bffb15 	stw	r2,-20(fp)

  while (ptr < end)
 40229d8:	00000e06 	br	4022a14 <altera_avalon_jtag_uart_write+0x74>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
 40229dc:	e0bffa17 	ldw	r2,-24(fp)
 40229e0:	10800104 	addi	r2,r2,4
 40229e4:	10800037 	ldwio	r2,0(r2)
 40229e8:	10bfffec 	andhi	r2,r2,65535
 40229ec:	10000926 	beq	r2,zero,4022a14 <altera_avalon_jtag_uart_write+0x74>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
 40229f0:	e0fffa17 	ldw	r3,-24(fp)
 40229f4:	e0bffd17 	ldw	r2,-12(fp)
 40229f8:	11000044 	addi	r4,r2,1
 40229fc:	e13ffd15 	stw	r4,-12(fp)
 4022a00:	10800003 	ldbu	r2,0(r2)
 4022a04:	10803fcc 	andi	r2,r2,255
 4022a08:	1080201c 	xori	r2,r2,128
 4022a0c:	10bfe004 	addi	r2,r2,-128
 4022a10:	18800035 	stwio	r2,0(r3)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
 4022a14:	e0fffd17 	ldw	r3,-12(fp)
 4022a18:	e0bffb17 	ldw	r2,-20(fp)
 4022a1c:	18bfef36 	bltu	r3,r2,40229dc <__alt_data_end+0xfffe35dc>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
 4022a20:	e0bffe17 	ldw	r2,-8(fp)
}
 4022a24:	e037883a 	mov	sp,fp
 4022a28:	df000017 	ldw	fp,0(sp)
 4022a2c:	dec00104 	addi	sp,sp,4
 4022a30:	f800283a 	ret

04022a34 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 4022a34:	defffa04 	addi	sp,sp,-24
 4022a38:	dfc00515 	stw	ra,20(sp)
 4022a3c:	df000415 	stw	fp,16(sp)
 4022a40:	df000404 	addi	fp,sp,16
 4022a44:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 4022a48:	0007883a 	mov	r3,zero
 4022a4c:	e0bfff17 	ldw	r2,-4(fp)
 4022a50:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 4022a54:	e0bfff17 	ldw	r2,-4(fp)
 4022a58:	10800104 	addi	r2,r2,4
 4022a5c:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4022a60:	0005303a 	rdctl	r2,status
 4022a64:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4022a68:	e0fffd17 	ldw	r3,-12(fp)
 4022a6c:	00bfff84 	movi	r2,-2
 4022a70:	1884703a 	and	r2,r3,r2
 4022a74:	1001703a 	wrctl	status,r2
  
  return context;
 4022a78:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 4022a7c:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
 4022a80:	40236840 	call	4023684 <alt_tick>
 4022a84:	e0bffc17 	ldw	r2,-16(fp)
 4022a88:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4022a8c:	e0bffe17 	ldw	r2,-8(fp)
 4022a90:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 4022a94:	0001883a 	nop
 4022a98:	e037883a 	mov	sp,fp
 4022a9c:	dfc00117 	ldw	ra,4(sp)
 4022aa0:	df000017 	ldw	fp,0(sp)
 4022aa4:	dec00204 	addi	sp,sp,8
 4022aa8:	f800283a 	ret

04022aac <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 4022aac:	defff804 	addi	sp,sp,-32
 4022ab0:	dfc00715 	stw	ra,28(sp)
 4022ab4:	df000615 	stw	fp,24(sp)
 4022ab8:	df000604 	addi	fp,sp,24
 4022abc:	e13ffc15 	stw	r4,-16(fp)
 4022ac0:	e17ffd15 	stw	r5,-12(fp)
 4022ac4:	e1bffe15 	stw	r6,-8(fp)
 4022ac8:	e1ffff15 	stw	r7,-4(fp)
 4022acc:	e0bfff17 	ldw	r2,-4(fp)
 4022ad0:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 4022ad4:	d0a0d217 	ldw	r2,-31928(gp)
 4022ad8:	1000021e 	bne	r2,zero,4022ae4 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
 4022adc:	e0bffb17 	ldw	r2,-20(fp)
 4022ae0:	d0a0d215 	stw	r2,-31928(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 4022ae4:	e0bffc17 	ldw	r2,-16(fp)
 4022ae8:	10800104 	addi	r2,r2,4
 4022aec:	00c001c4 	movi	r3,7
 4022af0:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 4022af4:	d8000015 	stw	zero,0(sp)
 4022af8:	e1fffc17 	ldw	r7,-16(fp)
 4022afc:	018100b4 	movhi	r6,1026
 4022b00:	318a8d04 	addi	r6,r6,10804
 4022b04:	e17ffe17 	ldw	r5,-8(fp)
 4022b08:	e13ffd17 	ldw	r4,-12(fp)
 4022b0c:	4022ee00 	call	4022ee0 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 4022b10:	0001883a 	nop
 4022b14:	e037883a 	mov	sp,fp
 4022b18:	dfc00117 	ldw	ra,4(sp)
 4022b1c:	df000017 	ldw	fp,0(sp)
 4022b20:	dec00204 	addi	sp,sp,8
 4022b24:	f800283a 	ret

04022b28 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 4022b28:	defffa04 	addi	sp,sp,-24
 4022b2c:	dfc00515 	stw	ra,20(sp)
 4022b30:	df000415 	stw	fp,16(sp)
 4022b34:	df000404 	addi	fp,sp,16
 4022b38:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
 4022b3c:	00800244 	movi	r2,9
 4022b40:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
 4022b44:	014003f4 	movhi	r5,15
 4022b48:	29509004 	addi	r5,r5,16960
 4022b4c:	e13ffd17 	ldw	r4,-12(fp)
 4022b50:	40225800 	call	4022580 <__mulsi3>
 4022b54:	100b883a 	mov	r5,r2
 4022b58:	01017db4 	movhi	r4,1526
 4022b5c:	21384004 	addi	r4,r4,-7936
 4022b60:	40224c40 	call	40224c4 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 4022b64:	100b883a 	mov	r5,r2
 4022b68:	01200034 	movhi	r4,32768
 4022b6c:	213fffc4 	addi	r4,r4,-1
 4022b70:	40224c40 	call	40224c4 <__udivsi3>
 4022b74:	100b883a 	mov	r5,r2
 4022b78:	e13fff17 	ldw	r4,-4(fp)
 4022b7c:	40224c40 	call	40224c4 <__udivsi3>
 4022b80:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 4022b84:	e0bffe17 	ldw	r2,-8(fp)
 4022b88:	10002a26 	beq	r2,zero,4022c34 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
 4022b8c:	e03ffc15 	stw	zero,-16(fp)
 4022b90:	00001706 	br	4022bf0 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 4022b94:	00a00034 	movhi	r2,32768
 4022b98:	10bfffc4 	addi	r2,r2,-1
 4022b9c:	10bfffc4 	addi	r2,r2,-1
 4022ba0:	103ffe1e 	bne	r2,zero,4022b9c <__alt_data_end+0xfffe379c>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
 4022ba4:	014003f4 	movhi	r5,15
 4022ba8:	29509004 	addi	r5,r5,16960
 4022bac:	e13ffd17 	ldw	r4,-12(fp)
 4022bb0:	40225800 	call	4022580 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 4022bb4:	100b883a 	mov	r5,r2
 4022bb8:	01017db4 	movhi	r4,1526
 4022bbc:	21384004 	addi	r4,r4,-7936
 4022bc0:	40224c40 	call	40224c4 <__udivsi3>
 4022bc4:	100b883a 	mov	r5,r2
 4022bc8:	01200034 	movhi	r4,32768
 4022bcc:	213fffc4 	addi	r4,r4,-1
 4022bd0:	40224c40 	call	40224c4 <__udivsi3>
 4022bd4:	1007883a 	mov	r3,r2
 4022bd8:	e0bfff17 	ldw	r2,-4(fp)
 4022bdc:	10c5c83a 	sub	r2,r2,r3
 4022be0:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 4022be4:	e0bffc17 	ldw	r2,-16(fp)
 4022be8:	10800044 	addi	r2,r2,1
 4022bec:	e0bffc15 	stw	r2,-16(fp)
 4022bf0:	e0fffc17 	ldw	r3,-16(fp)
 4022bf4:	e0bffe17 	ldw	r2,-8(fp)
 4022bf8:	18bfe616 	blt	r3,r2,4022b94 <__alt_data_end+0xfffe3794>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 4022bfc:	014003f4 	movhi	r5,15
 4022c00:	29509004 	addi	r5,r5,16960
 4022c04:	e13ffd17 	ldw	r4,-12(fp)
 4022c08:	40225800 	call	4022580 <__mulsi3>
 4022c0c:	100b883a 	mov	r5,r2
 4022c10:	01017db4 	movhi	r4,1526
 4022c14:	21384004 	addi	r4,r4,-7936
 4022c18:	40224c40 	call	40224c4 <__udivsi3>
 4022c1c:	e17fff17 	ldw	r5,-4(fp)
 4022c20:	1009883a 	mov	r4,r2
 4022c24:	40225800 	call	4022580 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 4022c28:	10bfffc4 	addi	r2,r2,-1
 4022c2c:	103ffe1e 	bne	r2,zero,4022c28 <__alt_data_end+0xfffe3828>
 4022c30:	00000d06 	br	4022c68 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 4022c34:	014003f4 	movhi	r5,15
 4022c38:	29509004 	addi	r5,r5,16960
 4022c3c:	e13ffd17 	ldw	r4,-12(fp)
 4022c40:	40225800 	call	4022580 <__mulsi3>
 4022c44:	100b883a 	mov	r5,r2
 4022c48:	01017db4 	movhi	r4,1526
 4022c4c:	21384004 	addi	r4,r4,-7936
 4022c50:	40224c40 	call	40224c4 <__udivsi3>
 4022c54:	e17fff17 	ldw	r5,-4(fp)
 4022c58:	1009883a 	mov	r4,r2
 4022c5c:	40225800 	call	4022580 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 4022c60:	10bfffc4 	addi	r2,r2,-1
 4022c64:	00bffe16 	blt	zero,r2,4022c60 <__alt_data_end+0xfffe3860>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 4022c68:	0005883a 	mov	r2,zero
}
 4022c6c:	e037883a 	mov	sp,fp
 4022c70:	dfc00117 	ldw	ra,4(sp)
 4022c74:	df000017 	ldw	fp,0(sp)
 4022c78:	dec00204 	addi	sp,sp,8
 4022c7c:	f800283a 	ret

04022c80 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4022c80:	defffe04 	addi	sp,sp,-8
 4022c84:	dfc00115 	stw	ra,4(sp)
 4022c88:	df000015 	stw	fp,0(sp)
 4022c8c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4022c90:	d0a00517 	ldw	r2,-32748(gp)
 4022c94:	10000326 	beq	r2,zero,4022ca4 <alt_get_errno+0x24>
 4022c98:	d0a00517 	ldw	r2,-32748(gp)
 4022c9c:	103ee83a 	callr	r2
 4022ca0:	00000106 	br	4022ca8 <alt_get_errno+0x28>
 4022ca4:	d0a0d504 	addi	r2,gp,-31916
}
 4022ca8:	e037883a 	mov	sp,fp
 4022cac:	dfc00117 	ldw	ra,4(sp)
 4022cb0:	df000017 	ldw	fp,0(sp)
 4022cb4:	dec00204 	addi	sp,sp,8
 4022cb8:	f800283a 	ret

04022cbc <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 4022cbc:	defffb04 	addi	sp,sp,-20
 4022cc0:	dfc00415 	stw	ra,16(sp)
 4022cc4:	df000315 	stw	fp,12(sp)
 4022cc8:	df000304 	addi	fp,sp,12
 4022ccc:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 4022cd0:	e0bfff17 	ldw	r2,-4(fp)
 4022cd4:	10000816 	blt	r2,zero,4022cf8 <close+0x3c>
 4022cd8:	01400304 	movi	r5,12
 4022cdc:	e13fff17 	ldw	r4,-4(fp)
 4022ce0:	40225800 	call	4022580 <__mulsi3>
 4022ce4:	1007883a 	mov	r3,r2
 4022ce8:	008100b4 	movhi	r2,1026
 4022cec:	108fa404 	addi	r2,r2,16016
 4022cf0:	1885883a 	add	r2,r3,r2
 4022cf4:	00000106 	br	4022cfc <close+0x40>
 4022cf8:	0005883a 	mov	r2,zero
 4022cfc:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 4022d00:	e0bffd17 	ldw	r2,-12(fp)
 4022d04:	10001926 	beq	r2,zero,4022d6c <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 4022d08:	e0bffd17 	ldw	r2,-12(fp)
 4022d0c:	10800017 	ldw	r2,0(r2)
 4022d10:	10800417 	ldw	r2,16(r2)
 4022d14:	10000626 	beq	r2,zero,4022d30 <close+0x74>
 4022d18:	e0bffd17 	ldw	r2,-12(fp)
 4022d1c:	10800017 	ldw	r2,0(r2)
 4022d20:	10800417 	ldw	r2,16(r2)
 4022d24:	e13ffd17 	ldw	r4,-12(fp)
 4022d28:	103ee83a 	callr	r2
 4022d2c:	00000106 	br	4022d34 <close+0x78>
 4022d30:	0005883a 	mov	r2,zero
 4022d34:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 4022d38:	e13fff17 	ldw	r4,-4(fp)
 4022d3c:	40235640 	call	4023564 <alt_release_fd>
    if (rval < 0)
 4022d40:	e0bffe17 	ldw	r2,-8(fp)
 4022d44:	1000070e 	bge	r2,zero,4022d64 <close+0xa8>
    {
      ALT_ERRNO = -rval;
 4022d48:	4022c800 	call	4022c80 <alt_get_errno>
 4022d4c:	1007883a 	mov	r3,r2
 4022d50:	e0bffe17 	ldw	r2,-8(fp)
 4022d54:	0085c83a 	sub	r2,zero,r2
 4022d58:	18800015 	stw	r2,0(r3)
      return -1;
 4022d5c:	00bfffc4 	movi	r2,-1
 4022d60:	00000706 	br	4022d80 <close+0xc4>
    }
    return 0;
 4022d64:	0005883a 	mov	r2,zero
 4022d68:	00000506 	br	4022d80 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 4022d6c:	4022c800 	call	4022c80 <alt_get_errno>
 4022d70:	1007883a 	mov	r3,r2
 4022d74:	00801444 	movi	r2,81
 4022d78:	18800015 	stw	r2,0(r3)
    return -1;
 4022d7c:	00bfffc4 	movi	r2,-1
  }
}
 4022d80:	e037883a 	mov	sp,fp
 4022d84:	dfc00117 	ldw	ra,4(sp)
 4022d88:	df000017 	ldw	fp,0(sp)
 4022d8c:	dec00204 	addi	sp,sp,8
 4022d90:	f800283a 	ret

04022d94 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 4022d94:	deffff04 	addi	sp,sp,-4
 4022d98:	df000015 	stw	fp,0(sp)
 4022d9c:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 4022da0:	0001883a 	nop
 4022da4:	e037883a 	mov	sp,fp
 4022da8:	df000017 	ldw	fp,0(sp)
 4022dac:	dec00104 	addi	sp,sp,4
 4022db0:	f800283a 	ret

04022db4 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 4022db4:	defffc04 	addi	sp,sp,-16
 4022db8:	df000315 	stw	fp,12(sp)
 4022dbc:	df000304 	addi	fp,sp,12
 4022dc0:	e13ffd15 	stw	r4,-12(fp)
 4022dc4:	e17ffe15 	stw	r5,-8(fp)
 4022dc8:	e1bfff15 	stw	r6,-4(fp)
  return len;
 4022dcc:	e0bfff17 	ldw	r2,-4(fp)
}
 4022dd0:	e037883a 	mov	sp,fp
 4022dd4:	df000017 	ldw	fp,0(sp)
 4022dd8:	dec00104 	addi	sp,sp,4
 4022ddc:	f800283a 	ret

04022de0 <alt_get_errno>:
 4022de0:	defffe04 	addi	sp,sp,-8
 4022de4:	dfc00115 	stw	ra,4(sp)
 4022de8:	df000015 	stw	fp,0(sp)
 4022dec:	d839883a 	mov	fp,sp
 4022df0:	d0a00517 	ldw	r2,-32748(gp)
 4022df4:	10000326 	beq	r2,zero,4022e04 <alt_get_errno+0x24>
 4022df8:	d0a00517 	ldw	r2,-32748(gp)
 4022dfc:	103ee83a 	callr	r2
 4022e00:	00000106 	br	4022e08 <alt_get_errno+0x28>
 4022e04:	d0a0d504 	addi	r2,gp,-31916
 4022e08:	e037883a 	mov	sp,fp
 4022e0c:	dfc00117 	ldw	ra,4(sp)
 4022e10:	df000017 	ldw	fp,0(sp)
 4022e14:	dec00204 	addi	sp,sp,8
 4022e18:	f800283a 	ret

04022e1c <alt_dev_llist_insert>:
 4022e1c:	defffa04 	addi	sp,sp,-24
 4022e20:	dfc00515 	stw	ra,20(sp)
 4022e24:	df000415 	stw	fp,16(sp)
 4022e28:	df000404 	addi	fp,sp,16
 4022e2c:	e13ffe15 	stw	r4,-8(fp)
 4022e30:	e17fff15 	stw	r5,-4(fp)
 4022e34:	e0bffe17 	ldw	r2,-8(fp)
 4022e38:	10000326 	beq	r2,zero,4022e48 <alt_dev_llist_insert+0x2c>
 4022e3c:	e0bffe17 	ldw	r2,-8(fp)
 4022e40:	10800217 	ldw	r2,8(r2)
 4022e44:	1000061e 	bne	r2,zero,4022e60 <alt_dev_llist_insert+0x44>
 4022e48:	4022de00 	call	4022de0 <alt_get_errno>
 4022e4c:	1007883a 	mov	r3,r2
 4022e50:	00800584 	movi	r2,22
 4022e54:	18800015 	stw	r2,0(r3)
 4022e58:	00bffa84 	movi	r2,-22
 4022e5c:	00001306 	br	4022eac <alt_dev_llist_insert+0x90>
 4022e60:	e0bffe17 	ldw	r2,-8(fp)
 4022e64:	e0ffff17 	ldw	r3,-4(fp)
 4022e68:	e0fffc15 	stw	r3,-16(fp)
 4022e6c:	e0bffd15 	stw	r2,-12(fp)
 4022e70:	e0bffd17 	ldw	r2,-12(fp)
 4022e74:	e0fffc17 	ldw	r3,-16(fp)
 4022e78:	10c00115 	stw	r3,4(r2)
 4022e7c:	e0bffc17 	ldw	r2,-16(fp)
 4022e80:	10c00017 	ldw	r3,0(r2)
 4022e84:	e0bffd17 	ldw	r2,-12(fp)
 4022e88:	10c00015 	stw	r3,0(r2)
 4022e8c:	e0bffc17 	ldw	r2,-16(fp)
 4022e90:	10800017 	ldw	r2,0(r2)
 4022e94:	e0fffd17 	ldw	r3,-12(fp)
 4022e98:	10c00115 	stw	r3,4(r2)
 4022e9c:	e0bffc17 	ldw	r2,-16(fp)
 4022ea0:	e0fffd17 	ldw	r3,-12(fp)
 4022ea4:	10c00015 	stw	r3,0(r2)
 4022ea8:	0005883a 	mov	r2,zero
 4022eac:	e037883a 	mov	sp,fp
 4022eb0:	dfc00117 	ldw	ra,4(sp)
 4022eb4:	df000017 	ldw	fp,0(sp)
 4022eb8:	dec00204 	addi	sp,sp,8
 4022ebc:	f800283a 	ret

04022ec0 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 4022ec0:	deffff04 	addi	sp,sp,-4
 4022ec4:	df000015 	stw	fp,0(sp)
 4022ec8:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 4022ecc:	0001883a 	nop
 4022ed0:	e037883a 	mov	sp,fp
 4022ed4:	df000017 	ldw	fp,0(sp)
 4022ed8:	dec00104 	addi	sp,sp,4
 4022edc:	f800283a 	ret

04022ee0 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 4022ee0:	defff904 	addi	sp,sp,-28
 4022ee4:	dfc00615 	stw	ra,24(sp)
 4022ee8:	df000515 	stw	fp,20(sp)
 4022eec:	df000504 	addi	fp,sp,20
 4022ef0:	e13ffc15 	stw	r4,-16(fp)
 4022ef4:	e17ffd15 	stw	r5,-12(fp)
 4022ef8:	e1bffe15 	stw	r6,-8(fp)
 4022efc:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 4022f00:	e0800217 	ldw	r2,8(fp)
 4022f04:	d8800015 	stw	r2,0(sp)
 4022f08:	e1ffff17 	ldw	r7,-4(fp)
 4022f0c:	e1bffe17 	ldw	r6,-8(fp)
 4022f10:	e17ffd17 	ldw	r5,-12(fp)
 4022f14:	e13ffc17 	ldw	r4,-16(fp)
 4022f18:	40230900 	call	4023090 <alt_iic_isr_register>
}  
 4022f1c:	e037883a 	mov	sp,fp
 4022f20:	dfc00117 	ldw	ra,4(sp)
 4022f24:	df000017 	ldw	fp,0(sp)
 4022f28:	dec00204 	addi	sp,sp,8
 4022f2c:	f800283a 	ret

04022f30 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 4022f30:	defff904 	addi	sp,sp,-28
 4022f34:	df000615 	stw	fp,24(sp)
 4022f38:	df000604 	addi	fp,sp,24
 4022f3c:	e13ffe15 	stw	r4,-8(fp)
 4022f40:	e17fff15 	stw	r5,-4(fp)
 4022f44:	e0bfff17 	ldw	r2,-4(fp)
 4022f48:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4022f4c:	0005303a 	rdctl	r2,status
 4022f50:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4022f54:	e0fffb17 	ldw	r3,-20(fp)
 4022f58:	00bfff84 	movi	r2,-2
 4022f5c:	1884703a 	and	r2,r3,r2
 4022f60:	1001703a 	wrctl	status,r2
  
  return context;
 4022f64:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 4022f68:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 4022f6c:	00c00044 	movi	r3,1
 4022f70:	e0bffa17 	ldw	r2,-24(fp)
 4022f74:	1884983a 	sll	r2,r3,r2
 4022f78:	1007883a 	mov	r3,r2
 4022f7c:	d0a0d117 	ldw	r2,-31932(gp)
 4022f80:	1884b03a 	or	r2,r3,r2
 4022f84:	d0a0d115 	stw	r2,-31932(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 4022f88:	d0a0d117 	ldw	r2,-31932(gp)
 4022f8c:	100170fa 	wrctl	ienable,r2
 4022f90:	e0bffc17 	ldw	r2,-16(fp)
 4022f94:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4022f98:	e0bffd17 	ldw	r2,-12(fp)
 4022f9c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 4022fa0:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 4022fa4:	0001883a 	nop
}
 4022fa8:	e037883a 	mov	sp,fp
 4022fac:	df000017 	ldw	fp,0(sp)
 4022fb0:	dec00104 	addi	sp,sp,4
 4022fb4:	f800283a 	ret

04022fb8 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 4022fb8:	defff904 	addi	sp,sp,-28
 4022fbc:	df000615 	stw	fp,24(sp)
 4022fc0:	df000604 	addi	fp,sp,24
 4022fc4:	e13ffe15 	stw	r4,-8(fp)
 4022fc8:	e17fff15 	stw	r5,-4(fp)
 4022fcc:	e0bfff17 	ldw	r2,-4(fp)
 4022fd0:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4022fd4:	0005303a 	rdctl	r2,status
 4022fd8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4022fdc:	e0fffb17 	ldw	r3,-20(fp)
 4022fe0:	00bfff84 	movi	r2,-2
 4022fe4:	1884703a 	and	r2,r3,r2
 4022fe8:	1001703a 	wrctl	status,r2
  
  return context;
 4022fec:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 4022ff0:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 4022ff4:	00c00044 	movi	r3,1
 4022ff8:	e0bffa17 	ldw	r2,-24(fp)
 4022ffc:	1884983a 	sll	r2,r3,r2
 4023000:	0084303a 	nor	r2,zero,r2
 4023004:	1007883a 	mov	r3,r2
 4023008:	d0a0d117 	ldw	r2,-31932(gp)
 402300c:	1884703a 	and	r2,r3,r2
 4023010:	d0a0d115 	stw	r2,-31932(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 4023014:	d0a0d117 	ldw	r2,-31932(gp)
 4023018:	100170fa 	wrctl	ienable,r2
 402301c:	e0bffc17 	ldw	r2,-16(fp)
 4023020:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4023024:	e0bffd17 	ldw	r2,-12(fp)
 4023028:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 402302c:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 4023030:	0001883a 	nop
}
 4023034:	e037883a 	mov	sp,fp
 4023038:	df000017 	ldw	fp,0(sp)
 402303c:	dec00104 	addi	sp,sp,4
 4023040:	f800283a 	ret

04023044 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 4023044:	defffc04 	addi	sp,sp,-16
 4023048:	df000315 	stw	fp,12(sp)
 402304c:	df000304 	addi	fp,sp,12
 4023050:	e13ffe15 	stw	r4,-8(fp)
 4023054:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 4023058:	000530fa 	rdctl	r2,ienable
 402305c:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 4023060:	00c00044 	movi	r3,1
 4023064:	e0bfff17 	ldw	r2,-4(fp)
 4023068:	1884983a 	sll	r2,r3,r2
 402306c:	1007883a 	mov	r3,r2
 4023070:	e0bffd17 	ldw	r2,-12(fp)
 4023074:	1884703a 	and	r2,r3,r2
 4023078:	1004c03a 	cmpne	r2,r2,zero
 402307c:	10803fcc 	andi	r2,r2,255
}
 4023080:	e037883a 	mov	sp,fp
 4023084:	df000017 	ldw	fp,0(sp)
 4023088:	dec00104 	addi	sp,sp,4
 402308c:	f800283a 	ret

04023090 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 4023090:	defff504 	addi	sp,sp,-44
 4023094:	dfc00a15 	stw	ra,40(sp)
 4023098:	df000915 	stw	fp,36(sp)
 402309c:	df000904 	addi	fp,sp,36
 40230a0:	e13ffc15 	stw	r4,-16(fp)
 40230a4:	e17ffd15 	stw	r5,-12(fp)
 40230a8:	e1bffe15 	stw	r6,-8(fp)
 40230ac:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 40230b0:	00bffa84 	movi	r2,-22
 40230b4:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 40230b8:	e0bffd17 	ldw	r2,-12(fp)
 40230bc:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 40230c0:	e0bff817 	ldw	r2,-32(fp)
 40230c4:	10800808 	cmpgei	r2,r2,32
 40230c8:	1000271e 	bne	r2,zero,4023168 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40230cc:	0005303a 	rdctl	r2,status
 40230d0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40230d4:	e0fffb17 	ldw	r3,-20(fp)
 40230d8:	00bfff84 	movi	r2,-2
 40230dc:	1884703a 	and	r2,r3,r2
 40230e0:	1001703a 	wrctl	status,r2
  
  return context;
 40230e4:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 40230e8:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
 40230ec:	008100b4 	movhi	r2,1026
 40230f0:	10911204 	addi	r2,r2,17480
 40230f4:	e0fff817 	ldw	r3,-32(fp)
 40230f8:	180690fa 	slli	r3,r3,3
 40230fc:	10c5883a 	add	r2,r2,r3
 4023100:	e0fffe17 	ldw	r3,-8(fp)
 4023104:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 4023108:	008100b4 	movhi	r2,1026
 402310c:	10911204 	addi	r2,r2,17480
 4023110:	e0fff817 	ldw	r3,-32(fp)
 4023114:	180690fa 	slli	r3,r3,3
 4023118:	10c5883a 	add	r2,r2,r3
 402311c:	10800104 	addi	r2,r2,4
 4023120:	e0ffff17 	ldw	r3,-4(fp)
 4023124:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 4023128:	e0bffe17 	ldw	r2,-8(fp)
 402312c:	10000526 	beq	r2,zero,4023144 <alt_iic_isr_register+0xb4>
 4023130:	e0bff817 	ldw	r2,-32(fp)
 4023134:	100b883a 	mov	r5,r2
 4023138:	e13ffc17 	ldw	r4,-16(fp)
 402313c:	4022f300 	call	4022f30 <alt_ic_irq_enable>
 4023140:	00000406 	br	4023154 <alt_iic_isr_register+0xc4>
 4023144:	e0bff817 	ldw	r2,-32(fp)
 4023148:	100b883a 	mov	r5,r2
 402314c:	e13ffc17 	ldw	r4,-16(fp)
 4023150:	4022fb80 	call	4022fb8 <alt_ic_irq_disable>
 4023154:	e0bff715 	stw	r2,-36(fp)
 4023158:	e0bffa17 	ldw	r2,-24(fp)
 402315c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4023160:	e0bff917 	ldw	r2,-28(fp)
 4023164:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 4023168:	e0bff717 	ldw	r2,-36(fp)
}
 402316c:	e037883a 	mov	sp,fp
 4023170:	dfc00117 	ldw	ra,4(sp)
 4023174:	df000017 	ldw	fp,0(sp)
 4023178:	dec00204 	addi	sp,sp,8
 402317c:	f800283a 	ret

04023180 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 4023180:	defff804 	addi	sp,sp,-32
 4023184:	dfc00715 	stw	ra,28(sp)
 4023188:	df000615 	stw	fp,24(sp)
 402318c:	dc000515 	stw	r16,20(sp)
 4023190:	df000604 	addi	fp,sp,24
 4023194:	e13ffb15 	stw	r4,-20(fp)
 4023198:	e17ffc15 	stw	r5,-16(fp)
 402319c:	e1bffd15 	stw	r6,-12(fp)
 40231a0:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
 40231a4:	e1bffe17 	ldw	r6,-8(fp)
 40231a8:	e17ffd17 	ldw	r5,-12(fp)
 40231ac:	e13ffc17 	ldw	r4,-16(fp)
 40231b0:	40234080 	call	4023408 <open>
 40231b4:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
 40231b8:	e0bffa17 	ldw	r2,-24(fp)
 40231bc:	10002216 	blt	r2,zero,4023248 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
 40231c0:	040100b4 	movhi	r16,1026
 40231c4:	840fa404 	addi	r16,r16,16016
 40231c8:	e0bffa17 	ldw	r2,-24(fp)
 40231cc:	01400304 	movi	r5,12
 40231d0:	1009883a 	mov	r4,r2
 40231d4:	40225800 	call	4022580 <__mulsi3>
 40231d8:	8085883a 	add	r2,r16,r2
 40231dc:	10c00017 	ldw	r3,0(r2)
 40231e0:	e0bffb17 	ldw	r2,-20(fp)
 40231e4:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 40231e8:	040100b4 	movhi	r16,1026
 40231ec:	840fa404 	addi	r16,r16,16016
 40231f0:	e0bffa17 	ldw	r2,-24(fp)
 40231f4:	01400304 	movi	r5,12
 40231f8:	1009883a 	mov	r4,r2
 40231fc:	40225800 	call	4022580 <__mulsi3>
 4023200:	8085883a 	add	r2,r16,r2
 4023204:	10800104 	addi	r2,r2,4
 4023208:	10c00017 	ldw	r3,0(r2)
 402320c:	e0bffb17 	ldw	r2,-20(fp)
 4023210:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 4023214:	040100b4 	movhi	r16,1026
 4023218:	840fa404 	addi	r16,r16,16016
 402321c:	e0bffa17 	ldw	r2,-24(fp)
 4023220:	01400304 	movi	r5,12
 4023224:	1009883a 	mov	r4,r2
 4023228:	40225800 	call	4022580 <__mulsi3>
 402322c:	8085883a 	add	r2,r16,r2
 4023230:	10800204 	addi	r2,r2,8
 4023234:	10c00017 	ldw	r3,0(r2)
 4023238:	e0bffb17 	ldw	r2,-20(fp)
 402323c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 4023240:	e13ffa17 	ldw	r4,-24(fp)
 4023244:	40235640 	call	4023564 <alt_release_fd>
  }
} 
 4023248:	0001883a 	nop
 402324c:	e6ffff04 	addi	sp,fp,-4
 4023250:	dfc00217 	ldw	ra,8(sp)
 4023254:	df000117 	ldw	fp,4(sp)
 4023258:	dc000017 	ldw	r16,0(sp)
 402325c:	dec00304 	addi	sp,sp,12
 4023260:	f800283a 	ret

04023264 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 4023264:	defffb04 	addi	sp,sp,-20
 4023268:	dfc00415 	stw	ra,16(sp)
 402326c:	df000315 	stw	fp,12(sp)
 4023270:	df000304 	addi	fp,sp,12
 4023274:	e13ffd15 	stw	r4,-12(fp)
 4023278:	e17ffe15 	stw	r5,-8(fp)
 402327c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 4023280:	01c07fc4 	movi	r7,511
 4023284:	01800044 	movi	r6,1
 4023288:	e17ffd17 	ldw	r5,-12(fp)
 402328c:	010100b4 	movhi	r4,1026
 4023290:	210fa704 	addi	r4,r4,16028
 4023294:	40231800 	call	4023180 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 4023298:	01c07fc4 	movi	r7,511
 402329c:	000d883a 	mov	r6,zero
 40232a0:	e17ffe17 	ldw	r5,-8(fp)
 40232a4:	010100b4 	movhi	r4,1026
 40232a8:	210fa404 	addi	r4,r4,16016
 40232ac:	40231800 	call	4023180 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 40232b0:	01c07fc4 	movi	r7,511
 40232b4:	01800044 	movi	r6,1
 40232b8:	e17fff17 	ldw	r5,-4(fp)
 40232bc:	010100b4 	movhi	r4,1026
 40232c0:	210faa04 	addi	r4,r4,16040
 40232c4:	40231800 	call	4023180 <alt_open_fd>
}  
 40232c8:	0001883a 	nop
 40232cc:	e037883a 	mov	sp,fp
 40232d0:	dfc00117 	ldw	ra,4(sp)
 40232d4:	df000017 	ldw	fp,0(sp)
 40232d8:	dec00204 	addi	sp,sp,8
 40232dc:	f800283a 	ret

040232e0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 40232e0:	defffe04 	addi	sp,sp,-8
 40232e4:	dfc00115 	stw	ra,4(sp)
 40232e8:	df000015 	stw	fp,0(sp)
 40232ec:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 40232f0:	d0a00517 	ldw	r2,-32748(gp)
 40232f4:	10000326 	beq	r2,zero,4023304 <alt_get_errno+0x24>
 40232f8:	d0a00517 	ldw	r2,-32748(gp)
 40232fc:	103ee83a 	callr	r2
 4023300:	00000106 	br	4023308 <alt_get_errno+0x28>
 4023304:	d0a0d504 	addi	r2,gp,-31916
}
 4023308:	e037883a 	mov	sp,fp
 402330c:	dfc00117 	ldw	ra,4(sp)
 4023310:	df000017 	ldw	fp,0(sp)
 4023314:	dec00204 	addi	sp,sp,8
 4023318:	f800283a 	ret

0402331c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 402331c:	defffb04 	addi	sp,sp,-20
 4023320:	dfc00415 	stw	ra,16(sp)
 4023324:	df000315 	stw	fp,12(sp)
 4023328:	dc000215 	stw	r16,8(sp)
 402332c:	df000304 	addi	fp,sp,12
 4023330:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 4023334:	e0bffe17 	ldw	r2,-8(fp)
 4023338:	10800217 	ldw	r2,8(r2)
 402333c:	10d00034 	orhi	r3,r2,16384
 4023340:	e0bffe17 	ldw	r2,-8(fp)
 4023344:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 4023348:	e03ffd15 	stw	zero,-12(fp)
 402334c:	00002306 	br	40233dc <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 4023350:	040100b4 	movhi	r16,1026
 4023354:	840fa404 	addi	r16,r16,16016
 4023358:	e0bffd17 	ldw	r2,-12(fp)
 402335c:	01400304 	movi	r5,12
 4023360:	1009883a 	mov	r4,r2
 4023364:	40225800 	call	4022580 <__mulsi3>
 4023368:	8085883a 	add	r2,r16,r2
 402336c:	10c00017 	ldw	r3,0(r2)
 4023370:	e0bffe17 	ldw	r2,-8(fp)
 4023374:	10800017 	ldw	r2,0(r2)
 4023378:	1880151e 	bne	r3,r2,40233d0 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 402337c:	040100b4 	movhi	r16,1026
 4023380:	840fa404 	addi	r16,r16,16016
 4023384:	e0bffd17 	ldw	r2,-12(fp)
 4023388:	01400304 	movi	r5,12
 402338c:	1009883a 	mov	r4,r2
 4023390:	40225800 	call	4022580 <__mulsi3>
 4023394:	8085883a 	add	r2,r16,r2
 4023398:	10800204 	addi	r2,r2,8
 402339c:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 40233a0:	10000b0e 	bge	r2,zero,40233d0 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 40233a4:	01400304 	movi	r5,12
 40233a8:	e13ffd17 	ldw	r4,-12(fp)
 40233ac:	40225800 	call	4022580 <__mulsi3>
 40233b0:	1007883a 	mov	r3,r2
 40233b4:	008100b4 	movhi	r2,1026
 40233b8:	108fa404 	addi	r2,r2,16016
 40233bc:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 40233c0:	e0bffe17 	ldw	r2,-8(fp)
 40233c4:	18800226 	beq	r3,r2,40233d0 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 40233c8:	00bffcc4 	movi	r2,-13
 40233cc:	00000806 	br	40233f0 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 40233d0:	e0bffd17 	ldw	r2,-12(fp)
 40233d4:	10800044 	addi	r2,r2,1
 40233d8:	e0bffd15 	stw	r2,-12(fp)
 40233dc:	d0a00417 	ldw	r2,-32752(gp)
 40233e0:	1007883a 	mov	r3,r2
 40233e4:	e0bffd17 	ldw	r2,-12(fp)
 40233e8:	18bfd92e 	bgeu	r3,r2,4023350 <__alt_data_end+0xfffe3f50>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 40233ec:	0005883a 	mov	r2,zero
}
 40233f0:	e6ffff04 	addi	sp,fp,-4
 40233f4:	dfc00217 	ldw	ra,8(sp)
 40233f8:	df000117 	ldw	fp,4(sp)
 40233fc:	dc000017 	ldw	r16,0(sp)
 4023400:	dec00304 	addi	sp,sp,12
 4023404:	f800283a 	ret

04023408 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 4023408:	defff604 	addi	sp,sp,-40
 402340c:	dfc00915 	stw	ra,36(sp)
 4023410:	df000815 	stw	fp,32(sp)
 4023414:	df000804 	addi	fp,sp,32
 4023418:	e13ffd15 	stw	r4,-12(fp)
 402341c:	e17ffe15 	stw	r5,-8(fp)
 4023420:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 4023424:	00bfffc4 	movi	r2,-1
 4023428:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 402342c:	00bffb44 	movi	r2,-19
 4023430:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 4023434:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 4023438:	d1600204 	addi	r5,gp,-32760
 402343c:	e13ffd17 	ldw	r4,-12(fp)
 4023440:	40237b00 	call	40237b0 <alt_find_dev>
 4023444:	e0bff815 	stw	r2,-32(fp)
 4023448:	e0bff817 	ldw	r2,-32(fp)
 402344c:	1000051e 	bne	r2,zero,4023464 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 4023450:	e13ffd17 	ldw	r4,-12(fp)
 4023454:	40238400 	call	4023840 <alt_find_file>
 4023458:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 402345c:	00800044 	movi	r2,1
 4023460:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 4023464:	e0bff817 	ldw	r2,-32(fp)
 4023468:	10002b26 	beq	r2,zero,4023518 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
 402346c:	e13ff817 	ldw	r4,-32(fp)
 4023470:	40239480 	call	4023948 <alt_get_fd>
 4023474:	e0bff915 	stw	r2,-28(fp)
 4023478:	e0bff917 	ldw	r2,-28(fp)
 402347c:	1000030e 	bge	r2,zero,402348c <open+0x84>
    {
      status = index;
 4023480:	e0bff917 	ldw	r2,-28(fp)
 4023484:	e0bffa15 	stw	r2,-24(fp)
 4023488:	00002506 	br	4023520 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
 402348c:	01400304 	movi	r5,12
 4023490:	e13ff917 	ldw	r4,-28(fp)
 4023494:	40225800 	call	4022580 <__mulsi3>
 4023498:	1007883a 	mov	r3,r2
 402349c:	008100b4 	movhi	r2,1026
 40234a0:	108fa404 	addi	r2,r2,16016
 40234a4:	1885883a 	add	r2,r3,r2
 40234a8:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 40234ac:	e0fffe17 	ldw	r3,-8(fp)
 40234b0:	00900034 	movhi	r2,16384
 40234b4:	10bfffc4 	addi	r2,r2,-1
 40234b8:	1886703a 	and	r3,r3,r2
 40234bc:	e0bffc17 	ldw	r2,-16(fp)
 40234c0:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 40234c4:	e0bffb17 	ldw	r2,-20(fp)
 40234c8:	1000051e 	bne	r2,zero,40234e0 <open+0xd8>
 40234cc:	e13ffc17 	ldw	r4,-16(fp)
 40234d0:	402331c0 	call	402331c <alt_file_locked>
 40234d4:	e0bffa15 	stw	r2,-24(fp)
 40234d8:	e0bffa17 	ldw	r2,-24(fp)
 40234dc:	10001016 	blt	r2,zero,4023520 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 40234e0:	e0bff817 	ldw	r2,-32(fp)
 40234e4:	10800317 	ldw	r2,12(r2)
 40234e8:	10000826 	beq	r2,zero,402350c <open+0x104>
 40234ec:	e0bff817 	ldw	r2,-32(fp)
 40234f0:	10800317 	ldw	r2,12(r2)
 40234f4:	e1ffff17 	ldw	r7,-4(fp)
 40234f8:	e1bffe17 	ldw	r6,-8(fp)
 40234fc:	e17ffd17 	ldw	r5,-12(fp)
 4023500:	e13ffc17 	ldw	r4,-16(fp)
 4023504:	103ee83a 	callr	r2
 4023508:	00000106 	br	4023510 <open+0x108>
 402350c:	0005883a 	mov	r2,zero
 4023510:	e0bffa15 	stw	r2,-24(fp)
 4023514:	00000206 	br	4023520 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
 4023518:	00bffb44 	movi	r2,-19
 402351c:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 4023520:	e0bffa17 	ldw	r2,-24(fp)
 4023524:	1000090e 	bge	r2,zero,402354c <open+0x144>
  {
    alt_release_fd (index);  
 4023528:	e13ff917 	ldw	r4,-28(fp)
 402352c:	40235640 	call	4023564 <alt_release_fd>
    ALT_ERRNO = -status;
 4023530:	40232e00 	call	40232e0 <alt_get_errno>
 4023534:	1007883a 	mov	r3,r2
 4023538:	e0bffa17 	ldw	r2,-24(fp)
 402353c:	0085c83a 	sub	r2,zero,r2
 4023540:	18800015 	stw	r2,0(r3)
    return -1;
 4023544:	00bfffc4 	movi	r2,-1
 4023548:	00000106 	br	4023550 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
 402354c:	e0bff917 	ldw	r2,-28(fp)
}
 4023550:	e037883a 	mov	sp,fp
 4023554:	dfc00117 	ldw	ra,4(sp)
 4023558:	df000017 	ldw	fp,0(sp)
 402355c:	dec00204 	addi	sp,sp,8
 4023560:	f800283a 	ret

04023564 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 4023564:	defffc04 	addi	sp,sp,-16
 4023568:	dfc00315 	stw	ra,12(sp)
 402356c:	df000215 	stw	fp,8(sp)
 4023570:	dc000115 	stw	r16,4(sp)
 4023574:	df000204 	addi	fp,sp,8
 4023578:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
 402357c:	e0bffe17 	ldw	r2,-8(fp)
 4023580:	108000d0 	cmplti	r2,r2,3
 4023584:	1000111e 	bne	r2,zero,40235cc <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
 4023588:	040100b4 	movhi	r16,1026
 402358c:	840fa404 	addi	r16,r16,16016
 4023590:	e0bffe17 	ldw	r2,-8(fp)
 4023594:	01400304 	movi	r5,12
 4023598:	1009883a 	mov	r4,r2
 402359c:	40225800 	call	4022580 <__mulsi3>
 40235a0:	8085883a 	add	r2,r16,r2
 40235a4:	10800204 	addi	r2,r2,8
 40235a8:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 40235ac:	040100b4 	movhi	r16,1026
 40235b0:	840fa404 	addi	r16,r16,16016
 40235b4:	e0bffe17 	ldw	r2,-8(fp)
 40235b8:	01400304 	movi	r5,12
 40235bc:	1009883a 	mov	r4,r2
 40235c0:	40225800 	call	4022580 <__mulsi3>
 40235c4:	8085883a 	add	r2,r16,r2
 40235c8:	10000015 	stw	zero,0(r2)
  }
}
 40235cc:	0001883a 	nop
 40235d0:	e6ffff04 	addi	sp,fp,-4
 40235d4:	dfc00217 	ldw	ra,8(sp)
 40235d8:	df000117 	ldw	fp,4(sp)
 40235dc:	dc000017 	ldw	r16,0(sp)
 40235e0:	dec00304 	addi	sp,sp,12
 40235e4:	f800283a 	ret

040235e8 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 40235e8:	defffa04 	addi	sp,sp,-24
 40235ec:	df000515 	stw	fp,20(sp)
 40235f0:	df000504 	addi	fp,sp,20
 40235f4:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40235f8:	0005303a 	rdctl	r2,status
 40235fc:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4023600:	e0fffc17 	ldw	r3,-16(fp)
 4023604:	00bfff84 	movi	r2,-2
 4023608:	1884703a 	and	r2,r3,r2
 402360c:	1001703a 	wrctl	status,r2
  
  return context;
 4023610:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 4023614:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 4023618:	e0bfff17 	ldw	r2,-4(fp)
 402361c:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 4023620:	e0bffd17 	ldw	r2,-12(fp)
 4023624:	10800017 	ldw	r2,0(r2)
 4023628:	e0fffd17 	ldw	r3,-12(fp)
 402362c:	18c00117 	ldw	r3,4(r3)
 4023630:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 4023634:	e0bffd17 	ldw	r2,-12(fp)
 4023638:	10800117 	ldw	r2,4(r2)
 402363c:	e0fffd17 	ldw	r3,-12(fp)
 4023640:	18c00017 	ldw	r3,0(r3)
 4023644:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 4023648:	e0bffd17 	ldw	r2,-12(fp)
 402364c:	e0fffd17 	ldw	r3,-12(fp)
 4023650:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 4023654:	e0bffd17 	ldw	r2,-12(fp)
 4023658:	e0fffd17 	ldw	r3,-12(fp)
 402365c:	10c00015 	stw	r3,0(r2)
 4023660:	e0bffb17 	ldw	r2,-20(fp)
 4023664:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4023668:	e0bffe17 	ldw	r2,-8(fp)
 402366c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 4023670:	0001883a 	nop
 4023674:	e037883a 	mov	sp,fp
 4023678:	df000017 	ldw	fp,0(sp)
 402367c:	dec00104 	addi	sp,sp,4
 4023680:	f800283a 	ret

04023684 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 4023684:	defffb04 	addi	sp,sp,-20
 4023688:	dfc00415 	stw	ra,16(sp)
 402368c:	df000315 	stw	fp,12(sp)
 4023690:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 4023694:	d0a00717 	ldw	r2,-32740(gp)
 4023698:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 402369c:	d0a0d317 	ldw	r2,-31924(gp)
 40236a0:	10800044 	addi	r2,r2,1
 40236a4:	d0a0d315 	stw	r2,-31924(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 40236a8:	00002e06 	br	4023764 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 40236ac:	e0bffd17 	ldw	r2,-12(fp)
 40236b0:	10800017 	ldw	r2,0(r2)
 40236b4:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 40236b8:	e0bffd17 	ldw	r2,-12(fp)
 40236bc:	10800403 	ldbu	r2,16(r2)
 40236c0:	10803fcc 	andi	r2,r2,255
 40236c4:	10000426 	beq	r2,zero,40236d8 <alt_tick+0x54>
 40236c8:	d0a0d317 	ldw	r2,-31924(gp)
 40236cc:	1000021e 	bne	r2,zero,40236d8 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 40236d0:	e0bffd17 	ldw	r2,-12(fp)
 40236d4:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 40236d8:	e0bffd17 	ldw	r2,-12(fp)
 40236dc:	10800217 	ldw	r2,8(r2)
 40236e0:	d0e0d317 	ldw	r3,-31924(gp)
 40236e4:	18801d36 	bltu	r3,r2,402375c <alt_tick+0xd8>
 40236e8:	e0bffd17 	ldw	r2,-12(fp)
 40236ec:	10800403 	ldbu	r2,16(r2)
 40236f0:	10803fcc 	andi	r2,r2,255
 40236f4:	1000191e 	bne	r2,zero,402375c <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 40236f8:	e0bffd17 	ldw	r2,-12(fp)
 40236fc:	10800317 	ldw	r2,12(r2)
 4023700:	e0fffd17 	ldw	r3,-12(fp)
 4023704:	18c00517 	ldw	r3,20(r3)
 4023708:	1809883a 	mov	r4,r3
 402370c:	103ee83a 	callr	r2
 4023710:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 4023714:	e0bfff17 	ldw	r2,-4(fp)
 4023718:	1000031e 	bne	r2,zero,4023728 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 402371c:	e13ffd17 	ldw	r4,-12(fp)
 4023720:	40235e80 	call	40235e8 <alt_alarm_stop>
 4023724:	00000d06 	br	402375c <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 4023728:	e0bffd17 	ldw	r2,-12(fp)
 402372c:	10c00217 	ldw	r3,8(r2)
 4023730:	e0bfff17 	ldw	r2,-4(fp)
 4023734:	1887883a 	add	r3,r3,r2
 4023738:	e0bffd17 	ldw	r2,-12(fp)
 402373c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 4023740:	e0bffd17 	ldw	r2,-12(fp)
 4023744:	10c00217 	ldw	r3,8(r2)
 4023748:	d0a0d317 	ldw	r2,-31924(gp)
 402374c:	1880032e 	bgeu	r3,r2,402375c <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 4023750:	e0bffd17 	ldw	r2,-12(fp)
 4023754:	00c00044 	movi	r3,1
 4023758:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 402375c:	e0bffe17 	ldw	r2,-8(fp)
 4023760:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 4023764:	e0fffd17 	ldw	r3,-12(fp)
 4023768:	d0a00704 	addi	r2,gp,-32740
 402376c:	18bfcf1e 	bne	r3,r2,40236ac <__alt_data_end+0xfffe42ac>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 4023770:	0001883a 	nop
}
 4023774:	0001883a 	nop
 4023778:	e037883a 	mov	sp,fp
 402377c:	dfc00117 	ldw	ra,4(sp)
 4023780:	df000017 	ldw	fp,0(sp)
 4023784:	dec00204 	addi	sp,sp,8
 4023788:	f800283a 	ret

0402378c <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 402378c:	deffff04 	addi	sp,sp,-4
 4023790:	df000015 	stw	fp,0(sp)
 4023794:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 4023798:	000170fa 	wrctl	ienable,zero
}
 402379c:	0001883a 	nop
 40237a0:	e037883a 	mov	sp,fp
 40237a4:	df000017 	ldw	fp,0(sp)
 40237a8:	dec00104 	addi	sp,sp,4
 40237ac:	f800283a 	ret

040237b0 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 40237b0:	defffa04 	addi	sp,sp,-24
 40237b4:	dfc00515 	stw	ra,20(sp)
 40237b8:	df000415 	stw	fp,16(sp)
 40237bc:	df000404 	addi	fp,sp,16
 40237c0:	e13ffe15 	stw	r4,-8(fp)
 40237c4:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 40237c8:	e0bfff17 	ldw	r2,-4(fp)
 40237cc:	10800017 	ldw	r2,0(r2)
 40237d0:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 40237d4:	e13ffe17 	ldw	r4,-8(fp)
 40237d8:	4023af80 	call	4023af8 <strlen>
 40237dc:	10800044 	addi	r2,r2,1
 40237e0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 40237e4:	00000d06 	br	402381c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 40237e8:	e0bffc17 	ldw	r2,-16(fp)
 40237ec:	10800217 	ldw	r2,8(r2)
 40237f0:	e0fffd17 	ldw	r3,-12(fp)
 40237f4:	180d883a 	mov	r6,r3
 40237f8:	e17ffe17 	ldw	r5,-8(fp)
 40237fc:	1009883a 	mov	r4,r2
 4023800:	4023ac80 	call	4023ac8 <memcmp>
 4023804:	1000021e 	bne	r2,zero,4023810 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 4023808:	e0bffc17 	ldw	r2,-16(fp)
 402380c:	00000706 	br	402382c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 4023810:	e0bffc17 	ldw	r2,-16(fp)
 4023814:	10800017 	ldw	r2,0(r2)
 4023818:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 402381c:	e0fffc17 	ldw	r3,-16(fp)
 4023820:	e0bfff17 	ldw	r2,-4(fp)
 4023824:	18bff01e 	bne	r3,r2,40237e8 <__alt_data_end+0xfffe43e8>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 4023828:	0005883a 	mov	r2,zero
}
 402382c:	e037883a 	mov	sp,fp
 4023830:	dfc00117 	ldw	ra,4(sp)
 4023834:	df000017 	ldw	fp,0(sp)
 4023838:	dec00204 	addi	sp,sp,8
 402383c:	f800283a 	ret

04023840 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 4023840:	defffb04 	addi	sp,sp,-20
 4023844:	dfc00415 	stw	ra,16(sp)
 4023848:	df000315 	stw	fp,12(sp)
 402384c:	df000304 	addi	fp,sp,12
 4023850:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 4023854:	d0a00017 	ldw	r2,-32768(gp)
 4023858:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 402385c:	00003106 	br	4023924 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 4023860:	e0bffd17 	ldw	r2,-12(fp)
 4023864:	10800217 	ldw	r2,8(r2)
 4023868:	1009883a 	mov	r4,r2
 402386c:	4023af80 	call	4023af8 <strlen>
 4023870:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 4023874:	e0bffd17 	ldw	r2,-12(fp)
 4023878:	10c00217 	ldw	r3,8(r2)
 402387c:	e0bffe17 	ldw	r2,-8(fp)
 4023880:	10bfffc4 	addi	r2,r2,-1
 4023884:	1885883a 	add	r2,r3,r2
 4023888:	10800003 	ldbu	r2,0(r2)
 402388c:	10803fcc 	andi	r2,r2,255
 4023890:	1080201c 	xori	r2,r2,128
 4023894:	10bfe004 	addi	r2,r2,-128
 4023898:	10800bd8 	cmpnei	r2,r2,47
 402389c:	1000031e 	bne	r2,zero,40238ac <alt_find_file+0x6c>
    {
      len -= 1;
 40238a0:	e0bffe17 	ldw	r2,-8(fp)
 40238a4:	10bfffc4 	addi	r2,r2,-1
 40238a8:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 40238ac:	e0bffe17 	ldw	r2,-8(fp)
 40238b0:	e0ffff17 	ldw	r3,-4(fp)
 40238b4:	1885883a 	add	r2,r3,r2
 40238b8:	10800003 	ldbu	r2,0(r2)
 40238bc:	10803fcc 	andi	r2,r2,255
 40238c0:	1080201c 	xori	r2,r2,128
 40238c4:	10bfe004 	addi	r2,r2,-128
 40238c8:	10800be0 	cmpeqi	r2,r2,47
 40238cc:	1000081e 	bne	r2,zero,40238f0 <alt_find_file+0xb0>
 40238d0:	e0bffe17 	ldw	r2,-8(fp)
 40238d4:	e0ffff17 	ldw	r3,-4(fp)
 40238d8:	1885883a 	add	r2,r3,r2
 40238dc:	10800003 	ldbu	r2,0(r2)
 40238e0:	10803fcc 	andi	r2,r2,255
 40238e4:	1080201c 	xori	r2,r2,128
 40238e8:	10bfe004 	addi	r2,r2,-128
 40238ec:	10000a1e 	bne	r2,zero,4023918 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 40238f0:	e0bffd17 	ldw	r2,-12(fp)
 40238f4:	10800217 	ldw	r2,8(r2)
 40238f8:	e0fffe17 	ldw	r3,-8(fp)
 40238fc:	180d883a 	mov	r6,r3
 4023900:	e17fff17 	ldw	r5,-4(fp)
 4023904:	1009883a 	mov	r4,r2
 4023908:	4023ac80 	call	4023ac8 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 402390c:	1000021e 	bne	r2,zero,4023918 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 4023910:	e0bffd17 	ldw	r2,-12(fp)
 4023914:	00000706 	br	4023934 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 4023918:	e0bffd17 	ldw	r2,-12(fp)
 402391c:	10800017 	ldw	r2,0(r2)
 4023920:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 4023924:	e0fffd17 	ldw	r3,-12(fp)
 4023928:	d0a00004 	addi	r2,gp,-32768
 402392c:	18bfcc1e 	bne	r3,r2,4023860 <__alt_data_end+0xfffe4460>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 4023930:	0005883a 	mov	r2,zero
}
 4023934:	e037883a 	mov	sp,fp
 4023938:	dfc00117 	ldw	ra,4(sp)
 402393c:	df000017 	ldw	fp,0(sp)
 4023940:	dec00204 	addi	sp,sp,8
 4023944:	f800283a 	ret

04023948 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 4023948:	defffa04 	addi	sp,sp,-24
 402394c:	dfc00515 	stw	ra,20(sp)
 4023950:	df000415 	stw	fp,16(sp)
 4023954:	dc000315 	stw	r16,12(sp)
 4023958:	df000404 	addi	fp,sp,16
 402395c:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
 4023960:	00bffa04 	movi	r2,-24
 4023964:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 4023968:	e03ffc15 	stw	zero,-16(fp)
 402396c:	00001d06 	br	40239e4 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
 4023970:	040100b4 	movhi	r16,1026
 4023974:	840fa404 	addi	r16,r16,16016
 4023978:	e0bffc17 	ldw	r2,-16(fp)
 402397c:	01400304 	movi	r5,12
 4023980:	1009883a 	mov	r4,r2
 4023984:	40225800 	call	4022580 <__mulsi3>
 4023988:	8085883a 	add	r2,r16,r2
 402398c:	10800017 	ldw	r2,0(r2)
 4023990:	1000111e 	bne	r2,zero,40239d8 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
 4023994:	040100b4 	movhi	r16,1026
 4023998:	840fa404 	addi	r16,r16,16016
 402399c:	e0bffc17 	ldw	r2,-16(fp)
 40239a0:	01400304 	movi	r5,12
 40239a4:	1009883a 	mov	r4,r2
 40239a8:	40225800 	call	4022580 <__mulsi3>
 40239ac:	8085883a 	add	r2,r16,r2
 40239b0:	e0fffe17 	ldw	r3,-8(fp)
 40239b4:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 40239b8:	d0e00417 	ldw	r3,-32752(gp)
 40239bc:	e0bffc17 	ldw	r2,-16(fp)
 40239c0:	1880020e 	bge	r3,r2,40239cc <alt_get_fd+0x84>
      {
        alt_max_fd = i;
 40239c4:	e0bffc17 	ldw	r2,-16(fp)
 40239c8:	d0a00415 	stw	r2,-32752(gp)
      }
      rc = i;
 40239cc:	e0bffc17 	ldw	r2,-16(fp)
 40239d0:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
 40239d4:	00000606 	br	40239f0 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 40239d8:	e0bffc17 	ldw	r2,-16(fp)
 40239dc:	10800044 	addi	r2,r2,1
 40239e0:	e0bffc15 	stw	r2,-16(fp)
 40239e4:	e0bffc17 	ldw	r2,-16(fp)
 40239e8:	10800810 	cmplti	r2,r2,32
 40239ec:	103fe01e 	bne	r2,zero,4023970 <__alt_data_end+0xfffe4570>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 40239f0:	e0bffd17 	ldw	r2,-12(fp)
}
 40239f4:	e6ffff04 	addi	sp,fp,-4
 40239f8:	dfc00217 	ldw	ra,8(sp)
 40239fc:	df000117 	ldw	fp,4(sp)
 4023a00:	dc000017 	ldw	r16,0(sp)
 4023a04:	dec00304 	addi	sp,sp,12
 4023a08:	f800283a 	ret

04023a0c <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 4023a0c:	defffe04 	addi	sp,sp,-8
 4023a10:	df000115 	stw	fp,4(sp)
 4023a14:	df000104 	addi	fp,sp,4
 4023a18:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 4023a1c:	e0bfff17 	ldw	r2,-4(fp)
 4023a20:	10bffe84 	addi	r2,r2,-6
 4023a24:	10c00428 	cmpgeui	r3,r2,16
 4023a28:	18001a1e 	bne	r3,zero,4023a94 <alt_exception_cause_generated_bad_addr+0x88>
 4023a2c:	100690ba 	slli	r3,r2,2
 4023a30:	008100b4 	movhi	r2,1026
 4023a34:	108e9104 	addi	r2,r2,14916
 4023a38:	1885883a 	add	r2,r3,r2
 4023a3c:	10800017 	ldw	r2,0(r2)
 4023a40:	1000683a 	jmp	r2
 4023a44:	04023a84 	movi	r16,2282
 4023a48:	04023a84 	movi	r16,2282
 4023a4c:	04023a94 	movui	r16,2282
 4023a50:	04023a94 	movui	r16,2282
 4023a54:	04023a94 	movui	r16,2282
 4023a58:	04023a84 	movi	r16,2282
 4023a5c:	04023a8c 	andi	r16,zero,2282
 4023a60:	04023a94 	movui	r16,2282
 4023a64:	04023a84 	movi	r16,2282
 4023a68:	04023a84 	movi	r16,2282
 4023a6c:	04023a94 	movui	r16,2282
 4023a70:	04023a84 	movi	r16,2282
 4023a74:	04023a8c 	andi	r16,zero,2282
 4023a78:	04023a94 	movui	r16,2282
 4023a7c:	04023a94 	movui	r16,2282
 4023a80:	04023a84 	movi	r16,2282
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 4023a84:	00800044 	movi	r2,1
 4023a88:	00000306 	br	4023a98 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 4023a8c:	0005883a 	mov	r2,zero
 4023a90:	00000106 	br	4023a98 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
 4023a94:	0005883a 	mov	r2,zero
  }
}
 4023a98:	e037883a 	mov	sp,fp
 4023a9c:	df000017 	ldw	fp,0(sp)
 4023aa0:	dec00104 	addi	sp,sp,4
 4023aa4:	f800283a 	ret

04023aa8 <exit>:
 4023aa8:	defffe04 	addi	sp,sp,-8
 4023aac:	000b883a 	mov	r5,zero
 4023ab0:	dc000015 	stw	r16,0(sp)
 4023ab4:	dfc00115 	stw	ra,4(sp)
 4023ab8:	2021883a 	mov	r16,r4
 4023abc:	4023b140 	call	4023b14 <__call_exitprocs>
 4023ac0:	8009883a 	mov	r4,r16
 4023ac4:	4023ca40 	call	4023ca4 <_exit>

04023ac8 <memcmp>:
 4023ac8:	218d883a 	add	r6,r4,r6
 4023acc:	21800826 	beq	r4,r6,4023af0 <memcmp+0x28>
 4023ad0:	20800003 	ldbu	r2,0(r4)
 4023ad4:	28c00003 	ldbu	r3,0(r5)
 4023ad8:	10c00226 	beq	r2,r3,4023ae4 <memcmp+0x1c>
 4023adc:	10c5c83a 	sub	r2,r2,r3
 4023ae0:	f800283a 	ret
 4023ae4:	21000044 	addi	r4,r4,1
 4023ae8:	29400044 	addi	r5,r5,1
 4023aec:	003ff706 	br	4023acc <__alt_data_end+0xfffe46cc>
 4023af0:	0005883a 	mov	r2,zero
 4023af4:	f800283a 	ret

04023af8 <strlen>:
 4023af8:	2005883a 	mov	r2,r4
 4023afc:	10c00007 	ldb	r3,0(r2)
 4023b00:	18000226 	beq	r3,zero,4023b0c <strlen+0x14>
 4023b04:	10800044 	addi	r2,r2,1
 4023b08:	003ffc06 	br	4023afc <__alt_data_end+0xfffe46fc>
 4023b0c:	1105c83a 	sub	r2,r2,r4
 4023b10:	f800283a 	ret

04023b14 <__call_exitprocs>:
 4023b14:	defff504 	addi	sp,sp,-44
 4023b18:	dd000515 	stw	r20,20(sp)
 4023b1c:	050100b4 	movhi	r20,1026
 4023b20:	dc800315 	stw	r18,12(sp)
 4023b24:	dfc00a15 	stw	ra,40(sp)
 4023b28:	df000915 	stw	fp,36(sp)
 4023b2c:	ddc00815 	stw	r23,32(sp)
 4023b30:	dd800715 	stw	r22,28(sp)
 4023b34:	dd400615 	stw	r21,24(sp)
 4023b38:	dcc00415 	stw	r19,16(sp)
 4023b3c:	dc400215 	stw	r17,8(sp)
 4023b40:	dc000115 	stw	r16,4(sp)
 4023b44:	d9000015 	stw	r4,0(sp)
 4023b48:	2825883a 	mov	r18,r5
 4023b4c:	a5104504 	addi	r20,r20,16660
 4023b50:	a4400017 	ldw	r17,0(r20)
 4023b54:	8cc00c17 	ldw	r19,48(r17)
 4023b58:	8c400c04 	addi	r17,r17,48
 4023b5c:	98004526 	beq	r19,zero,4023c74 <__call_exitprocs+0x160>
 4023b60:	9c000117 	ldw	r16,4(r19)
 4023b64:	00900034 	movhi	r2,16384
 4023b68:	10bfffc4 	addi	r2,r2,-1
 4023b6c:	9d402217 	ldw	r21,136(r19)
 4023b70:	85bfffc4 	addi	r22,r16,-1
 4023b74:	80a1883a 	add	r16,r16,r2
 4023b78:	8421883a 	add	r16,r16,r16
 4023b7c:	8421883a 	add	r16,r16,r16
 4023b80:	ac2f883a 	add	r23,r21,r16
 4023b84:	84000204 	addi	r16,r16,8
 4023b88:	9c21883a 	add	r16,r19,r16
 4023b8c:	b0002716 	blt	r22,zero,4023c2c <__call_exitprocs+0x118>
 4023b90:	90000726 	beq	r18,zero,4023bb0 <__call_exitprocs+0x9c>
 4023b94:	a800041e 	bne	r21,zero,4023ba8 <__call_exitprocs+0x94>
 4023b98:	b5bfffc4 	addi	r22,r22,-1
 4023b9c:	bdffff04 	addi	r23,r23,-4
 4023ba0:	843fff04 	addi	r16,r16,-4
 4023ba4:	003ff906 	br	4023b8c <__alt_data_end+0xfffe478c>
 4023ba8:	b9002017 	ldw	r4,128(r23)
 4023bac:	913ffa1e 	bne	r18,r4,4023b98 <__alt_data_end+0xfffe4798>
 4023bb0:	99000117 	ldw	r4,4(r19)
 4023bb4:	82000017 	ldw	r8,0(r16)
 4023bb8:	213fffc4 	addi	r4,r4,-1
 4023bbc:	b100021e 	bne	r22,r4,4023bc8 <__call_exitprocs+0xb4>
 4023bc0:	9d800115 	stw	r22,4(r19)
 4023bc4:	00000106 	br	4023bcc <__call_exitprocs+0xb8>
 4023bc8:	80000015 	stw	zero,0(r16)
 4023bcc:	403ff226 	beq	r8,zero,4023b98 <__alt_data_end+0xfffe4798>
 4023bd0:	9f000117 	ldw	fp,4(r19)
 4023bd4:	a8000526 	beq	r21,zero,4023bec <__call_exitprocs+0xd8>
 4023bd8:	00800044 	movi	r2,1
 4023bdc:	1592983a 	sll	r9,r2,r22
 4023be0:	a9404017 	ldw	r5,256(r21)
 4023be4:	494a703a 	and	r5,r9,r5
 4023be8:	2800021e 	bne	r5,zero,4023bf4 <__call_exitprocs+0xe0>
 4023bec:	403ee83a 	callr	r8
 4023bf0:	00000906 	br	4023c18 <__call_exitprocs+0x104>
 4023bf4:	a9004117 	ldw	r4,260(r21)
 4023bf8:	4908703a 	and	r4,r9,r4
 4023bfc:	2000041e 	bne	r4,zero,4023c10 <__call_exitprocs+0xfc>
 4023c00:	b9400017 	ldw	r5,0(r23)
 4023c04:	d9000017 	ldw	r4,0(sp)
 4023c08:	403ee83a 	callr	r8
 4023c0c:	00000206 	br	4023c18 <__call_exitprocs+0x104>
 4023c10:	b9000017 	ldw	r4,0(r23)
 4023c14:	403ee83a 	callr	r8
 4023c18:	99000117 	ldw	r4,4(r19)
 4023c1c:	e13fcc1e 	bne	fp,r4,4023b50 <__alt_data_end+0xfffe4750>
 4023c20:	89000017 	ldw	r4,0(r17)
 4023c24:	993fdc26 	beq	r19,r4,4023b98 <__alt_data_end+0xfffe4798>
 4023c28:	003fc906 	br	4023b50 <__alt_data_end+0xfffe4750>
 4023c2c:	00800034 	movhi	r2,0
 4023c30:	10800004 	addi	r2,r2,0
 4023c34:	10000f26 	beq	r2,zero,4023c74 <__call_exitprocs+0x160>
 4023c38:	99400117 	ldw	r5,4(r19)
 4023c3c:	99000017 	ldw	r4,0(r19)
 4023c40:	2800091e 	bne	r5,zero,4023c68 <__call_exitprocs+0x154>
 4023c44:	20000826 	beq	r4,zero,4023c68 <__call_exitprocs+0x154>
 4023c48:	89000015 	stw	r4,0(r17)
 4023c4c:	a8000226 	beq	r21,zero,4023c58 <__call_exitprocs+0x144>
 4023c50:	a809883a 	mov	r4,r21
 4023c54:	00000000 	call	0 <__alt_mem_SDRAM>
 4023c58:	9809883a 	mov	r4,r19
 4023c5c:	00000000 	call	0 <__alt_mem_SDRAM>
 4023c60:	8cc00017 	ldw	r19,0(r17)
 4023c64:	003fbd06 	br	4023b5c <__alt_data_end+0xfffe475c>
 4023c68:	9823883a 	mov	r17,r19
 4023c6c:	2027883a 	mov	r19,r4
 4023c70:	003fba06 	br	4023b5c <__alt_data_end+0xfffe475c>
 4023c74:	dfc00a17 	ldw	ra,40(sp)
 4023c78:	df000917 	ldw	fp,36(sp)
 4023c7c:	ddc00817 	ldw	r23,32(sp)
 4023c80:	dd800717 	ldw	r22,28(sp)
 4023c84:	dd400617 	ldw	r21,24(sp)
 4023c88:	dd000517 	ldw	r20,20(sp)
 4023c8c:	dcc00417 	ldw	r19,16(sp)
 4023c90:	dc800317 	ldw	r18,12(sp)
 4023c94:	dc400217 	ldw	r17,8(sp)
 4023c98:	dc000117 	ldw	r16,4(sp)
 4023c9c:	dec00b04 	addi	sp,sp,44
 4023ca0:	f800283a 	ret

04023ca4 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 4023ca4:	defffd04 	addi	sp,sp,-12
 4023ca8:	df000215 	stw	fp,8(sp)
 4023cac:	df000204 	addi	fp,sp,8
 4023cb0:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 4023cb4:	0001883a 	nop
 4023cb8:	e0bfff17 	ldw	r2,-4(fp)
 4023cbc:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 4023cc0:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 4023cc4:	10000226 	beq	r2,zero,4023cd0 <_exit+0x2c>
    ALT_SIM_FAIL();
 4023cc8:	002af070 	cmpltui	zero,zero,43969
 4023ccc:	00000106 	br	4023cd4 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 4023cd0:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 4023cd4:	003fff06 	br	4023cd4 <__alt_data_end+0xfffe48d4>
