function [y1] = myNeuralNetworkFunction(x1)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Auto-generated by MATLAB, 05-Feb-2020 12:36:38.
%
% [y1] = myNeuralNetworkFunction(x1) takes these arguments:
%   x = Qx5 matrix, input #1
% and returns:
%   y = Qx1 matrix, output #1
% where Q is the number of samples.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [226;0;144;0;0];
x1_step1.gain = [0.00380228136882129;0.00204290091930541;0.00242718446601942;2;2];
x1_step1.ymin = -1;

% Layer 1
b1 = [-2.2522109569932995399;1.3818891734981806341;1.5494734030000283376;0.31631306902308076179;-0.42252440548824743427;-0.20085399667830622361;0.47464735810361352586;-1.185532841104793178;1.7522675576141533149;2.1818117251168525073];
IW1_1 = [0.39034576849028451706 -1.6987787762315802453 1.1948412292774754917 0.41521072866331326656 0.68240560458565169277;-1.4123020983853555865 1.4987426256110449874 0.65254260453094048433 0.3987329749418426772 -0.75370793944955893906;-1.7597398636460219734 -1.9188744141296301127 0.73764017931180791976 0.55140096804031257793 0.051100186807963431102;-1.0751715123665248619 -0.45639292224193395153 -0.50202189343231806706 -0.79783250077922973631 0.59515671498619038271;0.84049460011568011275 -0.91676815959077373464 1.5488547709282558529 -0.63710114778151161197 0.54350691703179776493;0.9622020584456291159 1.7263976592880811989 0.054034186508704382113 -0.4772585951796541881 -0.53784598397612615184;1.2297379883565251468 -1.2724188387888069052 0.94673881990320940538 0.81384491823769411489 1.0939056709098724518;-1.2019921716376735787 0.50605207741466129434 1.723152122519530538 -0.10382906569809693953 -0.62111188539285822063;0.9187993683406102674 0.8869221418381033617 0.87554677913795297961 -0.96148585266335251376 -1.2361733937541348194;-0.043169660513048546679 1.0366465429919999863 -0.20218281653010805599 -1.6553876785691385987 1.0372019477636282847];

% Layer 2
b2 = -0.40746229839456354904;
LW2_1 = [0.42920318317597844215 -0.55030491222422162068 1.0660964137331330193 -0.7585793765822909096 0.74013886840374254472 1.0631041994512357984 -0.49251839711554434853 -1.0507458402349769688 -0.11199486943844902398 -0.18292189028683000784];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 2;
y1_step1.xoffset = 0;

% ===== SIMULATION ========

% Dimensions
Q = size(x1,1); % samples

% Input 1
x1 = x1';
xp1 = mapminmax_apply(x1,x1_step1);

% Layer 1
a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*xp1);

% Layer 2
a2 = repmat(b2,1,Q) + LW2_1*a1;

% Output 1
y1 = mapminmax_reverse(a2,y1_step1);
y1 = y1';
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
